<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Wi-Fi6（IEEE802.11ax）技术解读</title>
      <link href="/2023/04/12/wifi6/"/>
      <url>/2023/04/12/wifi6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="font-color-indianred-size-5-1-引言-font"><font color="Indianred" size="5"><strong>1  引言</strong></font></h2><p>        自电气和电子工程师协会在1997年发布无线局域网的第一个技术标准IEEE 802.11开始，在短短的20余年里，Wi-Fi技术经过了数次迭代，从最初仅有2Mbps到现在几个Gbps的带宽，技术标准的条目也不断丰富，从1999年的802.11b到2003年的802.11g，再到后来的802.11n、802.11ac，每一次更新都代表着无线局域网的通信性能有了巨大的提升。2019年，电气电子工程师协会发布了无线局域网的最新标准IEEE 802.11ax，负责商业运营的Wi-Fi联盟为了利于该标准的宣传和使用，也为了便于非专业用户有效区分和记忆，将该标准命名为Wi-Fi6。</p><h2 id="font-color-indianred-size-5-2-wi-fi6的核心技术-font"><font color="Indianred" size="5"><strong>2  Wi-Fi6的核心技术</strong></font></h2><p>        新一代Wi-Fi标准的命名方法，在利于宣传和记忆的同时，也标志着无线局域网技术的巨大突破，在本节，我将详细介绍Wi-Fi6中新加入的核心技术。</p><h3 id="font-color-118899-2-1-ofdma正交频分多址-font"><font color="#118899">2.1  OFDMA正交频分多址</font></h3><p>        从2003年推出的Wi-Fi3（IEEE 802.11a/g）开始，无线通信开始普遍采用OFDM频分复用技术，即将信道可用频段分为若干子频段分别传输数据，由于子信道的子载波具有正交性，而在不同的子载波之间存在清晰的频带间隔，所以在接收端利用相干解调能够比较容易地分离各个频段的信号波形。</p><img src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_23/wifi6/2.1-0.bmp" width="85%"><div class="box1">公式2.1-1 双边带OFDM调制解调公式</div><br><img src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_23/wifi6/2.1-1.png" width="80%"><div class="box1">图2.1-1 OFDM正交频分复用系统示意图</div><br><img src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_23/wifi6/2.1-2.png" width="80%"><div class="box1">图2.1-2 OFDM正交频分复用调制解调示意图</div><br><p>        OFDM是一种常见的多载波技术，底层原理是将带宽为B的载波划分为带宽为B/N的N个子载波，由于考虑到子载波间的间隔余量，实际上的子载波带宽会小于B/N。OFDM能够大大提高通信速率，提高频带利用率，并提高抗干扰能力。然而，其本质上是一种类似于并行口的多路并发，即在一次传输过程中，所有的子载波全部用于统一用户的服务，在数据量不大的情况下，会造成极大的带宽浪费。</p><p>        OFDMA正交频分多址在OFDM的基础上添加了多址方法，能够在一次发送过程中对不同用户进行服务，在频分复用的同时进行多用户的复用。根据802.11ax标准，整个信道被分为多个被称为“资源单位”（Resource Unit，abbr. RU）的载波组，而每个RU可以分别分配给不同用户，从而在同一时间上满足不同用户的通信需求。</p><img src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_23/wifi6/2.1-3.png" width="55%"><div class="box1">图2.1-3 OFDM的时频分配图</div><br><img src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_23/wifi6/2.1-4.png" width="55%"><div class="box1">图2.1-3 OFDMA的时频分配图</div><br><h3 id="font-color-118899-2-2-mu-mimo技术-font"><font color="#118899">2.2  MU-MIMO技术</font></h3><p>        MIMO技术，即Multiple-Input Multiple-Output多输入多输出，是指在无线通信中，利用多径效应和信道分集，在相同的带宽上进行多路复用，可以有效提高系统容量、覆盖范围和信噪比。根据发送天线和接收天线的数目，我们可以将发送模式分为以下几类：</p><ul><li>SISO（Single-Input Single-Output）：即采用单根发射天线对接单根接收天线，两根天线之间存在唯一路径，这是最早期的传输方式，其缺点是传输效率较低，可靠性较差。</li></ul><img src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_23/wifi6/2.2-1.png"><div class="box1">图2.2-1 SISO通信示意图</div><ul><li>SIMO（Single-Input Multiple-Output）：即采用单根发射天线对接多根接收天线，其间存在n条路径（n为接收天线的数量）。由于信号全部来自单根天线，在理想情况下接收端收到的数据是相同的，故不能通过此方法增大带宽；但由于传播路径不同，根据多径效应，接收到的模拟信号会有所差异，但仅需要在n条信号流中还原1条原始信号，因此能够在信道条件较差的情况下提高传输可靠性。<br><img src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_23/wifi6/2.2-2.png"></li></ul><div class="box1">图2.2-2 SIMO通信示意图</div><ul><li>MISO（Multiple-Input Single-Output）：即采用多根发射天线对接单根接收天线，其间存在m条路径（m为发送天线的数量）。多条发送天线能够承载不同的数据流，但由于都要通过同一接收天线，使得其也只能发送同样的数据，故而也只能达到增加可靠性的效果。<br><img src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_23/wifi6/2.2-3.png"></li></ul><div class="box1">图2.2-3 MISO通信示意图</div><ul><li>MIMO（Multiple-Input Multiple-Output）：即采用多根发射天线对接多根接收天线，其间存在m×n条路径，而可承载不同信号的数据流达到了min{m, n}条，在增加可靠性的同时使得传输效率成倍提高。<br><img src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_23/wifi6/2.2-4.png"></li></ul><div class="box1">图2.2-4 MIMO通信示意图</div><p>        而MU-MIMO（Multiple-Users Multiple-Input Multiple-Output）技术在MIMO的基础上，同样增加了多用户的同时接入，这样就避免了由于一位用户占用全部路径造成的资源浪费和等待时间。由于路由器的天线数量可能在4~8根，而受限于自身尺寸的用户端一般只有1~2根，MU-MIMO支持将未配对的路由器天线对接到其他用户，在同一时刻实现AP与多个STA的数据传输，大大减少了通信资源的浪费。</p><img src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_23/wifi6/2.2-5.png" width="65%"><div class="box1">图2.2-5 SU-MIMO通信示意图</div><img src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_23/wifi6/2.2-6.png" width="65%"><div class="box1">图2.2-6 MU-MIMO通信示意图</div><p>        在Wi-Fi5中，下行（DL）MU-MIMO已经得到了成功的应用，而在Wi-Fi6中，上行（UL）和下行（DL）将同时允许MU-MIMO，值得注意的是，该技术依赖支持该技术的硬件系统，在Wi-Fi6推广的初期阶段较为受限。</p><h3 id="font-color-118899-2-3-bss着色机制-bss-coloring-font"><font color="#118899">2.3  BSS着色机制（BSS Coloring）</font></h3><p>        为了保证在任意时刻Wi-Fi的一个信道（或RU）上只允许一个用户传输数据，AP和STA需要不断监听该信道（或RU）上是否有正在传输的无线局域网信号，以判断该信道（或RU）是否已被占用，若被占用，则需要进行退避和延迟传输。通过冲突退避，各用户轮流使用信道资源，以达到较好的传输效率。</p><p>        然而随着联网设备的普及，高密度场景下常常出现可用信道过少的现象，阻碍了通信效率，因此，如果能够利用信道的空分复用，将会有效提高数据流量。</p><p>        为了更好地实现空分复用，IEEE 802.11ax引入了一种新的同频传输识别方法，即BSS Coloring机制，通过在PHY报头中添加BSS Coloring字段，对来自不同基本服务集（Basic Service Set，BSS）的信号进行“着色”区分。在传输时，用户需要监听占用信道（或RU）的信号的BSS“颜色”来判断是否会出现数据冲突，若 “颜色”相同则退避，待“颜色”不同时继续发送；在用户接收消息时，需要根据报文的BSS“颜色”判断是否为需要的报文，保留“颜色”相同的报文，丢弃“颜色”不符的报文。</p><img src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_23/wifi6/2.3-1.png" width="30%"><div class="box1">图2.3 BSS Coloring机制示意图</div><h3 id="font-color-118899-2-4-1024-qam-font"><font color="#118899">2.4  1024-QAM</font></h3><p>        正交幅度调制（Quadrature Amplitude Modulation，QAM）是一种幅度和相位的联合键控，通过幅值和相位两个独立参量的调制，能够以乘数倍的尺度扩大信息的编码效率。如对于某一时刻的信号：<br><img src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_23/wifi6/2.4-01.bmp" width="48%"></p><p>        其中k须为整数，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">A_{k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>θ</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">θ_{k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>能够分别取不同值。</p><p>        将上式根据同向分量和正交分量展开，有：<br><img src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_23/wifi6/2.4-02.bmp" width="42%"></p><p>        令两项分量的幅值分别为：<br><img src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_23/wifi6/2.4-03.bmp" width="32%"></p><p>        则有：<br><img src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_23/wifi6/2.4-04.bmp" width="30%"></p><p>        其中， <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>X</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">X_{k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>Y</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">Y_{k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 也是能够取任意值的变量。即对于任一码字 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>e</mi><mi>k</mi></msub><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">e_{k}(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span></span></span></span> ，可以将其分解为两个同频正交的振幅键控信号 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>X</mi><mi>k</mi></msub><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><msub><mi>ω</mi><mi>c</mi></msub><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">X_{k}cos(ω_{c}t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">c</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">t</span><span class="mclose">)</span></span></span></span> 与 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>Y</mi><mi>k</mi></msub><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><msub><mi>ω</mi><mi>c</mi></msub><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Y_{k}sin(ω_{c}t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">c</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">t</span><span class="mclose">)</span></span></span></span> 之和。</p><p>        对于不同取值的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>X</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">X_{k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>Y</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">Y_{k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，我们可以分别用横纵坐标表示在矢量图上。设在某一编码规则下， <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>X</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">X_{k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 可以有4个取值，而 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>Y</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">Y_{k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 也有4个取值，那么如下图所示，合成信号 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>e</mi><mi>k</mi></msub><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">e_{k}(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span></span></span></span> 的矢量图上共能取到4×4=16个点，故称为16-QAM矢量图，以图上的点代表码元可以选取的位置，则单个码元能够表示4bit的数据。这样的调制原理称为QAM，即正交幅度调制；由于其矢量图酷似星座，该矢量图也被称为星座图。<br><img src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_23/wifi6/2.4-1.png" width="26%"></p><div class="box1">图2.4-1  16-QAM星座图</div><p>        在Wi-Fi5中，数字带通调制采用256-QAM（即16×16），每个码元能够承载8bit数据，而在Wi-Fi6中，数字带通调制采用1024-QAM（即32×32），每个码元能够承载10bit数据。因而，单个码元承载的信息量较前代上升了25%。<br><img src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_23/wifi6/2.4-2.png" width="50%"></p><div class="box1">图2.4-2  256-QAM和1024-QAM星座图</div><h3 id="font-color-118899-2-5-一些其他技术-font"><font color="#118899">2.5  一些其他技术</font></h3><p>        除上述技术外，Wi-Fi6还进行了其他方面的优化。</p><p>        更多的有效子载波数量：Wi-Fi6将最小子载波的占用带宽从312.5kHz缩小到78.125kHz，通过更窄的最小子载波带宽增加有效子载波数量，能够成倍地增加传输效率。以HT160频宽为例，有效子载波数量由Wi-Fi5的468个增加到Wi-Fi6的1960个。</p><p>        提升传输可靠性：Wi-Fi6将每个码元的发送时间由Wi-Fi5的3.2us提高为4倍，达到12.8us（Long OFDM Symbol），而空隙时间（GI）为0.8us，这看似减小了信息传输率，实则大大减少了误码率和丢包率，有效提升了信号传输的可靠性。</p><p>        提高覆盖范围： Wi-Fi 6能够使用2MHz频宽进行窄带传输，有效降低频段噪声干扰，提升了终端接受灵敏度，增加了覆盖距离；而上一段落中的Long OFDM Symbol机制，也使得延长传输距离成为可能。</p><p>        减少设备功耗：Wi-Fi6引入了目标唤醒时间（TWT）机制，即AP设备与STA约定协议，仅在收到AP设备唤醒的条件下进行正常通信，在无需通信时则进入“休眠”状态，大大降低了设备功耗；另一方面，“休眠”机制也限制了多STA间的竞争退避，减少了拥塞现象的发生。</p><h2 id="font-color-indianred-size-5-3-wi-fi6的出色性能-font"><font color="Indianred" size="5"><strong>3  Wi-Fi6的出色性能</strong></font></h2><h3 id="font-color-118899-3-1-总吞吐量计算-font"><font color="#118899">3.1  总吞吐量计算</font></h3><p>        Wi-Fi 6采用Long OFDM Symbol机制，单个码元的传输时间为12.8us，间隔时间0.8us。因此，理想状态下，单个子载波内，每秒内能够发送的码元数量为：<br><img src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_23/wifi6/3-01.bmp" width="58%"></p><p>        1024-QAM调制下的每个码元，承载信息量为10bit；考虑到传输校验引入的冗余，Wi-Fi 6仍然采用5B6B编码，故信息传输率R=83.33%。由此得到单个子载波的容量：<br><img src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_23/wifi6/3-02.bmp" width="34%"></p><p>        由前节，Wi-Fi6的单个信道包含有效子载波数量为1960个，故单个信道的最大容量为：<br>C=p×C_0=1200Mbps<br><img src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_23/wifi6/3-03.bmp" width="25%"></p><p>        而Wi-Fi6支持的最大空间流数为8，则得到Wi-Fi6的最大吞吐量为：<br><img src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_23/wifi6/3-04.bmp" width="23%"></p><p>        同等条件下，计算Wi-Fi5的吞吐量：<br><img src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_23/wifi6/3-05.bmp" width="59%"></p><p>        综上，从Wi-Fi 5提升到Wi-Fi 6，信号吞吐量的增幅为：<br><img src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_23/wifi6/3-06.bmp" width="28%"></p><h3 id="font-color-118899-3-2-高密度无线接入性能-font"><font color="#118899">3.2  高密度无线接入性能</font></h3><p>        单从吞吐量指标上看，39.1%的性能提升可以算是一次进步，但并没有Wi-Fi 3到Wi-Fi 4、Wi-Fi 4到Wi-Fi 5那样能改变数量级的显著飞跃。然而当我们回到最初想解决的问题时，便会发现Wi-Fi 6确乎是一次质的飞跃。</p><p>        在智能设备越发普及的今日，可靠的高密度无线接入越来越凸显其重要性，尤其是在学校、办公室、公共交通等场所中，设备的通信效率可能面临大幅降低甚至拥塞的风险，而Wi-Fi 6中的诸多技术正是为这一场景量身定制的。</p><p>        OFDMA和MU-MIMO技术允许不同用户对信道的共同使用，减少了STA接入等待时间，并有效利用剩余带宽；BSS Coloring机制通过着色字段区分不同服务集，实现更好的空分复用；Long OFDM Symbol机制通过延长码元的传输时间，大大提高了传输可靠性；TWT机制通过“睡眠”和“唤醒”，减小系统整体功耗，并减少了退避重传的发生……</p><p>        这些技术，都能帮助Wi-Fi 6更好地适应高密度无线接入场景。</p><h2 id="font-color-indianred-size-5-4-总结-font"><font color="Indianred" size="5"><strong>4  总结</strong></font></h2><p>        为了在高密度无线接入时更好地保持无线局域网通信效率，Wi-Fi 6应运而生。伴随着OFDMA、UL/DL MU-MIMO、BSS Coloring、TWT等新技术的使用，Wi-Fi的迭代一改之前不断增大带宽的道路，而是朝着更稳定、可靠、安全、舒适的方向开拓。在未来，Wi-Fi 6将配合5G技术，在不同场景下发挥自身优势，共同改变大众的网络生活。</p><hr><h2 id="font-size-3-参考文献：-font"><font size="3"><strong>参考文献：</strong></font></h2><p>[1]黄宇,李雨汝.WiFi6技术现状综述[J].中国无线电,2021,No.309(05):90-91.<br>[2]华为技术有限公司.华为Wi-Fi 6(802.11ax)技术白皮书[EB/OL].华为,2019-10-22<br>[3]王义博.什么是MIMO？[EB/OL].华为IP知识百科, 2022-04-02<br>[4]陈旭彬,杨大成.多用户MIMO:下一代移动通信关键技术[J].移动通信,2007,No.212(10):101-104.<br>[5]樊昌信,曹丽娜.通信原理[M]. 北京:国防工业出版社, 2022.6, 228-231.</p><head>  <style type="text/css">.box1{    font-size: 10px;color: grey;    text-align: center;  /*水平居中*/    }  </style></head><head>  <style type="text/css">.box1{    font-size: 20px;color: black;    text-align: center;  /*水平居中*/    }  </style></head>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>和臭宝的2022年终总结</title>
      <link href="/2023/01/12/our22/"/>
      <url>/2023/01/12/our22/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><video width="100%" height="100%" controls>  <source src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_23/our22/Our%20best%202022~1.mp4" type="video/mp4"></video><hr><p>By <a href="https://signalista.github.io">Signalista</a></p><br><br><br><br><br><br><br><br><br><br><p>顺便在这里存一下我们的一路走来：<br><br><br><br><br><video width="60%" height="60%" controls></video></p>  <source src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_23/our22/Shaoxing.mp4" type="video/mp4"><br><br><video width="60%" height="60%" controls>  <source src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_23/our22/Changsha.mp4" type="video/mp4"></video><br><br><video width="60%" height="60%" controls>  <source src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_23/our22/Taizhou.mp4" type="video/mp4"></video>]]></content>
      
      
      <categories>
          
          <category> 手记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 所爱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++学习笔记【不定期更新】</title>
      <link href="/2022/09/11/cpp00/"/>
      <url>/2022/09/11/cpp00/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="font-color-indianred-size-5-1-面向对象-font"><font color="Indianred" size="5"><strong>1.  面向对象</strong></font></h2><p><font color="#118899" size="3"><strong>1.1  对象和类</strong></font></p><ul><li><p><strong>对象</strong>：描述其属性的数据以及对这些数据施加的一组操作封装在一起构成的统一体。对象可认为是数据+操作。</p></li><li><p><strong>类</strong>：类是具有相同的数据和相同的操作的一组对象的集合。</p></li><li><p><strong>对象和类</strong>：类和对象之间是抽象与具体的关系。类是一个模板是对一类事物的抽象描述，而对象用于表示现实中该事物的个体。类是在对象之上的抽象，对象则是类的具体化，是类的实例。</p></li><li><p><strong>消息传递</strong>：对象之间的交互。</p></li><li><p><strong>方法</strong>：对象实现的行为称为方法。</p></li><li><p><strong>面向对象程序设计的基本特征</strong>：抽象、封装、继承、多态。</p></li></ul><p><font color="#118899" size="3"><strong>1.2  对象的定义、声明、初始化</strong></font></p><ul><li><p><strong>定义</strong>：将一段计算机内存和变量名关联起来。对于一个对象，定义只能进行一次。</p></li><li><p><strong>声明</strong>：变量声明是一个语句，指定变量名称和类型，它只是说明系统内有这样一个变量（只要有声明存在，compiling时不会报错，link时ing可能报错），定义可以在其他地方完成。一个对象可以多次声明。</p></li><li><p><strong>初始化</strong>：将初始值赋给变量的声明称为初始化，一般有三种方式：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int m1 = 10;        //变量赋值</span><br><span class="line">int m2 (10);        //函数赋值（像构造函数），与楼上等价</span><br><span class="line">int m3 &#123;3&#125;;         //初始化列表（有时也代表结构体）</span><br></pre></td></tr></table></figure><p><font color="#118899" size="3"><strong>1.3  动态内存分配</strong></font></p><ul><li><strong>new</strong>：为对象申请内存空间，返回值是该类型的指针。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">new int            // 与 malloc(sizeof(int)) 可以视为等价</span><br><span class="line">new stash（类名）   // 申请空间后完成对象初始化（调用构造函数）</span><br><span class="line">new int[10]        // 申请多个连续空间</span><br><span class="line">new stash[10]      // 连续新建10个对象并初始化</span><br></pre></td></tr></table></figure><ul><li><strong>delete</strong>：收回对象内存空间。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">delete p；         // 收回空间</span><br><span class="line">delete[] p；       // 收回多个控件（方括号中不能写数量）</span><br></pre></td></tr></table></figure><ul><li><p>new/delete 是运算符，malloc/free是函数，new会调用构造函数（分配空间+初始化），molloc不会（只分配空间），delete会调用析构函数。</p></li><li><p>在同一程序中，不允许同时使用 {new，delete} 和 {malloc，free}，两套机制会竞争内存空间。</p></li></ul><p><font color="#118899" size="3"><strong>1.4  引用</strong></font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">char c;            // a character</span><br><span class="line">char *p = &amp;c;      // a pointer to a character</span><br><span class="line">char &amp;r = c;       // a reference to character</span><br></pre></td></tr></table></figure><ul><li>引用类型变量和代表的变量的绑定（别名）</li><li>一旦进行引用，就是不能改变的，但可以有多个别名</li><li>对于全局变量/本地变量，在引用声明时必须同时进行绑定</li><li>对于结构体内/参数列表，不需要给出绑定</li><li>没有引用的数组，但有数组的引用</li><li>引用无法绑定引用</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int x = 47;</span><br><span class="line">int&amp; y = x;         // reference</span><br><span class="line">cout &lt;&lt; &quot;x=&quot; &lt;&lt; x;</span><br></pre></td></tr></table></figure><p>输出结果为“x=47”。</p><p><font color="#118899" size="3"><strong>1.5  面向对象</strong></font></p><ul><li>形参的const：告诉调用者保证不改变实参</li><li></li></ul><p>例：二维点的移动</p><p>C:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">typedef struct </span><br><span class="line">&#123;</span><br><span class="line">    float x;</span><br><span class="line">    float y;</span><br><span class="line">&#125; Point;</span><br><span class="line"></span><br><span class="line">void print(const Point *p)</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; p-&gt;x &lt;&lt; &quot;,&quot; &lt;&lt; p-&gt;y &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void move(Point *p, int dx, int dy)</span><br><span class="line">&#123;</span><br><span class="line">    p-&gt;x += dx;</span><br><span class="line">    p-&gt;y += dy; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    Point a,b;</span><br><span class="line">    a.x = b.x = a.y = b.y = 0;</span><br><span class="line">    move(&amp;a,2,2);</span><br><span class="line">    print(&amp;a);</span><br><span class="line">    print(&amp;b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Cpp:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">struct Point</span><br><span class="line">&#123;</span><br><span class="line">    float x;</span><br><span class="line">    float y;</span><br><span class="line">    void print()                          // 可以在struct内定义</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; x &lt;&lt; &quot;,&quot; &lt;&lt; y &lt;&lt; endl;    // 不需要指针访问</span><br><span class="line">    &#125;</span><br><span class="line">    void move(float dx, float dy);        // 可以在struct内声明</span><br><span class="line">    void init(int ix, int iy)</span><br><span class="line">    &#123;</span><br><span class="line">        x=ix; y=iy;                       // 新的初始化方式</span><br><span class="line">    &#125;</span><br><span class="line">&#125; ;</span><br><span class="line"></span><br><span class="line">void Point::move(float dx, float dy)</span><br><span class="line">&#123;</span><br><span class="line">    x += dx;                               // 不需要指针访问</span><br><span class="line">    y += dy; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    Point a,b;</span><br><span class="line">    a.init(0,0);</span><br><span class="line">    b.init(0,0);</span><br><span class="line">    a.move(2,2);                           // 成员引用式调用函数</span><br><span class="line">    a.print();   </span><br><span class="line">    b.print();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以将函数定义或函数声明放置在struct内</li><li>对象指定无需传参，只需要用结构体方式调用函数</li><li>常常包含初始化函数</li><li>&quot;::&quot;标点符号用于连接类名和函数名</li><li>成员函数内隐藏的this指针指向对象（对于本例，有隐藏Point *this）<ul><li>cout &lt;&lt; this; 输出对象地址</li><li>x 也可也写作 this-&gt;x</li></ul></li></ul><p><font color="#118899" size="3"><strong>1.6  构造函数和析构函数</strong></font></p><ul><li><p>struct能够直接访问里面的所有东西，class默认全部不能访问，从&quot;public:&quot;起能够访问，从&quot;private:&quot;起为无法访问的</p></li><li><p>建立与类同名的函数作为构造函数，其意义是在新建对象的同时进行赋值</p></li><li><p>拥有构造函数的类不再支持struct大括号赋值</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">class Point</span><br><span class="line">&#123;</span><br><span class="line">private:</span><br><span class="line">    float x;</span><br><span class="line">    float y;</span><br><span class="line">public:</span><br><span class="line">    void print();</span><br><span class="line">    void move(float dx, float dy);       </span><br><span class="line">    Point(int ix, int iy);                // 构造函数</span><br><span class="line">    Point(int iz);                        // cpp支持同名函数</span><br><span class="line">&#125; ;</span><br><span class="line"></span><br><span class="line">void Point::print()                         </span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; x &lt;&lt; &quot;,&quot; &lt;&lt; y &lt;&lt; endl; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Point::move(float dx, float dy)</span><br><span class="line">&#123;</span><br><span class="line">    x += dx;                       </span><br><span class="line">    y += dy; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Point::Point(int ix, int iy)</span><br><span class="line">&#123;</span><br><span class="line">    x=ix; y=iy;                    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Point::Point(int iz)</span><br><span class="line">&#123;</span><br><span class="line">    x=y=iz;                 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>析构函数的命名为&quot;~&quot;+对象名</p></li><li><p>析构的顺序为构造的逆序</p></li><li><p>在程序结束时，所有对象自动调用析构函数</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~Point()</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; &quot;~&quot; &lt;&lt; x &lt;&lt; &quot;,&quot; &lt;&lt; y ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后输出结果为&quot;~4,4~3,5&quot;</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一款软件拯救你的C盘</title>
      <link href="/2022/09/06/disktool/"/>
      <url>/2022/09/06/disktool/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>        C盘的储存空间早就被我塞得满满当当，每次一红就清理它，前前后后已经不知道清了多少遍了，趁着给导师打工的摸鱼时间，干脆给C盘扩个容吧，一劳永逸。</p><p>        众所周知，华为的C盘向来只有80G，我从D盘割了20G给C盘，现在是100G，完全不愁了。这是目前的效果：</p><img src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_22/disktool/after.bmp"><p>        虽然我总是很害怕动这种系统的东西，但亲测不会让系统出现奇怪的问题，大家可以放心使用。</p><h2 id="font-color-118899-1-官网下载-分区助手-font"><font color="#118899">1. 官网下载“分区助手”</font></h2><p>        进入官方网址 <a href="https://www.disktool.cn/">https://www.disktool.cn/</a> 下载Windows版分区助手，没多大的，尽量下载在C盘，之后就会知道了。</p><p>        一些情况下可能需要使用码，需要关注公众号获取。</p><h2 id="font-color-118899-2-根据需要重新划分盘区-font"><font color="#118899">2. 根据需要重新划分盘区</font></h2><p>        如图，右键后点击“分配空余空间”将D盘空间分给C盘。</p><img src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_22/disktool/disk1.bmp"><p>        单击确定后显示预览状态，如图：</p><img src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_22/disktool/disk2.bmp"><h2 id="font-color-118899-3-点击提交-font"><font color="#118899">3. 点击提交</font></h2><p>        在左上角电机提交按钮，点击执行，系统进入关机状态。</p><img src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_22/disktool/disk3.bmp"><h2 id="font-color-118899-4-一些常见问题-font"><font color="#118899">4. 一些常见问题</font></h2><p>        若提示“D盘被占用”等等说明D盘有正在运行的软件，需要全部关掉后再次执行；如果多次执行未果，也有可能是这个问题。所以说如果将分盘助手下载在D盘，就必须关闭分盘助手才行，但关闭之后哪里来的执行呢（乐）。</p><p>        如果关闭所有程序后仍然显示正在占用，那就是隐藏文件的关系。显示隐藏文件后我们会看到D盘中有这样一个东西：</p><img src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_22/disktool/disk4.bmp"><p>        这是一个系统文件，分配的虚拟内存。通过 高级系统设置&gt;&gt;性能设置&gt;&gt;高级&gt;&gt;虚拟内存&gt;&gt;自定义大小 更改虚拟内存的位置，将D盘的初始大小和最大值都设置为0。</p><img src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_22/disktool/disk5.bmp"><p>        然后就可以顺利执行啦！执行完后记得把虚拟内存搞回去，不然电脑很容易过载。</p><br>__________________<p>By <a href="https://signalista.github.io">Signalista</a></p><br><br>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>勃拉姆斯和他的热烈</title>
      <link href="/2022/08/12/Brahms/"/>
      <url>/2022/08/12/Brahms/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>写在前面：</strong><br>其实很早就想写这篇文章了，但从曲目的挑选、版本的辨析，到背景的调查和一些音乐理论的探讨，再加上拖延症的助攻，前前后后花了有挺久的时间，终于写出这篇1.7万字的文章，希望大家能够喜欢。<br>另外，吸取了上次写音乐推荐时wyy链接容易崩溃的教训，我给每个曲子找齐了哔站和油管的版本，窗口选项的排列顺序仍然是我的推荐顺序，所以仍然建议您挂梯畅游。<br>关于勃拉姆斯的作品，本次并没有加入声乐作品和匈牙利舞曲的部分，以其与主线有所脱离加之篇幅限制。</p><br><hr><br><p>        1896年，克拉拉逝世，63岁的勃拉姆斯收到电报，立刻赶往法兰克福。由于心情丧乱，坐上了相反方向的列车，等到勃拉姆斯赶到时，葬礼已经结束，他已经见不到克拉拉最后一面了。十字架下，是四十年未见的爱人和终身无法启齿的情感，他不禁老泪纵横。他一个人站在坟前，把小提琴架在肩上，拉了一曲小提琴，而后便悄然离去。第二年春天，勃拉姆斯在维也纳死去。</p><p>        人们总是说，勃拉姆斯的情感是克制的，但我觉得，他不仅没有掩藏自己的情感，更是将其表现得淋漓尽致。舒曼死后，勃拉姆斯再没有理由呆在克拉拉身边，他离开克拉拉所在的城市，从此便天各一方。然而他们的联系还是如此微妙，勃拉姆斯帮助克拉拉开演奏会，资助她抚养孩子，将自己所有作品第一时间寄给克拉拉，由她来首演。他终身未婚，写了许多情书给克拉拉，最后都没有寄出，付之一炬。</p><p>        情无所寄，遂倾于乐。勃拉姆斯的音乐中充满了复杂的情感，时而舒缓，时而紧张，或是轻柔，或是夸张，偶尔歇斯底里，音符游走如思绪，突然的割裂感又是如此恰到好处。</p><p>        让我们从这首小夜曲开始吧……</p><br><h2 id="p-style-line-height-4px-font-color-indianred-ⅰ-d大调第一小夜曲第四乐章-font"><p style="line-height: 4px;"><font color="Indianred">Ⅰ  D大调第一小夜曲第四乐章</font></p></h2><p><font color="Indianred" size="4"><em>       Serenade No.1 in D major, Op.11:4. Menuetto</em></font></p><p></p> <div class="tabs" id="www"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#www-1"><i class="fa-brands fa-youtube"></i>YouTube</button></li><li class="tab"><button type="button" data-href="#www-2"><i class="fa-solid fa-music"></i>网易云通道</button></li><li class="tab"><button type="button" data-href="#www-3"><i class="fa-brands fa-bilibili"></i>bilibili</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="www-1"><iframe id="ytplayer" type="text/html" src="https://www.youtube.com/embed/65gY1Bw9ndc?autoplay=1&origin=http://example.com" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="www-2"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="86" src="//music.163.com/outchain/player?type=2&id=1374086687&auto=1&height=66"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="www-3"><p>来自荷兰皇家音乐厅的版本<br>—第四乐章31:40~35:05—</p> <iframe id="ytplayer" type="text/html" src="https://xbeibeix.com/api/bilibili/biliplayer/?url=BV1U5411L7WC" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>        此曲写作于1857年，即舒曼逝世后的第一年,他担任了一个对他发展成为作曲家至关重要的职位——德特莫尔德宫廷的钢琴、室内乐师和合唱指挥，这让他取得了作为指挥的最初经验，尽管他在早年与罗伯特·舒曼的合作中已经研究过配乐技巧，但滞回的经验对于他的后续创作而言依然是物价的。然而，他也清楚的明白，这也意味着他将离开杜塞尔多夫，离开朋友病痛的回忆，离开他对嫂嫂克拉拉不切实际的爱。</p><p>        在德特莫尔德宫廷的职位对这样一位正处于事业上升期的年轻作曲家来说是理想的，一年中的大部分时间他都可以在自己的家乡汉堡醉心于音乐，终于可以把那些黑暗的日子抛在脑后。小夜曲就是在这样一种情境下诞生的，彼时他的内心安静平和，有一丝淡淡的伤感，就像这如水的旋律。</p><br><h2 id="p-style-line-height-4px-font-color-indianred-ⅱ-b大调钢琴三重奏第三乐章-初版-font"><p style="line-height: 4px;"><font color="Indianred">Ⅱ  B大调钢琴三重奏第三乐章 (初版)</font></p></h2><p><font color="Indianred" size="4"><em>       Piano Trio No.1 in B Major, Op.8:3 Adagio (1854 Version)</em></font></p><p></p> <div class="tabs" id="www"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#www-1"><i class="fa-solid fa-music"></i>网易云通道</button></li><li class="tab"><button type="button" data-href="#www-2"><i class="fa-brands fa-youtube"></i>YouTube</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="www-1"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="86" src="//music.163.com/outchain/player?type=2&id=404784165&auto=1&height=66"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="www-2"><iframe id="ytplayer" type="text/html" src="https://www.youtube.com/embed/gidydTXDYnA?autoplay=1&origin=http://example.com" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>        B大调钢琴三重奏是勃拉姆斯的第一首室内乐作品，最初版本发布于1854年，最初版本的第三乐章强有力地代表了勃拉姆斯对标准奏鸣曲式的反抗，而行谱上不仅有他朝气蓬勃的青春精神，也暗藏着勃拉姆斯成熟时期风格的影子。Donald Trisman认为，勃拉姆斯一个清晰的特点是*“避免清晰在相邻的两个部分之间进行明确的分割”*，在这一版本中，这一特点尤为凸显。</p><p>        另外注意，目前网络上主流的版本（包括最著名的王健版）都是1891年的Revised版本。</p><br><h2 id="p-style-line-height-4px-font-color-indianred-ⅲ-降a大调第十五号圆舞曲-font"><p style="line-height: 4px;"><font color="Indianred">Ⅲ  降A大调第十五号圆舞曲</font></p></h2><p><font color="Indianred" size="4"><em>       Waltz in A-Flat Major, Op.39: No.15</em></font></p><p></p> <div class="tabs" id="www"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#www-1"><i class="fa-brands fa-bilibili"></i>bilibili</button></li><li class="tab"><button type="button" data-href="#www-2"><i class="fa-solid fa-music"></i>网易云通道</button></li><li class="tab"><button type="button" data-href="#www-3"><i class="fa-brands fa-youtube"></i>YouTube</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="www-1"><p>郎朗和吉娜的四手联弹版本真的好好磕！</p><iframe id="ytplayer" type="text/html" src="https://xbeibeix.com/api/bilibili/biliplayer/?url=BV1za411E71j" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="www-2"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="86" src="//music.163.com/outchain/player?type=2&id=561736834&auto=1&height=66"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="www-3"><p>一个韩国乐团改编的弦乐四重奏~</p><iframe id="ytplayer" type="text/html" src="https://www.youtube.com/embed/d_6k0n1ez68?autoplay=1&origin=http://example.com" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>        此曲完成于1865年，是一首短小的钢琴作品，非常婉转却热烈的抒情，对主题的不断重复像海浪一样一次次拍打向岸边，时而粗犷时而细腻，时而舒缓时而紧张，在短短的几句如诗的旋律中，复杂的情感喷涌而出。</p><p>        有意思的是，纵使勃拉姆斯有如此之多饱含深情的作品，他最享誉世界的仍然是两首随意写作的小品——《勃拉姆斯摇篮曲》和《降A大调圆舞曲》。每当我听到这首曲子，总觉得它是一首残缺的作品，仿佛是在奏鸣曲的主部主题戛然而止了。我找遍了全网，到处是它的改编作品，有弦乐重奏的，有管弦室内乐的，却没有人在长度上进行扩写的。也许，戛然而止，就像勃拉姆斯突然离开杜塞尔多夫那样，才是最好的归宿吧。</p><br><h2 id="p-style-line-height-4px-font-color-indianred-ⅳ-c小调第一交响曲-font"><p style="line-height: 4px;"><font color="Indianred">Ⅳ  c小调第一交响曲</font></p></h2><p><font color="Indianred" size="4"><em>       Symphony No.1 in C Minor Op.68:4 Adagio</em></font></p><p></p> <div class="tabs" id="www"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#www-1"><i class="fa-brands fa-bilibili"></i>bilibili</button></li><li class="tab"><button type="button" data-href="#www-2"><i class="fa-solid fa-music"></i>网易云通道</button></li><li class="tab"><button type="button" data-href="#www-3"><i class="fa-brands fa-youtube"></i>YouTube</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="www-1"><p>大名鼎鼎西蒙拉特时代的柏林爱乐乐团<br>—第四乐章空降29:48—<br>—高潮部分空降37:59—</p><iframe id="ytplayer" type="text/html" src="https://xbeibeix.com/api/bilibili/biliplayer/?url=BV14s411S7wv" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="www-2"><p>—高潮部分空降5:15和9:03—</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="86" src="//music.163.com/outchain/player?type=2&id=18278025&auto=1&height=66"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="www-3"><p>来自黑森州广播乐团（法兰克福广播乐团）的版本</p><iframe width="100%" height="500" src="https://www.youtube.com/embed/cqd4NQ-ppCY?start=2061" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>        云友曰：<br>        <em>不开心时，听莫扎特，好像一个天真的孩子和你说：世界多美好，为何要不开心？伤感时，听肖邦，仿佛一个的挚友和你说：我也很痛苦，咱们一起分担。受打击时，听贝多芬，他会告诉你，宇宙有多广阔，人类有多渺小，这点悲伤算什么。绝望时，听勃拉姆斯，你会发现自己还有能够爱的灵魂和鲜活流淌的生命。</em></p><p>        勃拉姆斯在这部作品上倾注了21年的心血，从1855年写到1876年，从一个天才少年写到中年老成，一是因为勃拉姆斯对自己一贯的严格要求，二是贝多芬巨人的脚步令之后的交响乐创作实在举步维艰。在21年的创作中，作品的不断推翻重建、洗涤积淀，作品气势宏伟却不缺青春明快，更充盈的是蓬勃生长的浪漫主义气质：曲调浓郁饱满富有变化，情感热烈丰沛富有张力。</p><p>        第四乐章是赞誉最高的一个乐章，从篇幅来看也是勃爷最重要的一个乐章，其采用省略展开部的奏鸣曲式，从开头的突然轰鸣，到弦乐绵长和弹拨的切换，曲调充满了冲突和释放，将内心的郁结的苦闷和痛快的释放表现得淋漓尽致，丝毫不加掩饰。呈示部主部主题悠扬明快，有春意盎然之感，其间有贝爷“欢乐颂”的影子，但私以为其表达更胜之；副部主题流畅婉转，弦乐的弹拨好似坚定的步伐……</p><p>        勃拉姆斯第一交响曲与贝爷的欢乐颂有着相近的主旨，都是“摆脱苦难、走向光明”，与之不同的是，贝爷用饱满热情的旋律从宏大的视角描绘了一条坚定地通往彼岸的坦途，而勃拉姆斯却强调如何一步步从矛盾中挣扎起来仍不忘记追求光明。</p><br><h2 id="p-style-line-height-4px-font-color-indianred-ⅴ-d大调小提琴协奏曲第二乐章-font"><p style="line-height: 4px;"><font color="Indianred">Ⅴ  D大调小提琴协奏曲第二乐章 ⭐ </font></p></h2><p><font color="Indianred" size="4"><em>       Violin Concerto in D Major, Op.77:II Adagio</em></font></p><p></p> <div class="tabs" id="www"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#www-1"><i class="fa-brands fa-youtube"></i>YouTube</button></li><li class="tab"><button type="button" data-href="#www-2"><i class="fa-solid fa-music"></i>网易云通道</button></li><li class="tab"><button type="button" data-href="#www-3"><i class="fa-brands fa-bilibili"></i>bilibili</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="www-1"><p>奥伊斯特拉赫版本<br>—第二乐章23:10~31:56—</p><iframe width="100%" height="500" src="https://www.youtube.com/embed/RFkSiNp4CRQ?start=1390" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="www-2"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="86" src="//music.163.com/outchain/player?type=2&id=28230925&auto=1&height=66"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="www-3"><p>浴火的奥古斯丁版本<br>—第二乐章23:26~32:40—</p><iframe id="ytplayer" type="text/html" src="https://xbeibeix.com/api/bilibili/biliplayer/?url=BV1uE411J72y" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>       1853年，在一次旅行演出的路上，勃拉姆斯初次拜访了约阿希姆。虽然约阿希姆仅仅年长勃拉姆斯两岁，但届时他已是国际知名的小提琴家，而勃拉姆斯不过是一位无名的青年作曲家。勃拉姆斯15岁便心醉于约阿希姆演奏的贝多芬《小提琴协奏曲》，如今的相见使他欣喜若狂，生来沉默寡言的勃拉姆斯忽然打开了禁锢，把自己的各种各样的苦恼和抱负都倾吐了出来，并坐在钢琴前毫无顾忌地弹起自己的作品。约阿希姆对初次见面的这位青年的才华大为惊异，当即写信向舒曼夫妇推荐，从此，勃拉姆斯的大名才开始在德国音乐家之间广为流传。时隔多年，直至1878年，为了报答知遇之恩，勃拉姆斯写下这首作品。</p><p>       第二乐章为慢板，富有古典主义色彩和浪漫主义精神。从悠扬的单簧管和小提琴交织开始，用简单而缓慢的琶音构建出舒缓美妙的曲调。这看似平淡的曲调却富于变化，时而有小提琴的高音凄切，时而有管乐的婉转曲折，也有像第一节末尾那样强有力的收尾，将心境的每一道沟壑刻画得淋漓尽致。</p><p>       许多人常说，勃拉姆斯的音乐是克制的，我并不赞同这样的说法。在他的音乐中，有风平浪静，也有感动和喜悦，亦有多情与悲恸，多种感觉的交织，不仅让他的曲式突破了一般的结构和节奏限制，更是让他的曲风游走在古典主义的典雅庄重和浪漫主义的自由华丽，行如流水，无关感性和理性，这才是真正的“浪漫”。</p><br><h2 id="p-style-line-height-4px-font-color-indianred-ⅵ-g大调第一小提琴钢琴奏鸣曲第一乐章-font"><p style="line-height: 4px;"><font color="Indianred">Ⅵ  G大调第一小提琴钢琴奏鸣曲第一乐章 ⭐</font></p></h2><p><font color="Indianred" size="4"><em>       Sanata for Voilin and Piano No.1 in G Major, Op.78: I.Vivance ma non troppo</em></font></p><p></p> <div class="tabs" id="www"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#www-1"><i class="fa-solid fa-music"></i>网易云通道</button></li><li class="tab"><button type="button" data-href="#www-2"><i class="fa-brands fa-bilibili"></i>bilibili</button></li><li class="tab"><button type="button" data-href="#www-3"><i class="fa-brands fa-youtube"></i>YouTube</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="www-1"><p>比较经典的帕尔曼&amp;阿什肯纳齐版</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="86" src="//music.163.com/outchain/player?type=2&id=1460665&auto=1&height=66"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="www-2"><iframe id="ytplayer" type="text/html" src="https://xbeibeix.com/api/bilibili/biliplayer/?url=BV1W34y1a7PJ" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="www-3"><iframe id="ytplayer" type="text/html" src="https://www.youtube.com/embed/2Ec_DnPL578?autoplay=1&origin=http://example.com" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>       1896年，当年过花甲、两鬓斑白的勃拉姆斯终于赶到波恩，克拉拉的葬礼早已结束，白色花瓣散落满地，空空荡荡的教堂里寂静得能够听到自己心中想象的那花瓣坠落的声音……又是这样一年夏天，就像几十年前勃拉姆斯离开杜尔塞多夫一样，克拉拉离他而去了，只是这一别便是永远。墓园的十字架下，他不禁老泪纵横，却还是强忍着泪水，拿起小提琴，为克拉拉献上了最后一曲。有人说，那首曲子便是G大调第一小提琴钢琴奏鸣曲。</p><p>       此曲写于1878年，正值勃拉姆斯创作的黄金年代，这首奏鸣曲也是他最爱的作品之一，刚刚完成，便在他给克拉拉的信中捎上了这首曲子。钢琴和小提琴的声音相互映衬着，相互陪伴，相互交织，就像如胶似漆的恋人。赋格中，此起彼伏的热情如潮水涌来，而后的时强时弱就像水中倒映的点点星光；展开部的开始（3:30左右），主旋律由钢琴担任，小提琴拨弦作为伴奏，清脆之声有柳暗花明之感；活泼的快板行至终末，钢琴厚重感的营造和凄厉的小提琴声对比鲜明，迸发出有力的结尾。</p><br><h2 id="p-style-line-height-4px-font-color-indianred-ⅶ-降b大调第二钢琴协奏曲第二乐章-font"><p style="line-height: 4px;"><font color="Indianred">Ⅶ  降B大调第二钢琴协奏曲第二乐章</font></p></h2><p><font color="Indianred" size="4"><em>       Piano Concerto No.2 In B Flat Op.83:3 Andante</em></font></p><p></p> <div class="tabs" id="www"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#www-1"><i class="fa-brands fa-bilibili"></i>bilibili</button></li><li class="tab"><button type="button" data-href="#www-2"><i class="fa-solid fa-music"></i>网易云通道</button></li><li class="tab"><button type="button" data-href="#www-3"><i class="fa-brands fa-youtube"></i>YouTube</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="www-1"><p>柏林爱乐切里比达奇版本<br>—第二乐章20:31~30:26—</p><iframe id="ytplayer" type="text/html" src="https://xbeibeix.com/api/bilibili/biliplayer/?url=BV1SW41137Qg" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="www-2"><p>齐默尔曼版</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="86" src="//music.163.com/outchain/player?type=2&id=403756129&auto=1&height=66"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="www-3"><p>郎朗的杀马特师妹——王羽佳版<br>—第二乐章18:04—</p><iframe width="100%" height="500" src="https://www.youtube.com/embed/BszBccYHuAk?start=1084" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>勃拉姆斯的朋友Theodore Billroth（这是一个很有意思的人物，作为钢琴家和小提琴家的同时，也是一位外科医生和教育家）称，1881年写著的第二钢琴协奏曲是勃拉姆斯从年轻走向成熟的标志, 不仅钢琴与管弦乐队部分融会贯通, 而且在常规的三乐章结构之中加上了一个谐谑风格的第二乐章成为四个乐章（在小提琴协奏曲中曾经有这样的尝试，但后来因为种种原因没有完成）。比起19世纪其他主要的协奏曲, Op.83的类型更像是交响乐。</p><br><h2 id="p-style-line-height-4px-font-color-indianred-ⅷ-b小调单簧管和弦乐五重奏-font"><p style="line-height: 4px;"><font color="Indianred">Ⅷ  b小调单簧管和弦乐五重奏</font></p></h2><p><font color="Indianred" size="4"><em>       Quintet for Clarinet and String Quintet in B minor, Op.115:I Allegro</em></font></p><p></p> <div class="tabs" id="www"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#www-1"><i class="fa-brands fa-youtube"></i>YouTube</button></li><li class="tab"><button type="button" data-href="#www-2"><i class="fa-brands fa-bilibili"></i>bilibili</button></li><li class="tab"><button type="button" data-href="#www-3"><i class="fa-solid fa-music"></i>网易云通道</button></li><li class="tab"><button type="button" data-href="#www-4"><i class="fa-solid fa-feather"></i>彩蛋</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="www-1"><p>法国Ébène弦乐四重奏组合与巴赫曼版<br>—第一乐章0:00~13:02—</p><iframe width="100%" height="500" src="https://www.youtube.com/embed/1Gw8JU53SWY?" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="www-2"><p>看似B站，其实也是油管[doge]</p><iframe id="ytplayer" type="text/html" src="https://xbeibeix.com/api/bilibili/biliplayer/?url=BV17W41137Vw" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="www-3"><p>翻来覆去地听还是选中了最开始找到的版本</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="86" src="//music.163.com/outchain/player?type=2&id=405162275&auto=1&height=66"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="www-4"><p>第一次听到这首曲子的我：</p><img src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_22/Brahms/brm.jpg" width="280"><p>第一次听到的版本（浙大校友演奏）：</p><p><a href="https://www.bilibili.com/video/BV1sa411t7d3?spm_id_from=333.999.0.0&amp;vd_source=2e7ebe7974d72f9a7ffba9a182445912">https://www.bilibili.com/video/BV1sa411t7d3?spm_id_from=333.999.0.0&amp;vd_source=2e7ebe7974d72f9a7ffba9a182445912</a></p><p>（不要试图在里面寻找我）</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>       在勃拉姆斯和理查德·慕菲尔德互相欣赏并建立友谊之前，他曾认为单簧管的艺术已经退化，然而在1891年慕菲尔德的一次私人独奏会上，他深深地被莫扎特的单簧管五重奏所吸引。就像四十多年前遇见克拉拉那样，难忍心中的迫切和激动，从此便发疯似的喜欢上这件乐器，并称它为“管弦乐队的夜莺”。</p><p>       1891年起，他围绕单簧管创作了众多管线作品，如 <em>Trio for Clarinet, piano and Cello in A minor, Op.114、Quintet for Clarinet and String Quintet in B minor, Op.115、Sonata for Clarinet and piano,  Op.120: No.1、Sonata for Clarinet and piano,  Op.120: No.2</em> 等等，而b小调单簧管和弦乐五重奏便是其中最富有代表性的一首。弦乐四重奏的基调为单簧管的进入创造了良好的氛围，而单簧管的穿梭为弦乐为主的旋律提供了强大的生命力，即使在旋律坠入深渊的爆发中，也保持了足够的张力。不同的演奏者对于这段爆发的处理不尽相同，加之勃拉姆斯乐曲本身旋律性不强，给了演奏者更大的自由发挥空间，成为了这首曲子有许多风格迥异的版本的主要原因。</p><p>       万变不离其宗的是，勃拉姆斯的爱与热烈，那种冲破枷锁的炽热，没有节奏的限制，没有旋律的约束，行到此处便做舒缓，情到深处便突然紧张，那种看似对立的冲突性，却是他内心挣扎最真实的情感流露。人们常说勃拉姆斯是克制的，而我却在他的作品中，看到了毫不掩饰的浪漫与热烈。</p><p>       当年我第一次听到这首曲子的时候，其实感触不是很大，甚至有点不明所以（见彩蛋），但当真正了解勃拉姆斯，等到真正对他的作品有所理解，才会发现这是多么震撼的心灵碰撞！三个月后，当我对这首曲子爱不释手，在和小狐狸共用耳机听歌时都要拿出来分享时，她却靠在我的肩上睡着了，也不禁让我想起第一次听到op.115时那个强忍着疑惑（甚至开始思考音乐的本质是不是美的享受）的晚上……</p><br><h2 id="p-style-line-height-4px-font-color-indianred-ⅸ-六部钢琴曲第二号间奏曲-font"><p style="line-height: 4px;"><font color="Indianred">Ⅸ  六部钢琴曲第二号间奏曲 ⭐</font></p></h2><p><font color="Indianred" size="4"><em>       Klavierstücke, Op.118:II Intermezzo: Andante teneramente</em></font></p><p></p><div class="tabs" id="www"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#www-1"><i class="fa-brands fa-youtube"></i>YouTube</button></li><li class="tab"><button type="button" data-href="#www-2"><i class="fa-solid fa-music"></i>网易云通道</button></li><li class="tab"><button type="button" data-href="#www-3"><i class="fa-brands fa-bilibili"></i>bilibili</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="www-1"><iframe width="100%" height="500" src="https://www.youtube.com/embed/WuDoYP92O7w?" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="www-2"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="86" src="//music.163.com/outchain/player?type=2&id=562804454&auto=1&height=66"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="www-3"><iframe id="ytplayer" type="text/html" src="https://xbeibeix.com/api/bilibili/biliplayer/?url=BV1Y64y1a7Ep" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>       Brahms Op.118作于1893年，晚年的勃拉姆斯作品以小品居多，几乎完全放弃了大型作品，然而正是在这些小品中，他的心境却是表露无疑的，A大调间奏曲就是其中最有代表性的作品之一。</p><p>       在作品中，我们能够看到勃拉姆斯古典的一面，古典的调性和声使得曲调朴素而礼貌，对功能性联系的强调使得整曲听来舒适流畅，曲中也不乏巴赫对位法的加入。然而表达情感上却充满着浪漫与热情，富于变化的旋律将心境描绘得彻底而细致，所有热烈的情感在一黑一白的琴键和一轻一重的敲击中绽放。温柔、落寞、希望、回忆，有太多太多的情感在这里交织……</p><br><br><p>       1897年3月13日，老人病重，4月3日，巨星陨落。爱情经历：一次逃婚、一生守望。挚友：一位小提琴家、一位单簧管家、一位作曲家。性格：孤僻、固执、深思熟虑。音乐风格：一丝质朴、三分浪漫、很多热烈。</p><hr><p>by <a href="https://signalista.github.io/">Signalista</a></p><br>]]></content>
      
      
      <categories>
          
          <category> 艺术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 古典音乐 </tag>
            
            <tag> 浪漫主义 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>狗狗和猫猫的七月碎片</title>
      <link href="/2022/07/26/lurvinjuly/"/>
      <url>/2022/07/26/lurvinjuly/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><video width="100%" height="100%" controls>  <source src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_22/lurvinjuly/%E4%B8%83%E6%9C%88.mp4" type="video/mp4"></video><hr><p>By <a href="https://signalista.github.io">Signalista</a></p><br><br>]]></content>
      
      
      <categories>
          
          <category> 手记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 所爱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown与形式主义及其他</title>
      <link href="/2022/06/27/mdorso/"/>
      <url>/2022/06/27/mdorso/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="font-color-118899-1-期末复习与自我形式主义-font"><font color="#118899">1 期末复习与自我形式主义</font></h2><p>继16日考完工磁以后，我的最后两场考试都放在21日，这意味着我就算16日啥也不干，也有4天的时间来复习数电、微机这两门看起来并没有那么难的课——所以我当然放心大胆地去摆了啊！</p><p>舒舒服服摆烂一天，就开始了我充裕的四天复习，计划大概是这样：</p><div class="note info flat"><ul><li> 第一天，一天攻克基础内容，迅速瓦解数电主力</li><li> 第二天，集中优势兵力，围剿整流滤波稳压电路和555芯片两大据点</li><li> 第三天，对微机原理的80C51军团进行逐个击破</li><li> 第四天，尽可能地打击ARM系统的有生力量</li></ul></div><p>我幻想着自己坐镇军营之央，背后是元帅的旗帜，胸前是比苏勋宗还多的勋章，俯瞰各路枭雄，睥睨天下豪杰，发表着名为《优势在我》的演讲，鼓舞着士气，准备迎接伟大的胜利……</p><p>结果呢，结果是那天我才刚刚看完半导体寄存器。</p><p>那天晚上，很好的月光。</p><p>“你怎么复习得这么慢啊。”</p><p>要不是小狐狸这么嘲笑了我一句，我还真没发现这个问题。</p><p>“是啊，我怎么看的这么慢啊。”</p><p>好吧，我这才开始惆怅地回忆我这一整天的生活。在教学楼里呆了一整天，我似乎也就看了机器数、卡诺图、逻辑门、存储器，距离今天的任务还有一半没完成呐。真是低效复习的一天，但明明我看了很多啊我感觉……emmmmm……好吧我承认，我大部分的时间只是在做一些无用功，比如说整笔记。</p><p>不瞒您说，我还真的一整天就在那边整笔记，挖掘每个角落的要点，把它干净地罗列在word里，看起来颇是不错。但我记的大部分东西都没什么用，准确的说就是根本不需要记，就比如现在来看几条我称之为“要点”的玩意。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">十进制数的0～9共十个数字分别用一个四位的二进制编码表示，称十进制数的二进制编码，简称BCD（Binary Coded Decimal）码</span><br><span class="line">补码可以实现将一个减法运算变换成加法求和,负数的补码等于反码＋1,负数的补码等于模减去数码（不考虑符号位）,负数从原数值最低位开始，在遇到1之前(包括该1)数码不变，其后数码按位求反</span><br><span class="line">它由NMOS和PMOS管并联而成C和/C为互补控制（高电平使能）</span><br></pre></td></tr></table></figure><p>怎么说呢，它们确实是要点，但因为平常已经学烂了根本就不需要记。比如还有这种：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">它由2^n个小方块组成的方块图（n是函数所含的变量数）组成。</span><br><span class="line">每个小方块代表一个最小项。</span><br><span class="line">相邻二个小方块所代表的二个最小项仅差一个变量不同，其它相同（逻辑相邻性）。</span><br><span class="line">将一个表达式用标准的“与——或”表达式（最小项之和式）表示后，根据式中的最小项，在卡诺图的对应小方块中填上该最小项的值“1”后，便成了该函数的卡诺图了。</span><br><span class="line">卡诺图化简逻辑函数的依据是利用卡诺图中相邻方块所代表的最小项相邻性，用画包围圈的方法把2n个相邻小方块合并成一个大方块进行。包围2n个小方块后得到的“与”项将消去n个变量（n为正整数）</span><br></pre></td></tr></table></figure><p>我现在看看也是好傻，为什么要把卡诺图的性质完整写下来，会画会看不就完了么。</p><p>多说无益，我也不想再献丑，就总感觉我有那个大病，我写这些干啥，又学不到东西又浪费时间，复习啥啊，别复习了，还不如去西湖边逛一圈。但如果真的要问我，为什么要写成这样，我也只能告诉你，是为了它的“完整性”，让它看起来是一篇完整的整理，嗯，无他，当时只是觉得自己有些强迫症罢了。</p><p>第二天，不出所料，我还是按照那种傻逼方法整理，也不负众望地没有整完……后面几天亦是如此，导致最后两门都只是堪堪复习完，然后，当然就是绩点报废……</p><p>回去以后我还真的很认真地思考了这个问题，为什么我明知道我整的东西没有用，甚至要整完以后回头给重点标上红，都不肯赶紧掉头呢？</p><p>我的脑中蹦出一个词——“自我形式主义”，上网查了一下，好像没有这个词，那我就正式挪用了（doge）。</p><div class="note info flat"><p><em>形式主义，指的是一种只看事物的表象而不加分析其本质的思想方法和工作作风。它违背了内容决定形式、形式为内容服务，内容与形式相统一的科学原理。形式主义的实质是主观主义、功利主义。其典型特征是脱离现实生活，强调审美活动的独立性和艺术形式的绝对化，认为是形式决定内容，而不是内容决定形式。</em></p></div><p>关于“自我形式主义”，我的理解大概与之相同，也是指形式决定内容、只关注事物表象的工作作风，只不过“形式主义”是对外的功利主义，而“自我形式主义”是向内求得心理安慰。就好比在大考来临之前宁可在自习室里水98，也不肯回寝室躺平，以认可自己“我在好好学习”的想法；或是独自观看抽象派画展，对着完全不明白的线条大加赞赏，以迎合自己“我非常懂艺术”的心思；还有喝着含糖量很高的果汁、酸奶告诉自己这是健康饮料，和可乐雪碧不一样……这些行为，也是只注重形式、无关于内容的形式主义，但其区别于一般的形式主义，以对外做文章为目的，而是更多地指向了自己。</p><p>用工科生的思维来讲，这些形式主义是没有对系统外输出的，或者说这些形式主义仅仅是你脑中的内部参数。别人不会因为你笔记整理得多“完全”而赞扬你，你也不会因为自己多“有艺术修养”而卷到别人。But…你的脑子会。</p><hr><h2 id="font-color-118899-2-markdown与自我苛求-font"><font color="#118899">2 Markdown与自我苛求</font></h2><p>下面以我和Markdown为例，讲一讲自我形式主义是如何完成自我欺骗的。</p><p>刚接触Markdown的时候，我确实对它不太感兴趣，因为这种格式与内容脱离、一切乱七八糟功能都用代码来实现的思想实在是太过于前卫。直到后来我得知了一款叫Typora的编辑器，并开始尝试用Markdown写我的第一篇报告。</p><p>不得不说，写这个东西还是需要查很多的资料的，包括从它最基础的如何换行、如何空格、如何改变字体大小、如何引入图片，到代码块的引用、公式的书写、甚至外部CSS的引用，不管怎么说比起Word它还是麻烦很多的。</p><p>“但学会了以后会好用很多……吧。”我总是这么想。</p><p>但其实，就算已经运用得很熟练，我觉得它用起来还是不太舒服，就比如我最烦的一件事情，就是最后把.md转回到.doc的时候，在换页的地方很可能会留下巨大的空白，一般这种空格是在有一张图片需要放置时候出现的，因为图片太大不能放在上一页，于是在后一页顶格，而图片后的文字不会越过图片到前面一页，于是出现这样的问题。一般来讲，当我用Word直接编辑的时候一定会注意这个问题，然后让我的报告排版相对饱满。但Markdown就不能，因为我根本看不出来在哪里会分页，每次都会把我辛苦设计的排版打乱。作为强迫症患者，我当然不会容忍这样的事情，于是每次转成.doc之后我都会返工修改。</p><p>好吧，那时候我就已经承认Markdown是个垃圾了，但我还是用了好久，甚至也不是为了那一丝“心思”，似乎就是为了用而用，告诉自己是一个会用编辑器写文档的人。一边用，我还一边搜寻更好用的编辑器，也试过Latex，感觉都不尽如人意。</p><p>有没有一款编辑器，可以不用乱七八糟的语法，我打什么就显示什么，我让他变大点一下就变大，插入公式不需要写乱七八糟指令点击就是模板，改变图片位置也不用一次次尝试改它参数只需要拖动一下图片，还要告诉我哪里会换页哪里会出纸……这tm不就是Word吗？</p><p>在一旦达到某一高度之后，人总是想要保持住这一高度，甚至自我认为我应该是在这样一个高度，即使这样一个所谓“高度”是虚构的。这就解释了为什么班里总是大于一半的同学认为自己的水平在中位以上，为什么捡到100之后又丢了100会更加失落，为什么经历了高开低走的人比那些本就不及温饱的贫民更容易寻短见，还有为什么985大学生宁愿996做房奴也不愿意回家享受人才待遇……我说这些不是为了显示Markdown比Word高级，只是想说明，人们总是会在一些虚无的事情上苛求自己，而不去想如果放下自己会获得什么。</p><p>还好，我放下了，之后当然是乖乖回归Word的生活。至此，自我形式主义在这一页算是翻过去了。但不得不说，对于电脑上一些文档的书写来讲，Markdown还是一个很不错的工具。</p><hr><h2 id="font-color-118899-3-主体性与自我奖赏-font"><font color="#118899">3 主体性与自我奖赏</font></h2><p>在第一节我们讲到，自我形式主义的最大特点就是不会对外输出，就算是我苦于Markdown将近半个学期，最后的实验报告还不过是几张A4纸，期末在自习室水一天98还不如出去好好玩。这似乎是与我们的认知相悖的，要知道，在上亿年的演化出的奖赏机制中，那些没有收获的事情总是被认为是无意义的，你的脑子会想尽一切办法让它变得无聊，甚至让你在强迫自己专注于它的同时自己就先犯困了 <s>，就比如上数学课啊</s>。 那么唯一的解释，就是自己对自己完成了奖赏。</p><p>萨特在他的剧本《禁闭》中这样描绘地狱：</p><div class="note info flat"><p>三个罪人死后被投入地狱，他们是：邮政局小职员伊内丝，巴黎贵妇艾丝黛尔，报社编辑加尔森。</p><p>当他们在地狱密室初始相遇时，彼此之间设防戒备，相互隐瞒生前劣迹：</p><ul><li>加尔森竭力要让他人相信自己是英雄，实际上他是个在二战中因临阵脱逃被处死的胆小鬼，同时又是个沉溺酒色，折磨妻子的虐待狂；</li><li>艾丝黛尔掩饰色情狂的身份和杀婴罪责，诡称自己是个为了年老的丈夫断送了青春的贞洁女子；</li><li>伊内丝则充满敌意地牢记“他人”的存在以求尽可能地包庇自己同性恋的往昔。</li></ul><p>但是，他们不仅彼此封闭自己，同时又相互“拷问”他人，每个人无时不在“他人的目光”中存在并受到审视与监督。由于他们生前恶习不改，真实面目迅速裸露。一旦暴露，便无顾忌，三人间形成了一向相互追逐，另一向相互排斥的双向型三角关系：</p><ul><li>加尔森希望得到伊内丝拒绝艾丝黛尔；</li><li>伊内丝希望得到艾丝黛尔拒绝加尔森；</li><li>艾丝黛尔希望得到加尔森拒绝伊内丝。</li></ul><p>三个痛苦的灵魂像坐上了旋转木马，永在相互追逐又永远追逐不到的“境况”中，相互的追逐成了一场不堪其苦的煎熬，谁也不能得到，谁也不能安宁，谁也不能退场，其苦状若身陷无间地狱。</p><p>最终加尔森悟得地狱之中并无刑具的道理：“何必用烤架呢，他人就是地狱！”剧作以加尔森无可奈何地说：“好吧，让我们继续下去吧”一言收场。</p></div><p>存在先于本质，是存在主义哲学的第一原理。萨特认为，人类的存在先于本质，人的本质是后天形成的，通过自由选择和自由行动塑造的。人类在意识到自己以前就已经存在了，随后才自行创造出自我的本质。一个人要先存在，要把自己投向未来，并且意识到在未来要替自己设计。所以，存在就等于替自己设计，设计之后，人才有确定的形态或本质。</p><p>不是人选择自由，而是自由选择了人。人要不断地否定自身，超越现在，始终要超过自己的本质而存在，超过自己的行为动机而存在，去无限逼近那个设计中的“主体”的自我。自我的可能性永远在前，人类“不在于已有（过去到现在），而在于未曾有（未来）”。</p><p>萨特将此称为“人类被处以自由之刑”。人的这种自由会给人带来不安、焦虑、责任，甚至是重荷。</p><p>人往往会为了推卸自由带来的责任，摆脱这种焦虑而进行自欺（bad faith，坏的信念，伪装成你本不是如此的东西）：该做选择时不做选择，把自己当成外在的、无意识的万物一样；否认自己真实的个体本性，否定自己的自由，只知道按照既定的要求去行动，消极而被动；信奉一种决定论，顺从这种观点所定的目标……</p><p>而将自己所作的事，强加于我的本质，也无疑是一种bad faith。就好比某君认为自己是一个学习很好的人，他就应该在考前进行有效复习，但为了推卸自己的责任，转退而认为“在自习室呆一整天”自己就是一个学习很好的人，采用一种廉价的可以达到的行为来伪装成自己不是如此的东西以维护自己的主体性，这便是自我形式主义的来由。</p><p>在满足自我主体性的认知后，欺骗自我奖赏机制运作，从而更加刺激自己通过投靠bad faith的方式进行维持主体性，如此便进入了恶心循环。</p><p>然而bad faith必然不是长久之计，不能自求主体性的结果必然是被他者“凝视”，比如说考试成绩，有一部分人拿了满绩成为了主体，而尝试自欺的人却被分数打了个措手不及，分数并不是所谓“凝视”，但它是“凝视”的结果，意味着你在某种意义上丧失了自己的主体性而成为了他人的客体。</p><hr><h2 id="font-color-118899-4-圣人与自我修养-font"><font color="#118899">4 圣人与自我修养</font></h2><p>难道这样的自我形式主义就完全没有任何意义吗？答案肯定是不绝对的。少看萨特，你的人生都会变得明朗。自我形式主义的存在，也有一定的积极意义。</p><p>傻傻整理笔记的人多少也看完了整本书，看不懂抽象派的人多少也受到了些艺术的熏陶；为了告诉自己是个慷慨的人在捐款的时候偷偷多塞一张红的，也算是对社会有益；看不懂诺兰的电影还是去了，也算贡献了GDP；就算你摇了摇手记让你的系统步数多一点，好歹也是做了点运动。最怕的，是瞧不起在自习室水98的人，自己真的去摆烂了，那才是真的得不偿失。</p><p>在一些需要坚持的事情上，合理利用自我形式主义也是重要的一环。比如你并不能保证每一次早八不情愿地爬起来，都能听到对考试有帮助的东西，但也总比因为今天要吃烤肉所以暂停减肥计划，然后一停不起来的好。</p><p>给自己积极的自我暗示，并朝着这个方向努力，这才能成为自己想要成为的人。</p><p>宋代理学家们，曾对“以成为圣人为目的，去效仿圣人，能否成为圣人”展开过激烈的辩论。</p><p>朱熹认为，圣人当“存天理，灭人欲”，只有心中根除了“成为圣人”的欲望，才能真正成为圣人，是形而上的；而他的老对头陆九渊则认为，“人同此心，心同此理”，认为追求仁义礼智信不是外铄的，行圣人之事本身就是在求理，是形而下的。</p><p>其实对这个问题的讨论自古便有之。孟子曾说：</p><div class="note info flat"><p><em>子服尧之服，诵尧之言，行尧之行，是尧而已矣。子服桀之服，诵桀之言，行桀之行，是桀而已矣。</em></p></div><p>他认为，和尧做一样的事情，你就成为了尧，和桀做一样事情，你就成为了桀，与你心里之所想无关，你的行为便是你的本质。</p><p>王阳明在这一点也继承了陆九渊的思想，认为：</p><div class="note info flat"><p><em>天地虽大，但有一念向善，心存良知，虽凡夫俗子，皆可为圣贤。</em></p></div><p>只要你向善，想要成为圣人，则你就能成为圣人。就像孔子说的：</p><div class="note info flat"><p><em>仁远乎哉？我欲仁，斯仁至矣。</em></p></div><p>想要成为“仁”人，那么你已经是一个“仁”人了。</p><p>然而孔子他老人家又说：</p><div class="note info flat"><p><em>取乎其上，得乎其中；取乎其中，得乎其下；取乎其下，则无所得矣。</em></p></div><p>好家伙，原理前面那句的“我”不是虚指，而是在夸自己啊。不过不管怎么说，能够自我要求本身便是“我欲仁”或是“取乎其上”的表现了，虽然路途不可能一帆风顺，但也聊胜于“取乎其下”。</p><br><p>所以，下个考试周，有谁可以教我怎么复习吗？</p><br><hr><p>By <a href="https://signalista.github.io">Signalista</a></p><br><br>]]></content>
      
      
      <categories>
          
          <category> 手记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随想 </tag>
            
            <tag> 哲学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>80C51的并行扩展</title>
      <link href="/2022/06/17/para-ext/"/>
      <url>/2022/06/17/para-ext/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1><font color="Purple">0 关于并行扩展</font></h1><p>MCS-51单片机片内集成了各种存储器和I/O功能部件，但有时根据应用系统的功能需求，片内的资源还不能满足需要，还需要外扩存储器和I/O功能部件（也称I/O接口部件），这就是通常所说的MCS-51单片机的系统扩展问题。</p><p>MCS-51单片机外部存储器结构，采用类似于哈佛结构的设计，即程序存储器的空间和数据存储器的空间是截然分开的，但不是标准的哈佛结构。还有一种外部存储器的结构，它是程序存储器和数据存储器合用一个空间的结构：普林斯顿结构，如MCS-96单片机的存储器结构就是采用普林斯顿结构。</p><p>系统扩展是以MCS-51单片机为核心进行的。扩展内容包括扩展程序存储器(ROM)、数据存储器(RAM)、I/O接口部件及I/O设备等。</p><p>MCS-51单片机数据存储器（RAM）和程序存储器（ROM）的存储空间分别为128B和2K，的最大扩展空间各为64KB，扩展后，系统形成了2个并行的64KB外部存储器空间。</p><h1><font color="Purple">1 并行扩展相关引脚</font></h1><h2 id="font-color-118899-1-1-mcs-51-font"><font color="#118899">1.1 MCS-51</font></h2><p>51单片机共有三组总线，地址总线AB、数据总线DB、控制总线CB。</p><p>地址总线（AB）：</p><ul><li>P2：高八位</li><li>P0：低八位（与数据总线复用）</li></ul><p>数据总线（DB）：</p><ul><li>P0（与地址总线复用）</li></ul><p>控制总线（CB）：</p><ul><li>ALE（Address Lock Enable 允许地址锁存信号，以1/6的振荡频率稳定输出）</li><li>/PSEN（Program Store Enable 外部程序存储器读选通信号）</li><li>/RD（读信号）</li><li>/WR（写信号）</li></ul><p>51系列单片机最大扩展ROM为64KB，RAM也为64KB。</p><h2 id="font-color-118899-1-2-三态锁存器74ls373-font"><font color="#118899">1.2 三态锁存器74LS373</font></h2><ul><li>/OE：三态控制。低电平：允许数据输出，三态门通。高电平：三态门关闭，输出高阻。</li><li>G (LE)：数据锁存控制。高电平时，输出随输入变化；低电平时，Q端将被锁存。</li><li>D7~D0：数据输入端</li><li>Q7~Q0：三态输出端<br><img src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_22/para-ext/74LS373.bmp"></li></ul><h2 id="font-color-118899-1-2-同步锁存器74ls373-font"><font color="#118899">1.2 同步锁存器74LS373</font></h2><ul><li>/E：总使能端，低电平有效</li><li>^CP：时钟信号，上升沿锁存数据</li><li>D7~D0：数据输入端</li><li>Q7~Q0：锁存输出端（高低）<br><img src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_22/para-ext/74LS377.bmp"></li></ul><h2 id="font-color-118899-1-3-三态门74ls244-font"><font color="#118899">1.3 三态门74LS244</font></h2><ul><li>/G：三态门控制端，低电平有效，高电平时输出高阻态</li><li>A7~A0：数据输入端</li><li>Y7~Y0；三台输出端，/G=0时随A变化，/G=1时高阻<br><img src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_22/para-ext/74LS244.bmp"></li></ul><h2 id="font-color-118899-1-4-译码器74ls138-font"><font color="#118899">1.4 译码器74LS138</font></h2><ul><li>CBA：选择输入。作为与输出对应的二进制编码输入；</li><li>G1, /G2A, /G2B：使能输入，仅有当G1 = 1，/G2A = 0，/G2B = 0时译码输出，否则全1；</li><li>Y7~Y0：译码器输出，低电平有效。<br><img src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_22/para-ext/74LS138.bmp"></li></ul><h2 id="font-color-118899-1-5-eprom-27c64等-font"><font color="#118899">1.5 EPROM 27C64等</font></h2><ul><li>A12~A0：地址信号输入线</li><li>/CE（Chip Enable）：片选信号，低电平有效</li><li>/OE（Output Enable）：输出允许信号，低电平有效</li><li>O7~O0：数据线8bit</li><li>PGM：编程脉冲输入端，对芯片编程时加入编程脉冲信号；读取数据时PMG的值为1</li><li>命名规则：前面的27C代表EPROM，28C代表EEPROM，29C代表Flash Memory；而后的64表示64kbit，256表示256kbit，010表示1Mbit，320表示32Mbit<br><img src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_22/para-ext/2764.bmp"></li></ul><h2 id="font-color-118899-1-6-ram-6264等-font"><font color="#118899">1.6 RAM 6264等</font></h2><ul><li>A13~A0：地址信号输入线，64kbit仅用到A8~A0共9条线</li><li>/CS（Chip Select）：片选信号，低电平有效</li><li>/OE（Output Enable）：输出允许信号，低电平有效</li><li>/WE（Write Enable）：写允许信号，低电平有效</li><li>D7~D0：数据线8bit</li><li>命名规则：6264表示64kbit，62128表示128kbit，62256表示256kbit<br><img src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_22/para-ext/6264.bmp"></li></ul><h1><font color="Purple">2 MSC-51的ROM扩展</font></h1><h2 id="font-color-118899-2-1-mcs-51的简单rom连接-font"><font color="#118899">2.1 MCS-51的简单ROM连接</font></h2><img src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_22/para-ext/OneRom.bmp"><ul><li>与单个ROM连接不需要译码器</li><li>在373选通时，P0口控制下8位地址线，P2.0到P2.4控制上5位</li><li>在373锁存时，P0口用于传输ROM信号</li><li>/PSEN低电平时从P0读入ROM数据，高电平时O7~O0高阻态</li><li>由于P2.5控制/CE，P2.5=0均为无效地址</li><li>由于P2.7，P2.6不对地址造成影响，出现重叠</li></ul><h2 id="font-color-118899-2-2-mcs-51的全扩rom连接-font"><font color="#118899">2.2 MCS-51的全扩ROM连接</font></h2><img src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_22/para-ext/AllRom.bmp"><ul><li>P2口高三位经38译码器变为8位信号，控制8个ROM的片选/CE</li><li>P2低5位和373锁存构成13位地址</li><li>ALE下降沿时373锁存来自P0的低位地址数据</li><li>/PSEN低电平时从P0读入ROM数据，高电平时O7~O0高阻态</li><li>当PC行至外部程序存储器时，单片机读取外部内容</li><li>对应外扩地址如下图所示</li></ul><img src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_22/para-ext/AllRomAddr.bmp"><h2 id="font-color-118899-2-3-片外存储器取指操作时序-font"><font color="#118899">2.3 片外存储器取指操作时序</font></h2><div class="timeline pink"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><p>片外取指时序</p></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><p><font color="#ee8f11">P2、P0输出指令地址</font></p></div></div><div class="timeline-item-content"><img style="max-width:70%;overflow:hidden;" src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_22/para-ext/ROM1.bmp"></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><p><font color="#ee8f11">373锁存P0口输出地址</font></p></div></div><div class="timeline-item-content"><img style="max-width:70%;overflow:hidden;" src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_22/para-ext/ROM2.bmp"></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><p><font color="#ee8f11">/PSEN选通读出地址内容</font></p></div></div><div class="timeline-item-content"><img style="max-width:70%;overflow:hidden;" src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_22/para-ext/ROM3.bmp"></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><p><font color="#ee8f11">指令通过P0口返回单片机</font></p></div></div><div class="timeline-item-content"><img style="max-width:70%;overflow:hidden;" src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_22/para-ext/ROM4.bmp"></div></div></div><h2 id="font-color-118899-2-4-片外取指操作的软件实现-font"><font color="#118899">2.4 片外取指操作的软件实现</font></h2><ul><li>当PC行至外扩地址时，自动通过P2、P0读取外部指令，无需软件编写</li><li>MCS-51外部ROM最大容量为64KB，地址空间0000H~FFFFH</li><li><strong>数据是单向的，MCS-51只能读取ROM数据，不能修改</strong></li></ul><h1><font color="Purple">3 MSC-51的RAM扩展</font></h1><h2 id="font-color-118899-3-1-mcs-51的ram连接-font"><font color="#118899">3.1 MCS-51的RAM连接</font></h2><img src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_22/para-ext/AllRam.bmp"><ul><li>RAM扩展与ROM扩展类似，都要用到锁存器、译码器、存储器</li><li>与ROM使用/PSEN不同，RAM使用/RD和/WR分别控制读和写</li><li>P0口仍然处于复用模式，输出地址低位并输入外部信号</li></ul><h2 id="font-color-118899-3-2-片外存储器数据读写时序-font"><font color="#118899">3.2 片外存储器数据读写时序</font></h2><div class="timeline pink"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><p>片外读写时序</p></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><p><font color="#ee8f11">MOVX指令用于访问片外</font></p></div></div><div class="timeline-item-content"><img style="max-width:70%;overflow:hidden;" src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_22/para-ext/RAM1.bmp"></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><p><font color="#ee8f11">P2、P0输出数据地址DPTR</font></p></div></div><div class="timeline-item-content"><img style="max-width:70%;overflow:hidden;" src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_22/para-ext/RAM2.bmp"></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><p><font color="#ee8f11">/RD选通进行“读”操作</font></p></div></div><div class="timeline-item-content"><img style="max-width:70%;overflow:hidden;" src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_22/para-ext/RAM3.bmp"></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><p><font color="#ee8f11">数据通过P0口返回单片机</font></p></div></div><div class="timeline-item-content"><img style="max-width:70%;overflow:hidden;" src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_22/para-ext/RAM4.bmp"></div></div></div><h2 id="font-color-118899-3-3-片外读写的软件实现-font"><font color="#118899">3.3 片外读写的软件实现</font></h2><ul><li><mark class="hl-label orange">MOVX&emsp;A,@DPTR</mark>   用于片外读取数据</li><li><mark class="hl-label orange">MOVX&emsp;@DPTR,A</mark>   用于片外写存数据</li><li>片外RAM扩展的极限值同样为64KB</li></ul><h1><font color="Purple">4 MSC-51的I/O扩展</font></h1><h2 id="font-color-118899-4-1-i-o扩展的目的-font"><font color="#118899">4.1 I/O扩展的目的</font></h2><ul><li>增加IO口个数</li><li>电平匹配</li><li>增加驱动能力</li></ul><h2 id="font-color-118899-4-2-mcs-51的i-o连接-font"><font color="#118899">4.2 MCS-51的I/O连接</font></h2><ul><li>MCS-51的I/O扩展与RAM扩展基本类似</li><li>可以通过多种芯片实现I/O扩展</li></ul><img src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_22/para-ext/IOIO.bmp"><h2 id="font-color-118899-4-3-i-o扩展的软件实现-font"><font color="#118899">4.3 I/O扩展的软件实现</font></h2><p>I/O扩展的软件实现与RAM基本相同，即使用DPTR对外扩进行读写。</p><img src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_22/para-ext/IOIOprg.bmp"><br>__________________<p>By <a href="https://signalista.github.io">Signalista</a></p><br><br>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微机 </tag>
            
            <tag> 汇编 </tag>
            
            <tag> 并行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些关于555芯片……</title>
      <link href="/2022/05/24/chip555/"/>
      <url>/2022/05/24/chip555/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="font-color-purple-555芯片概述-font"><font color="Purple">555芯片概述</font></h2><p>说到振荡器，不得不提555定时器芯片。它可以用于定时、触发、脉冲产生和振荡电路，所有和时钟相关的领域都可以考虑采用。</p><p>由于其易用性、低廉的价格和良好的可靠性，这颗芯片在业内很流行，成为很多学生、创客在电子DIY制作中热爱的经典IC。</p><p>555定时器于1971年由西格尼蒂克公司推出，由于其易用性、低廉的价格和良好的可靠性，被广泛应用于电子电路的设计中。许多厂家都生产555芯片，包括采用双极型晶体管的传统型号和采用CMOS设计的版本。555被认为是年产量最高的芯片之一，仅2003年，就有约10亿枚的产量。</p><p>其制作工艺为双极型(TTL)。</p><h2 id="font-color-purple-555的基础功能-font"><font color="Purple">555的基础功能</font></h2><h3 id="font-color-118899-引脚说明-font"><font color="#118899">引脚说明</font></h3><p>标准的555芯片是DIP-8封装，其引脚如下所示：</p><img src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_22sec/555/pin.jpg?versionId=CAEQQxiBgICIi83ThxgiIGRkOGJjN2IzOTAwZjQ5MmE5YzllNjRkMTk5NDAyN2Q2"><p>引脚基础功能：</p><table><thead><tr><th style="text-align:center">引脚</th><th style="text-align:center">名称</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">GND（地）</td><td style="text-align:center">接地，作为标准地（0V）</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">TRIG（触发）</td><td style="text-align:center">当引脚电压降至1/3VCC（或1/2CTRL）时输出端给出高电平</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">OUT（输出）</td><td style="text-align:center">输出高电平（+VCC）或低电平</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">RST（复位）</td><td style="text-align:center">当引脚接高电平时定时器工作，当此引脚接地时芯片复位，输出低电平</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">CTRL（控制）</td><td style="text-align:center">控制芯片的阈值电压（悬空时默认两阈值电压为1/3VCC与2/3VCC）</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">THR（阈值）</td><td style="text-align:center">当引脚电压升至2/3VCC（或由控制端决定的阈值电压）时输出端给出低电平</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">DIS（放电）</td><td style="text-align:center">内接OC门，用于给电容放电</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">VCC（供电）</td><td style="text-align:center">提供高电平并给芯片供电</td></tr></tbody></table><h3 id="font-color-118899-功能解析-font"><font color="#118899">功能解析</font></h3><p>555芯片的内部电路如图所示：</p><img src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_22sec/555/circuit.bmp?versionId=CAEQQxiBgMDFz.bThxgiIGQ0YTVmNDg2NjE2MDQ1MzZhMmI0OTgxNTgxMjE3NTlm"><p>由电路图可见，VCC到GND间有三个阻值相等的电阻。若5管脚悬空，则由定比分压关系，比较器R的负端输入<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>2</mn><mn>3</mn></mfrac><msub><mi>V</mi><mrow><mi>C</mi><mi>C</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\frac{2}{3}V_{CC}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，比较器S的正端输入<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mn>3</mn></mfrac><msub><mi>V</mi><mrow><mi>C</mi><mi>C</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\frac{1}{3}V_{CC}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>；若5脚接入电平，则对电压进行钳位，比较器R的负端输入<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>V</mi><mn>5</mn></msub></mrow><annotation encoding="application/x-tex">V_{5}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，比较器S的正端输入<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mn>2</mn></mfrac><msub><mi>V</mi><mn>5</mn></msub></mrow><annotation encoding="application/x-tex">\frac{1}{2}V_{5}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。</p><p>当THR电平大于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>2</mn><mn>3</mn></mfrac><msub><mi>V</mi><mrow><mi>C</mi><mi>C</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\frac{2}{3}V_{CC}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>（或<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>V</mi><mn>5</mn></msub></mrow><annotation encoding="application/x-tex">V_{5}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>）时，比较器R输出高电平，向RS锁存器发出RESET信号；当TRIG电平小于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mn>3</mn></mfrac><msub><mi>V</mi><mrow><mi>C</mi><mi>C</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\frac{1}{3}V_{CC}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>（或<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mn>2</mn></mfrac><msub><mi>V</mi><mn>5</mn></msub></mrow><annotation encoding="application/x-tex">\frac{1}{2}V_{5}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>）时，比较器S输出高电平，向RS锁存器发出SET信号。当RST脚输入高电平时，RS锁存器正常工作，RST接低电平时，RS永远输出0。</p><p>当R=0,S=1时RS锁存器输出0，经过非门使三极管导通，DIS端接地允许放电，非门端再次经过非门得到3脚输出0；同理R=1,S=0时3脚输出1，此时三极管截止，DIS为高阻态，3脚输出1。</p><h3 id="font-color-118899-功能表-font"><font color="#118899">功能表</font></h3><p>为了方便记忆，将555的功能列表如下：</p><table align="center"><tr align="center">    <th colspan="3">输入</th>    <th colspan="2">输出</th>    <th rowspan="2">功能</th>  </tr><tr align="center">    <th>RST(4)</th>    <th>THR(6)</th>    <th>TRIG(2)</th>        <th>OUT(3)</th>    <th>DIS(7)</th></tr><tr align="center">    <td>0</td>    <td>X</td>    <td>X</td>    <td>0</td>    <td>导通</td>    <td>无条件异步清零</td></tr><tr align="center">    <td>1</td>    <td><2 3vcc <td><1 3vcc <td>1</1></2></td>    <td>截止</td>    <td>RS锁存器SET</td></tr><tr align="center">    <td>1</td>    <td>>2/3Vcc</td>    <td>>1/3Vcc</td>    <td>0</td>    <td>导通</td>    <td>RS锁存器RESET</td></tr><tr align="center">    <td>1</td>    <td><2 3vcc <td>>1/3Vcc</2></td>    <td>保持</td>    <td>保持</td>    <td>RS锁存器保持</td></tr><tr align="center">    <td>1</td>    <td>>2/3Vcc</td>    <td><1 3vcc <td>1</1></td>    <td>截止</td>    <td>出现竞争冒险现象</td></tr></table>（小于小于1，大于大于0，中间不变，两边冒险）<h2 id="font-color-purple-555的应用-font"><font color="Purple">555的应用</font></h2><h3 id="font-color-118899-施密特触发器-font"><font color="#118899">施密特触发器</font></h3><p>施密特触发器有两个稳定状态，但与一般触发器不同的是，施密特触发器采用电位触发方式，其状态由输入信号电位维持；对于负向递减和正向递增两种不同变化方向的输入信号，施密特触发器有不同的阈值电压。</p><p>如图，将555定时器的2个输入端接到一起，作为1个新的输入端，即可得到施密特触发器。有时为了提高电路的稳定性，会在CONT接滤波电容。先不接外部的参考电压，则VH=2/3Vcc，VL=1/3Vcc。设输入信号为Vi。首先分析Vi从0开始逐渐升高的过程：<br>1.Vi&lt;VL&lt;VH，Vc1=0 ，Vc2=1 ，查表可知，OUT=1；<br>2.VL&lt;Vi&lt;VH，Vc1=0 ，Vc2=0 ，OUT不变，还是1；<br>3.VL&lt;VH&lt;Vi，Vc1=1 ，Vc2=1 ，OUT=0；<br>此后Vi继续增大，输出也不会变化，所以分析Vi从大于VH开始下降的过程：<br>4.VL&lt;Vi&lt;VH，Vc1=0 ，Vc2=0 ，OUT不变，但这次是0；<br>5.Vi&lt;VL&lt;VH，Vc1=0 ，Vc2=1 ，OUT=1。</p><img src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_22/555/Schmidt.bmp"><p>我们可以看到，施密特触发器的电压输出特性类似于滞回比较器。</p><p>也正是由于这种特性，施密特触发器作为波形整形电路（即将模拟信号波形整形为数字电路能够处理的方波波形）时，可用于抗干扰输出，其应用包括在开回路配置中用于抗扰，以及在闭回路正回授/负回授配置中用于实现多谐振荡器。</p><h3 id="font-color-118899-单稳态触发器-font"><font color="#118899">单稳态触发器</font></h3><p>单稳态触发器只有一个稳定状态，一个暂稳态。在外加脉冲的作用下，单稳态触发器可以从一个稳定状态翻转到一个暂稳态。由于电路中RC延时环节的作用，该暂态维持一段时间又回到原来的稳态，暂稳态维持的时间取决于RC的参数值。</p><p>如图，电路的稳态为低电平，在外界条件的影响下，输出会暂时变为高电平，但最终还是变成低电平。用单稳态的特性可以设计一个延时关闭的灯，假设灯按下去以后，不会立刻关闭，而是延时一段时间再关闭，延长的时间由RC的值决定。</p><img src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_22/555/danwen.bmp"><p>在没有触发信号或保持高电平的时候，555输出低电平的状态将稳定不变。</p><p>如果触发脉冲的下降沿到达IN2，那么IN2&lt;VL，同时IN1&lt;VH，于是是555输出高电平，三极管截止，进入暂态，此时三极管截止，则Vcc通过电阻向电容充电，当电容的电压IN1&gt;VH的时候，555输出低电平，三极管导通，回到稳态。</p><p>在这个电路中，我们利用单稳态触发器实现按一下按钮使LED灯点亮（或熄灭）一段时间的功能。</p><p>为避免禁用情况出现，须保证引脚2必须是一个窄脉冲，我们常用添加电容的方式来将其变为窄脉冲。</p><img src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_22/555/unduable.bmp"><p>还有一种形式的单稳态触发器是可重触发的，其通过上升沿触发充电，在tw时间之前若接收到下降沿信号则提前开始电容放电。</p><img src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_22/555/duable.jpg"><h3 id="font-color-118899-多谐振荡电路-font"><font color="#118899">多谐振荡电路</font></h3><p>多谐振荡器是一种自激振荡器。在接通电源以后，不需要外加触发信号，便能自动产生矩形脉冲。由于矩形波中含有丰富的高次谐波分量，所以习惯上由将矩形波的振荡器称为多谐振荡器。</p><p>首先，把IN1与IN2连接到一起，先做出施密特触发器。</p><p>然后，仍然以电容的电压作为输入信号，并想办法把电容的电压会维持在施密特触发器的2个阈值之间。把555的输出连接到电容上，则输出高电平的时候为电容充电，输出低电平的时候让电容放电。</p><p>在实际应用中，为了减轻555定时器的负担，用Vcc为电容充电，通过放电三极管来使电容放电。 当三极管通过电阻连接Vcc时，三极管的集电极（555定时器的第7脚）的电平与555的输出其实一样。</p><img src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_22/555/wuwen.bmp"><p>接下来分析电容电压与555定时器输出端关系。设电容电压为Vi。首先分析Vi从0开始逐渐升高的过程：<br>1.Vi&lt;VL&lt;VH，Vc1=0 ，Vc2=1 ，OUT=1，三极管截止，Vcc通过R1与R2为电容充电，Vi逐渐升高。<br>2.VL&lt;Vi&lt;VH，Vc1=0 ，Vc2=0 ，OUT不变，还是1，电容继续充电，Vi继续升高。<br>3.VL&lt;VH&lt;Vi，Vc1=1 ，Vc2=1 ，OUT=0，三极管导通，电容通过R2与导通了的三极管放电，Vi逐渐降低。<br>4.VL&lt;Vi&lt;VH，Vc1=0 ，Vc2=0 ，OUT不变，但这次是0，电容继续放电，Vi继续降低。<br>5.Vi&lt;VL&lt;VH，Vc1=0 ，Vc2=1 ，OUT=1，回到状态1，循环往复。</p><p>通过以上分析可以看出，电容上的电压将在VH与VL之间反复振荡，555定时器的输出在电容充电期间为高电平，在电容放电期间为低电平。</p><p>当电容充电时，电阻值为R1+R2。电容放电时，电阻值为R2，充放电时间与电阻的阻值成正比，所以，此电路的占空比始终大于50%。如果希望得到小于或者等于50%的占空比，可以利用二极管的单向导电性，使得充电与放电经过不同的路径。如下图改进电路：</p><img src="https://signalista.oss-cn-hangzhou.aliyuncs.com/post_22/555/wuwen2.bmp"><p>充电时间T1正比于W1×C1（忽略二极管的电阻，应用一阶RC电路三要素法可以算出T1= W1×C1×ln 2），放电时间T2正比于W2×C1（T2= W2×C1×ln 2），输出脉冲的占空比为：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi><mo>=</mo><mfrac><mrow><mi>W</mi><mn>1</mn></mrow><mrow><mi>W</mi><mn>1</mn><mo>+</mo><mi>W</mi><mn>2</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">q=\frac{W1}{W1+W2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.275662em;vertical-align:-0.403331em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">W</span><span class="mord mtight">1</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">W</span><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">W</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p>在如图所示的电路中，我们可以通过555多谐振荡电路让两盏LED灯按照一定的周期交替点亮。在交替频率足够快的时候，由于人眼暂留效果，我们可以将其当作PWM波控制LED灯的亮暗。</p><br>__________________<p>By <a href="https://signalista.github.io">Signalista</a></p><br>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 芯片 </tag>
            
            <tag> 数电 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>科学上网指南</title>
      <link href="/2022/05/16/proxy/"/>
      <url>/2022/05/16/proxy/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>谢邀，人在墙内，刚下飞机，感谢题主ltgg的邀请。</p><p>本来想讲一讲墙和翻墙的原理，后来感觉自己也说不明白，然后也没人会在意这破事只想赶紧出去看看，于是就把这冗杂的部分删掉了。下面我们直接进入正题：</p><h1><font color="18b190">1 获取机场</font></h1><p>一个好的机场是好的翻墙体验的前提，我个人比较习惯的是Glados，速度一般般吧，主要是便宜好用。</p><p>点击进入网址：<a href="https://glados.rocks/">https://glados.rocks/</a><br>点击Register进行注册。（推荐使用qq邮箱和gmail）</p><img src="/2022/05/16/proxy/gla1.png"><p>没有序列号就点击skip跳过。</p><img src="/2022/05/16/proxy/gla2.bmp"><p>现在就注册完成啦。</p><img src="/2022/05/16/proxy/gla3.bmp"><p>可以看到，Free Plan套餐只提供3天的免费且只有10GB流量，这显然不是我们白嫖党喜欢的打开方式对不对？下面就开始教你如何更好地白嫖：点击右上角的【我的账户】，在【更新邮箱】绑定你的学校邮箱，绑定后，将页面拉到Bottom，点击Education Plan，确认条款后点击Apply，然后你就会发现自己的套餐变成365天/50GB每月啦。</p><img src="/2022/05/16/proxy/gla5.bmp"><img src="/2022/05/16/proxy/gla4.bmp"><p>这种方法只能让你白嫖一年，显然还不够过瘾对不对？Glados还有签到系统，只要签到就会加一天适用期，只要天天签到理论上可以永久白嫖。（首页-&gt;会员签到-&gt;签到）</p><img src="/2022/05/16/proxy/gla7.bmp"><p>您也可以尝试<a href="https://github.com/Alvin9999/">Alvin9999</a>, <a href="https://www.nowlink.top/login">nowlink</a>, <a href="https://www.flowvpx.com/sign-up/?locale=zh-cn&amp;special=FREETRIAL&amp;r=35-890485.tizi.table">Flowvpn</a>, <a href="https://surfshark.com/zh/">Surfshark</a>等机场。<br>另外一些机场推荐戳这里 -&gt; <a href="https://maomeng.cf/2021/06/11/ji-chang-tui-jian-chang-qi-geng-xin/#!">maomeng</a></p><h1><font color="18b190">2 代理软件</font></h1><p>由于本人一般用电脑冲浪，请允许我只介绍Windows端，也欢迎补充。</p><p>在【首页】-&gt;【我的服务】-&gt;【Clash客户端】中选择Windows。</p><img src="/2022/05/16/proxy/cla1.bmp"><p>按照上面的三步指示进行配置。在配置完成后，glados.yaml标签会显示为绿色。</p><img src="/2022/05/16/proxy/cla2.bmp"><p>如果点击glados上的按钮无法完成自动配置，请点击【Copy to clipboard】按钮粘贴到Clash上方的URL进行手动配置。当航班出现问题时，你可以试着点点右边的刷新按钮。</p><p>在【General】选项卡中开启【System Proxy】以开始你的旅程，你会发现左下角快捷标签栏的小蓝猫变成了小黄猫。</p><img src="/2022/05/16/proxy/cla3.bmp"><p>然后是浏览器配置。<a href="https://github.com/FelisCatus/SwitchyOmega/releases">点击此处</a>下载SwitchyOmega_Chromium.crx，并将后缀名.crx改为.zip，然后直接拖进Chrome/Firefox的扩展程序界面。</p><img src="/2022/05/16/proxy/so1.png"><p>点击设置选项并新建情景模式，如图：</p><img src="/2022/05/16/proxy/so2.bmp"><p>以后起飞的时候，只需要将【直接连接】更改为【系统代理】或【Glados】选项就可以了，当然，也需要挂着你的小黄猫。</p><img src="/2022/05/16/proxy/so3.bmp"><p>下机以后记得把模式切换为【直接连接】以免影响您的校网登录。</p><img src="/2022/05/16/proxy/gla8.bmp"><p>随时注意您的套餐余量，祝您旅途愉快！</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
            <tag> 防火墙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【移植】2021年度音乐总结</title>
      <link href="/2022/05/06/concert2021/"/>
      <url>/2022/05/06/concert2021/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><font color="#0c74d6" size="3" face="黑体"><strong>去年年终的时候在puq发过一篇年度最喜欢的作品总结，反响还挺不错的，本想好好整理一下移植到博客里，却发觉里面音乐作品占了大头，电影和书籍倒是寥寥无几，索性做了一些删改，直接当作音乐会罢。</strong></font><br>P.S.由于部分链接直达油管，建议使用<strong>科学上网</strong>；以及每首歌/曲配备了不同的通道可供选择，以适应不同的个人偏好，而第一选择框是我个人比较推荐的版本；还有一件事，请在每首歌播放完毕后关闭通道，以免其继续播放影响后续体验。<br>如果您未曾有过科学上网的经验，可以<a href="https://siggal.run/2022/05/16/proxy/">点击这里</a>进行学习。<br>PP.SS.还没有搞过手机页面，也许会出现各种bug，故建议电脑食用。</p><h2 id="p-align-center-font-size-36-color-8f71bb-上半场-font-p"><p align="center"><font size="36" color="8f71bb"><strong>上半场</strong></font></p></h2><h2 id="font-color-d915a3-1-waterfalls-font"><font color="d915a3">1    Waterfalls</font></h2><p><font color="d915a3">                        —— Cécile Corbel</font></p><div class="tabs" id="cc1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#cc1-1"><i class="fa-brands fa-youtube"></i>油管通道</button></li><li class="tab"><button type="button" data-href="#cc1-2"><i class="fa-solid fa-music"></i>网易云通道</button></li><li class="tab"><button type="button" data-href="#cc1-3"><i class="fa-solid fa-cloud-arrow-down"></i>盗版通道</button></li><li class="tab"><button type="button" data-href="#cc1-4"><i class="fa-solid fa-feather"></i>Lyrics</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="cc1-1"><iframe id="ytplayer" type="text/html" src="https://www.youtube.com/embed/Zkql_HnfS20?autoplay=1&origin=http://example.com" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="cc1-2"><div class="flink"><div class="flink-desc">（由于版权保护，无法生成外链，没有会员的朋友请跳转下一页）</div> <div class="flink-list">          <div class="flink-list-item">            <a href="https://music.163.com/#/song?id=434664477" title="Waterfalls" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://img.88icon.com/upload/jpg/20210524/4d701ad487e28c7ae2c97184064c65e9_67077_800_800.jpg!88con" onerror="this.onerror=null;this.src="/img/friend_404.gif"" alt="Waterfalls">              </div>              <div class="flink-item-name">Waterfalls</div>               <div class="flink-item-desc" title="And I will try to fix you.">And I will try to fix you.</div>            </a>          </div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="cc1-3"><p>（此文件系wyy网页版运行后台窃取，还是望大家多多支持正版)</p><audio id="audio" controls preload="none">      <source id="mp3" src="./Waterfalls.mp3"></audio><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="cc1-4"><p>作词 : Cécile Corbel/Simon Caby<br>作曲 : Cécile Corbel/Simon Caby<br>Yellow gold, silver, emerald<br>黄金 白银 绿宝石<br>Don’t grow in lovers’ yard<br>不会生长在相爱的人们的心田<br>I’d rather have moonflowers purple foxgloves<br>其实我更想要一束月光花和淡紫的毛地黄（一种草本植物）<br>One kiss from you tonight<br>还有 今夜你轻柔的一吻<br>Oh please don’t go<br>哦 亲爱的人儿啊 请别离开<br>Chasing waterfalls, chasing waterfalls<br>我将带你去追逐瀑布<br>Or rainbows<br>要不要去寻找绚烂的彩虹<br>Tell me how beautiful<br>告诉我那景致是多么美好<br>How beautiful is the morning light<br>熹微的晨光是多么令人陶醉呀<br>Leather boots, diamonds, fur coats<br>皮靴 钻石和皮衣<br>Don’t fit my lonely heart<br>不会触动我孤寂的心<br>Wanna pick water lily on the river bank<br>我真想在河畔摘下睡莲<br>Put some flowers in my hair<br>把那些清丽的花儿戴在我的发辫上吧<br>Oh please don’t go<br>哦 亲爱的人儿啊 请别离开<br>Chasing waterfalls, chasing waterfalls<br>我将带你去追逐瀑布<br>Or rainbows<br>或去寻找绚烂的彩虹<br>Tell me how beautiful<br>你可以想象那景致是多么美好<br>How beautiful is the morning light<br>熹微的晨光是多么令人陶醉呀<br>Oh please don’t go<br>哦 亲爱的人儿啊 请留在我身边<br>Chasing waterfalls, chasing waterfalls<br>我将带你去追逐瀑布<br>Or rainbows<br>或去寻找绚烂的彩虹<br>Tell me how beautiful<br>你可以想象那景致是多么美好<br>How beautiful is the morning light<br>熹微的晨光是多么令人陶醉呀</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>CC是来自法国布列塔尼的一个歌手/作曲家/竖琴演奏家，嗓音像天使一样的大姐姐，作品主要为凯尔特风格，也尝试过各种其他风格的作品，以及会N种乐器和多国语言，从音乐到歌词再到甜美的嗓音，就像打翻了银河。</p><p>《Neige》是我最早接触的她的作品，当时觉得有一点点老柴的影子（也许是和弦和大提琴低音炮的关系(?)），然后就被她的音乐才能和天使嗓音俘获了，无论是作为动画配乐的《Arrietty’s Song》，还是神级转调《Les Capitaines》，或是声音当乐器的《Le Long De I’eau》，抑或是合唱作品《Vent Frais》，还有异类的五拍子作品《Mary》，这该死的女人怎么这么该死的有魅力（bushi）。</p><h2 id="font-color-d915a3-2-neige-font"><font color="d915a3">2    Neige</font></h2><p><font color="d915a3">                        —— Cécile Corbel</font></p><p>于是，入坑曲奉上，大提琴前几个音出来我真的以为这是胡桃夹子好吗。</p><div class="tabs" id="cc2"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#cc2-1"><i class="fa-solid fa-music"></i>网易云通道</button></li><li class="tab"><button type="button" data-href="#cc2-2"><i class="fa-solid fa-feather"></i>Lyrics</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="cc2-1"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="86" src="//music.163.com/outchain/player?type=2&id=36019606&auto=1&height=66"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="cc2-2"><p>作词 : Cécile Corbel<br>作曲 : Cécile Corbel/Simon Caby<br>Encore un rêve Qui succombe à la nuit<br>另一个不屈于夜的梦<br>Sans trêve<br>从未断绝<br>L’ombre qui s’agrandit<br>阴影渐长<br>Elle pourrait bientôt manquer d’air<br>她可能很快就要窒息<br>Dans cette traversée solitaire<br>在这孤独的十字街头<br>Mélancolie<br>忧郁症<br>Dans ces villes où tout s’achète<br>而在这些贩售一切的小镇<br>Ici on ne vend pas ces rêves-là<br>不在货架上的只有梦想<br>Un bel équipage ou même<br>或许还有一个勇敢的船员 甚至<br>Un joli attelage<br>一辆豪华马车<br>Et elle veut voir les grandes plaines<br>她想看看着广袤的草原<br>Vers le ciel infini<br>想要无尽的苍穹<br>Les chevaux sauvages, elle<br>狂野的烈马<br>Rêve d’au-delà<br>她幻想着从今往后的一切<br>De la neige<br>雪<br>Des frissons sur le monde<br>凌乱在大千世界<br>Qui viennent en cortège<br>随伍而行<br>Tombe le manteau blanc qui la protège<br>像降下白色的冬衣护她周全<br>C’est comme un sortilège<br>就像一个咒语<br>Comme un baiser froid sur la peau<br>就像在肌肤上一个清冷的吻<br>Un murmure<br>一阵嘀咕<br>Le brouillard et l’asphalte<br>沥青的雾<br>Sur les murs<br>在墙上弥漫<br>Des mots qui lui font mal<br>这伤害她的话<br>Elle pourrait bientôt manquer d’air<br>她可能很快就要窒息<br>Dans cette traversée solitaire<br>在这孤独的十字街头<br>Ici tout est gris et terne<br>这里的一切都单调阴沉<br>La poussière et l’ennui<br>枯燥而无趣<br>Et éternellement, elle<br>而她永远<br>Rêve d’au-delà<br>幻想着未来<br>De la Neige<br>雪<br>Des frissons sur le monde<br>凌乱在大千世界<br>Qui viennent en cortège<br>随伍而行<br>Tombe le manteau blanc qui la protège<br>像降下白色的冬衣护她周全<br>C’est comme un sortilège<br>就像一个咒语<br>Comme un baiser froid sur la peau<br>就像在肌肤上一个清冷的吻<br>C’est comme un sortilège<br>就像一个咒语<br>Comme un baiser froid sur la peau<br>就像在肌肤上一个清冷的吻<br>De la Neige<br>雪<br>Des frissons sur le monde<br>凌乱在大千世界<br>Qui viennent en cortège<br>随伍而行<br>Tombe le manteau blanc qui la protège<br>瀑布像白色的冬衣护她周全<br>C’est comme un sortilège<br>就像一个咒语<br>Comme un baiser froid sur la peau<br>就像在肌肤上一个清冷的吻</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="font-color-d915a3-3-la-ballade-de-rose-font"><font color="d915a3">3    La Ballade de Rose</font></h2><p><font color="d915a3">                        —— Cécile Corbel</font></p><p>再推一首比较低迷婉转的曲子。</p><div class="tabs" id="cc3"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#cc3-1"><i class="fa-solid fa-music"></i>网易云通道</button></li><li class="tab"><button type="button" data-href="#cc3-2"><i class="fa-solid fa-feather"></i>Lyrics</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="cc3-1"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="86" src="//music.163.com/outchain/player?type=2&id=26574196&auto=1&height=66"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="cc3-2"><p>作词 : Cécile Corbel<br>作曲 : Cécile Corbel/Simon Caby<br>Rose se lève<br>Rose起床<br>Elle prend son cartable<br>背上她的小书包<br>Elle court, comme en rêve<br>她跑跳着，似乎还在梦中<br>Les cheveux aux vent<br>发丝在风中飞扬<br>Dix ans, à l’école<br>十年里，到达学校时<br>Aux neuf coups de l’horloge<br>钟声总是敲响九下<br>Elle attend l’amour<br>她等着爱情啊<br>Mais l’amour ne vient pas<br>爱情却没有到来<br>Bouche cerise<br>樱桃小嘴<br>Et parfum de Rose<br>玫瑰香水<br>Un jour, elle apprend<br>一天，她得知<br>Qu’on l’aime en secret<br>有人悄悄爱慕着她<br>Huit garcons galants<br>八个殷勤小伙<br>Sept font leur cour<br>七个表白追求<br>Elle attend l’amour<br>她等着爱情啊<br>Mais l’amour ne vient pas<br>爱情却没有到来<br>Rose se lève<br>Rose醒来<br>Toujours en retard<br>总是太迟<br>Dans le train qui file<br>在飞驰的列车上<br>Elle note dans un carnet<br>她在本上记下<br>Six chagrins trop lourds<br>六件沉重的悲伤<br>Cinq petites peines<br>五点小烦恼<br>Elle attend l’amour<br>她等着爱情啊<br>Mais l’amour ne vient pas<br>爱情却没有到来<br>Elle range les souvenirs<br>梳理着回忆<br>Dans des boites closes<br>在密封之匣<br>Et le temps s’étire<br>时光静静流淌<br>Derrière les carreaux<br>在方格之后<br>Quatre photos qu’elle garde<br>她收藏着四张照片<br>Trois qu’elle repose<br>放下其中三个<br>Elle attend l’amour<br>她等着爱情呀<br>Mais l’amour ne vient pas<br>爱情却没有到来<br>Une femme à l’église<br>教堂里的一个女人<br>Effeuille les roses<br>摘下玫瑰的花瓣<br>Elle cueille ses larmes<br>采集玫瑰的汁液<br>en bouquet d’argent<br>在银光闪闪花束<br>Un ou deux soupirs<br>一两声叹息<br>Plus de rose sur la branche<br>来自枝上的玫瑰<br>Elle attend l’amour<br>她等着爱情啊<br>Mais l’amour ne vient pas<br>爱情却没有到来<br>Rose se lève<br>Rose起床<br>Elle prend son cartable<br>背上她的小书包<br>Elle court, comme en rêve<br>她跑跳着，似乎还在梦中<br>Les cheveux aux vent<br>发丝在风中飞扬<br>Elle attendait l’amour<br>她还在等着爱情<br>Je n’attends qu’une chose<br>我却只等一个心愿<br>Moi j’attends toujours<br>我总是等待着<br>Un baiser de toi<br>你的一个吻<br>J’attends toujours<br>我永远等待着<br>Un baiser de toi<br>你的一个吻</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="font-color-d915a3-4-arrietty-s-song-font"><font color="d915a3">4    Arrietty’s Song</font></h2><p><font color="d915a3">                        —— Cécile Corbel</font></p><p>CC还演唱过许多非母语作品，比如日语作品《Arrietty’s Song》便是其中最有名的一首，此外还有多首英语、西班牙语、葡萄牙语作品、盖尔语、印地语等等，甚至还发布过中文单曲。虽然说实话吧，也许是中文确实很难学习，她的中文发音真的一眼难尽，但能够世界各地的粉丝的愿望，对一个歌手/作曲家/演奏家来说，的确是很难能可贵的。了解日语的朋友可以发表一下意见，她的日语是不是比较标准。</p><div class="tabs" id="cc4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#cc4-1"><i class="fa-solid fa-music"></i>网易云通道</button></li><li class="tab"><button type="button" data-href="#cc4-2"><i class="fa-solid fa-feather"></i>Lyrics</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="cc4-1"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="86" src="//music.163.com/outchain/player?type=2&id=2324487&auto=1&height=66"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="cc4-2"><p>作词 : Cecile Corbel<br>作曲 : Simon Caby・Cecile Corbel<br>訳詞：伊平容子</p><p>I’m 14 years old, I’m pretty<br>我今年14岁，有点小可爱<br>元気な 小さい Lady<br>活泼的小小姑娘<br>床下に ずっと 借りぐらししてたの<br>一直借住在在地板下面<br>時には Happy, 時には Blue<br>时而开心 时而忧郁<br>誰かに会いたい<br>只因想见一个人<br>風 髪に感じて 空を眺めたい<br>栗发沐着微风 想凝望天空<br>あなたに花 届けたい<br>好想为你送一束鲜花<br>向こうは別の世界<br>面前是另一个世界<br>ほら蝶々が舞ってる<br>看呀 蝴蝶翩翩起舞<br>私を待っている<br>仿佛在等待我的到来<br>そう、変わることのない<br>是啊 什么都没有改变<br>わたしの小さい世界<br>我的小小世界<br>嫌いじゃないの でもあなたを<br>我并不是厌倦 只是想知道<br>もっと もっと知りたくて<br>更多 更多你的事情<br>喜びと悲しみは いつも 折り混ざってゆく<br>欢喜和忧伤 总是交织在一起<br>風 髪に感じて 空を眺めたい<br>栗发沐着微风 想凝望天空<br>あなたに花 届けたい<br>好想为你送一束鲜花<br>向こうは別の世界<br>面前是另一个世界<br>ほら蝶々が舞ってる あなたを待っている<br>看呀 蝴蝶翩翩起舞 仿佛也在等待你的到来</p><p>太陽の下で 花に囲まれて<br>在阳光下 在花丛里<br>あなたと日々 過ごしたい<br>想与你度过每一天<br>この想いを胸に 新しい世界で<br>心存这样的愿望 向着新世界<br>私らしく 生きる<br>自我地活下去</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="font-color-4520a9-5-平凡之路-font"><font color="4520a9">5    平凡之路</font></h2><p><font color="4520a9">                        —— WestLife</font></p><p>既然提到了中文演唱，那就不得不说一下我们的西城男孩了，老男孩们还是那样可爱，加上天才作曲家朴树和天才作家韩寒的老歌，真的吹爆好吗？<br>美中不足就是找遍全网都只有这种垃圾画质【生气】。</p> <div class="tabs" id="wl1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#wl1-1"><i class="fa-brands fa-bilibili"></i>bilibili</button></li><li class="tab"><button type="button" data-href="#wl1-2"><i class="fa-solid fa-feather"></i>Lyrics</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="wl1-1"><iframe id="ytplayer" type="text/html" src="https://xbeibeix.com/api/bilibili/biliplayer/?url=BV17q4y1B7BR" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="wl1-2"><p>作词 : 朴树/韩寒<br>作曲 : 朴树<br>徘徊着的 在路上的<br>你要走吗 via via<br>易碎的 骄傲着<br>那也曾是我的模样<br>沸腾着的 不安着的<br>你要去哪 via via<br>谜一样的 沉默着的<br>故事你真的 在听吗<br>我曾经跨过山和大海<br>也穿过人山人海<br>我曾经拥有着的一切<br>转眼都飘散如烟<br>我曾经失落失望<br>失掉所有方向<br>直到看见平凡<br>才是唯一的答案<br>当你仍然 还在幻想<br>你的明天 via via<br>她会好吗 还是更烂<br>对我而言 是另一天<br>我曾经毁了我的一切<br>只想永远地离开<br>我曾经堕入无边黑暗<br>想挣扎无法自拔<br>我曾经像你像他<br>像那野草野花<br>绝望着 也渴望着<br>也哭也笑平凡着<br>哦~~~~~~~~~~~<br>哦~~~~~~~~~~~<br>哦~~~~~~~~~~~<br>哦~~~~~~~~~~~</p><p>我曾经跨过山和大海<br>也穿过人山人海<br>我曾经拥有着的一切<br>转眼都飘散如烟<br>我曾经失落失望<br>失掉所有方向<br>直到看见平凡<br>才是唯一的答案~~~~~<br>我曾经毁了我的一切<br>只想永远地离开<br>我曾经堕入无边黑暗<br>想挣扎无法自拔<br>我曾经像你像他<br>像那野草野花<br>绝望着 也渴望着<br>哭着笑着平凡着<br>哦~~~~~~~~~~~<br>哦~~~~~~~~~~~<br>哦~~~~~~~~~~~<br>绝望着 也渴望着<br>哭着笑着平凡着<br>平凡着~~~</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="font-color-4520a9-6-my-love-font"><font color="4520a9">6    My Love</font></h2><p><font color="4520a9">                        —— WestLife</font></p><p>既然来了，再来首老歌吧。不得不说，和声他们一直很擅长。</p> <div class="tabs" id="wl2"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#wl2-1"><i class="fa-brands fa-bilibili"></i>bilibili</button></li><li class="tab"><button type="button" data-href="#wl2-2"><i class="fa-brands fa-youtube"></i>YouTube</button></li><li class="tab"><button type="button" data-href="#wl2-3"><i class="fa-solid fa-music"></i>网易云通道</button></li><li class="tab"><button type="button" data-href="#wl2-4"><i class="fa-solid fa-feather"></i>Lyrics</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="wl2-1"><iframe id="ytplayer" type="text/html" src="https://xbeibeix.com/api/bilibili/biliplayer/?url=BV1WU4y1a7rb" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="wl2-2"><iframe id="ytplayer" type="text/html" src="https://www.youtube.com/embed/voSQYTi0984?autoplay=1&origin=http://example.com" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="wl2-3"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="86" src="//music.163.com/outchain/player?type=2&id=29809886&auto=1&height=66"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="wl2-4"><p>作词 : NYLEN, PER HARRY<br>作曲 : NYLEN, PER HARRY<br>My love<br>Westlife</p><p>An empty street,<br>空寂的街道<br>an empty house,<br>空寂的房间<br>a hole inside my heart<br>空寂的思念深藏在我的心中<br>I’m all alone and the rooms<br>孤孤单单<br>are getting smaller<br>无尽的孤寂压迫着我<br>I wonder how,<br>我想知道怎样<br>I wonder why,<br>我想知道是何原因<br>I wonder where they are<br>我想知道他们的归属<br>The days we had,<br>我们在一起的时光<br>the songs we sang together<br>我们共同吟唱的歌曲<br>Oh yeah</p><p>And all my love,<br>还有你 我的爱人<br>I’m holding on forever<br>我始终坚持着<br>Reaching for a love that seems so far<br>但得到一份爱却是那样遥不可及<br>So I say a little prayer<br>我悄悄向上帝祈求<br>And hope my dreams will take me there<br>并希望我的梦想能带到那儿<br>Where the skies are blue to see<br>那儿有湛蓝的天空还有你美丽的笑容<br>you once again,my love<br>我的爱人<br>Over seas and coast to coast<br>飘过大海 翻山越岭<br>To find a place I love the most<br>去找寻一个我最爱的地方<br>Where the fields are green to see<br>那儿有翠绿的草原<br>you once again<br>还有你醉人的眼神<br>My love<br>我的爱人</p><p>I try to read,I go to work,<br>我尝试阅读 我尽力工作<br>I’m laughing with my friends<br>我和我的朋友逍遥狂欢<br>But I can’t stop to<br>但这些都不能<br>keep myself from thinking<br>阻止我的幻想<br>Oh no</p><p>I wonder how,<br>我想知道怎样<br>I wonder why,<br>我想知道是何原因<br>I wonder where they are<br>我想知道他们的归属<br>The days we had,the songs<br>我们在一起的时光<br>we sang together<br>我们共同吟唱的歌曲<br>Oh yeah<br>哦 耶<br>And all my love,I’m holding on forever<br>还有你 我的爱人 我始终坚持着<br>Reaching for a love that seems so far<br>但得到一份爱却是那样遥不可及<br>So I say a little prayer<br>我悄悄向上帝祈求<br>And hope my dreams will take me there<br>并希望我的梦想能带我到那儿<br>Where the skies are blue<br>那儿有湛蓝的天空<br>to see you once again,<br>还有你美丽的笑容<br>my love<br>我的爱人<br>Over seas and coast to coast<br>飘过大海 翻山越岭<br>To find a place I love the most<br>去找寻一个我最爱的地方<br>Where the fields are green<br>还有碧绿草原上<br>to see you once again<br>飘扬的你<br>To hold you in my arms<br>我想抱紧你<br>To promise you my love<br>我向你保证 我的爱人<br>To tell you from the heart<br>我绝不是在撒谎<br>You’re all I’m thinking of<br>你是我所想的一切</p><p>I’m reaching for a love<br>但得到一份爱<br>that seems so far<br>却是那样遥不可及<br>So I say a little prayer<br>我瞧瞧向上帝祈求<br>And hope my dreams will take me there<br>并希望我的梦想能带我到那儿<br>Where the skies are blue<br>那儿有湛蓝的天空<br>to see you once again,my love<br>还有你美丽的笑容 我的爱人<br>Over seas and coast to coast<br>飘过大海 翻山越岭<br>To find a place I love the most<br>去找寻一个我最喜爱的地方<br>Where the fields are green<br>那儿有翠绿的草原<br>to see you once again,my love<br>还有你醉人的眼神 我的爱人<br>Say a little prayer<br>我悄悄向上帝祈求<br>Dreams will take me there<br>并希望我的梦想能带我到那儿<br>Where the skies are blue<br>那儿有湛蓝的天空<br>to see you once again<br>还有你美丽的笑容<br>Over seas and coast to coast<br>飘过大海 翻山越岭<br>To find a place I love the most<br>去找寻一个我最喜爱的地方<br>Where the fields are green<br>那儿有翠绿的草原<br>to see you once again<br>还有你醉人的眼神<br>My love<br>我的爱人</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="font-color-ec9210-7-shall-we-talk-font"><font color="ec9210">7    Shall We Talk</font></h2><p><font color="ec9210">                        —— 陈奕迅</font></p><p>同样在2021.12.17，在WestLife为中国歌迷举行线上演唱会时，陈奕迅发布了新歌——《失去探戈》（手动狗头）。可爱的孩子和更可爱的胖叔叔同台演唱，真的很感动。</p><div class="tabs" id="es1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#es1-1"><i class="fa-brands fa-bilibili"></i>bilibili</button></li><li class="tab"><button type="button" data-href="#es1-2"><i class="fa-solid fa-music"></i>网易云通道</button></li><li class="tab"><button type="button" data-href="#es1-3"><i class="fa-solid fa-feather"></i>Lyrics</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="es1-1"><iframe id="ytplayer" type="text/html" src="https://xbeibeix.com/api/bilibili/biliplayer/?url=BV1aq4y1B7sY" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="es1-2"><div class="flink"><div class="flink-name">（你还是喜欢原版吗？）</div> <div class="flink-list">          <div class="flink-list-item">            <a href="https://music.163.com/#/song?id=67411" title="Shall We Talk" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://img.88icon.com/upload/jpg/20210524/4d701ad487e28c7ae2c97184064c65e9_67077_800_800.jpg!88con" onerror="this.onerror=null;this.src="/img/friend_404.gif"" alt="Shall We Talk">              </div>              <div class="flink-item-name">Shall We Talk</div>               <div class="flink-item-desc" title="大人只寄望收获 情人只听见承诺">大人只寄望收获 情人只听见承诺</div>            </a>          </div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="es1-3"><p>作词 : 林夕<br>作曲 : 陈辉阳<br>编曲 : 金培达<br>明月光<br>为何又照地堂<br>宁愿在公园躲藏<br>不想喝汤<br>任由目光<br>留在漫画一角<br>为何望母亲一眼就如罚留堂<br>孩童只盼望欢乐<br>大人只知道期望<br>为何都不大懂得<br>努力体恤对方<br>大门外有蟋蟀<br>回响却如同幻觉<br>shall we talk<br>shall we talk<br>就当重新手拖手去上学堂<br>陪我讲<br>陪我讲出<br>我们最后何以生疏<br>谁怕讲<br>谁会可悲得过孤独探戈<br>难得可以同座<br>何以要忌讳赤裸<br>如果心声真有疗效<br>谁怕暴露更多<br>你别怕我</p><p>荧幕发光<br>无论什么都看<br>情人在分手边缘只敢喝汤<br>若沉默似金<br>还谈什么恋爱<br>宁愿在发声机器面前笑着忙<br>成人只寄望收获<br>情人只听见承诺<br>为何都不大懂得<br>努力珍惜对方<br>螳螂面对蟋蟀<br>回响也如同幻觉<br>shall we talk<br>shall we talk<br>就算牙关开始打震<br>别说谎<br>陪我讲<br>陪我讲出<br>我们最后何以生疏<br>谁怕讲<br><del>除非彼此已失去探戈</del><br>难得可以同座<br>何以要忌讳赤裸<br>如果心声真有疗效<br>谁怕暴露更多<br>陪我讲<br>陪我亲身正视眼泪谁跌得多<br>无法讲<br>除非彼此已失去了能力触摸<br>铃声可以宁静<br>难过却避不过<br>如果沉默太沉重<br>别要轻轻带过<br>明月光<br>为何未照地堂<br>孩儿在公司很忙<br>不需喝汤<br>and shall we talk<br>斜阳白赶一趟<br>沉默令我听得见叶儿声声降</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="font-color-ec9210-8-人来人往-font"><font color="ec9210">8    人来人往</font></h2><p><font color="ec9210">                        —— 陈奕迅</font></p><p>也许是个人习惯吧，每次感到伤心崩溃的时候，就特别喜欢听陈医生的歌，日复一日，夜复一夜，用耳机买醉自己，沉浸在自己的一尺一方。情绪是会在单曲循环的歌上积淀的，一首歌记住一个人、一件事，或是一段时光，即使事情过去了这么久，也能想起那时的心境。</p><p>简单提一下，我没有放Live是因为没找到什么好的版本，要不就是古老av画质，要不就是嘈杂的掌声影响了我听歌的兴趣，后面的bilibili通道只是我个人比较喜欢的一个钢琴版本。</p><p>以及，希望大家，支持正版（下游戏的时候可不见我这么说）。</p><div class="tabs" id="es1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#es1-1"><i class="fa-solid fa-music"></i>网易云通道</button></li><li class="tab"><button type="button" data-href="#es1-2"><i class="fa-solid fa-cloud-arrow-down"></i>盗版通道</button></li><li class="tab"><button type="button" data-href="#es1-3"><i class="fa-brands fa-bilibili"></i>bilibili</button></li><li class="tab"><button type="button" data-href="#es1-4"><i class="fa-solid fa-feather"></i>Lyrics</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="es1-1"><div class="flink"> <div class="flink-list">          <div class="flink-list-item">            <a href="https://music.163.com/#/song?id=66378" title="人来人往" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://img.88icon.com/upload/jpg/20210524/4d701ad487e28c7ae2c97184064c65e9_67077_800_800.jpg!88con" onerror="this.onerror=null;this.src="/img/friend_404.gif"" alt="人来人往">              </div>              <div class="flink-item-name">人来人往</div>               <div class="flink-item-desc" title="闭起双眼你最挂念谁">闭起双眼你最挂念谁</div>            </a>          </div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="es1-2"><audio id="audio" controls preload="none">      <source id="mp3" src="./renlairenwang.mp3"></audio><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="es1-3"><iframe id="ytplayer" type="text/html" src="https://xbeibeix.com/api/bilibili/biliplayer/?url=BV1tb4y147Vs" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="es1-4"><p>作曲 : 陈辉阳<br>编曲 : 陈辉阳<br>朋友已走<br>刚升职的你举杯到凌晨还未够<br>用尽心机拉我手<br>缠在我颈背后<br>说你男友有事忙是借口<br>说到终于饮醉酒<br>情侣会走<br>刚失恋的你哭干眼泪前来自首<br>寂寞因此牵我手<br>除下了他手信后<br>我已得到你没有<br>但你我至少往后 成为了密友<br>闭起双眼你最挂念谁<br>眼睛张开身边竟是谁<br>感激车站里<br>尚有月台能让我们满足到落泪<br>拥不拥有也会记住谁<br>快不快乐留在身体里<br>爱若能够永不失去<br>何以你今天竟想找寻伴侣<br>谁也会走<br>刚相恋的你先知我们原来未够<br>借故松开我的手<br>藏在贴纸相背后<br>我这苦心开过没有<br>但试过散心旅游 如何答没有<br>闭起双眼我最挂念谁<br>眼睛张开身边竟是谁<br>感激车站里<br>尚有月台曾让我们满足到落泪<br>拥不拥有也会记住谁<br>快不快乐有天总过去<br>爱若为了永不失去<br>谁勉强娱乐过谁<br>爱若难以放进手里<br>何不将这双手放进心里<br>时间会走<br>刚失恋的我开始与旁人携着手<br>但什么可以拥有<br>缠在那颈背后<br>最美丽长发未留在我手<br>我也开心饮过酒</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="font-color-0d5ec2-9-the-scientist-font"><font color="0d5ec2">9    The Scientist</font></h2><p><font color="0d5ec2">                        —— Coldplay</font></p><p>这首歌来着我最喜欢的乐队Coldplay。当一个科学家试图用科学家的理性来理解爱情，就像一个懵懂的孩子用已知来理解这个世界一样，有太多的笃定其实没有那么尽如人意了。我总觉得，自己留不住什么，是自己不够用力，而现在我逐渐明白，不管你嘶吼还是疯癫，世界上没有那么多东西是自己能够决定的，但这也不能作为停止追逐心中童话的理由。</p><div class="tabs" id="cp1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#cp1-1"><i class="fa-brands fa-bilibili"></i>bilibili</button></li><li class="tab"><button type="button" data-href="#cp1-2"><i class="fa-solid fa-music"></i>网易云通道</button></li><li class="tab"><button type="button" data-href="#cp1-3"><i class="fa-solid fa-feather"></i>Lyrics</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="cp1-1"><iframe id="ytplayer" type="text/html" src="https://xbeibeix.com/api/bilibili/biliplayer/?url=BV1n341187fx" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="cp1-2"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="86" src="//music.163.com/outchain/player?type=2&id=29717744&auto=1&height=66"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="cp1-3"><p>Come up to meet you<br>我回来想再见你一面<br>Tell you I’m sorry<br>告诉你我很对不起<br>You don’t know how lovely you are<br>你不知道你有多么可爱<br>I had to find you<br>我必须要找到你<br>Tell you I need you<br>告诉你我需要你<br>Tell you I’ll set you apart<br>告诉你，你多么与众不同<br>Tell me your secrets<br>分享你的秘密<br>And ask me your questions<br>回答你问我的问题<br>Oh~let’s go back to the start<br>让我们重新开始<br>Running in circles<br>走过太多的弯路<br>Coming up tails<br>将要走到终点<br>Heads on a science apart<br>我们的分开似乎是科学上的<br>Nobody said it was easy<br>没有人能说那很简单<br>It’s such a shame for us to part<br>分开对我们来说很遗憾<br>Nobody said it was easy<br>没有人能说那很简单<br>No one ever said it would be so hard<br>没有人说那很艰难<br>Oh~I’m going back to the start<br>带我回到起点</p><p>I was just guessing<br>我猜测过<br>At numbers and figures<br>尽我所有的见解<br>Pulling the puzzles apart<br>解开那些疑惑<br>Questions of science<br>科学上的问题<br>Science and progress<br>科学的进步<br>Could not speak as loud as my heart<br>不能说出我的心声<br>Tell me you love me<br>告诉我你爱我<br>Come back and haunt me<br>回到我身边<br>Oh~when I rush to the start<br>当我跑到起点<br>running in circles<br>走过太多的弯路<br>Chasing our tails<br>将要走到终点<br>Coming back as we are<br>让我们回到从前<br>Nobody said it was easy<br>没有人能说那很简单<br>Oh~it’s such a shame for us to part<br>分开对我们来说很惭愧<br>Nobody said it was easy<br>没有人能说那很简单<br>No one ever said it would be this hard<br>没有人能说那很艰难<br>I’m going back to the start<br>我将要回到从前</p><p>Ahoooooo…</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="font-color-0d5ec2-10-clocks-font"><font color="0d5ec2">10  Clocks</font></h2><p><font color="0d5ec2">                        —— Coldplay/郎朗</font></p><p>来一首好玩的Live，郎朗和山芋的神级同台，他俩争抢凳子和钢琴的样子真的好好磕。</p><div class="tabs" id="cp1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#cp1-1"><i class="fa-brands fa-bilibili"></i>bilibili</button></li><li class="tab"><button type="button" data-href="#cp1-2"><i class="fa-brands fa-youtube"></i>YouTube</button></li><li class="tab"><button type="button" data-href="#cp1-3"><i class="fa-solid fa-feather"></i>Lyrics</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="cp1-1"><iframe id="ytplayer" type="text/html" src="https://xbeibeix.com/api/bilibili/biliplayer/?url=BV1eP4y1h7bW" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="cp1-2"><p>（空降6:53郎朗闪现，或者也可以不空降不是么）</p><iframe id="ytplayer" type="text/html" src="https://www.youtube.com/embed/Twx8ok2uYEo?autoplay=1&origin=http://example.com" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="cp1-3"><p>作词 : Guy Berryman/Chris Martin/Jonny Buckland/Will Champion<br>作曲 : Guy Berryman/Chris Martin/Jonny Buckland/Will Champion</p><p>The lights go out and I can’t be saved<br>光明离去了，我无法被拯救<br>Tides that I tried to swim against<br>潮水汹涌，我试着逆流而上<br>You’ve put me down upon my knees<br>已令我无力反抗，俯首称臣<br>Oh, I beg, I beg and plead, singing<br>我祈求，祈求，唱着<br>Come out of things unsaid<br>从未吐露的心声<br>Shoot an apple off my head, and a…<br>赶走压在我头顶的重量吧，顺便带走<br>Trouble that can’t be named<br>那莫名的烦恼<br>A tiger’s waiting to be tamed, singing<br>一只等待被驯化的猛虎，唱着<br>You are…<br>你是…<br>You are…<br>你是…<br>Confusion never stops<br>困惑从未停止<br>Closing walls and ticking clocks, gonna<br>城墙关闭，时钟滴答作响<br>Come back and take you home<br>我将会回到这里，带你回家<br>I could not stop that you now know, singing<br>你现在知道我停不下来，唱着<br>Come out upon my seas<br>唱出脑海中的声音<br>Curse missed opportunities, am I<br>诅咒错过了时机<br>A part of the cure<br>我存在于解药的成分表里吗?<br>Or am I part of the disease? singing<br>还是说，我是致病菌？唱着<br>You are…<br>你是…<br>You are…<br>你是…<br>You are…<br>你是…<br>You are…<br>你是…<br>You are…<br>你是…<br>You are…<br>你是…<br>And nothing else compares<br>无与伦比的存在<br>Oh, nothing else compares<br>无与伦比的存在<br>And nothing else compares<br>无与伦比的存在<br>You are…<br>你是…<br>You are…<br>你是…<br>Home, home, where I wanted to go<br>家，我想要回到的地方<br>Home, home, where I wanted to go<br>家，我想要回到的地方<br>Home, home, where I wanted to go<br>家，我想要回到的地方<br>Home, home, where I wanted to go<br>家，我想要回到的地方</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="font-color-ca0e47-11-clock-tower-font"><font color="ca0e47">11  Clock Tower</font></h2><p><font color="ca0e47">                        —— Yoann Laulan</font></p><p>看到刚才的《Clocks》，突然想夹带一点点私货，临时加曲《Clock Tower》，由秒钟走动的声音开始，旋律由安静逐渐转向紧张，把弦乐和合成音都展现到了极致，指针的咔嗒声还会不时出现，让你想起时间还在一分一秒的流逝。年度最佳游戏配乐，不过分吧。</p><div class="tabs" id="cp1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#cp1-1"><i class="fa-solid fa-music"></i>网易云通道</button></li><li class="tab"><button type="button" data-href="#cp1-2"><i class="fa-solid fa-feather"></i>Lyrics</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="cp1-1"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="86" src="//music.163.com/outchain/player?type=2&id=1828528925&auto=1&height=66"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="cp1-2"><p>你在期待什么？</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="font-color-555577-12-the-poet-and-the-pendulum-font"><font color="555577">12  The Poet and the Pendulum</font></h2><p><font color="555577">                        —— Nightwish</font></p><p>这首曲子来自我同样很喜欢的乐队Nightwish，对这首歌/乐曲具体的分类其实我不也是很清楚，实在是非常独特，但它的主部很摇滚/我就任性将它归类到这里。</p><p>这首歌脱胎于爱伦坡的小说《陷坑与钟摆》中的一段故事，讲的是教会的一种变态刑罚，将犯人放在钟摆下，钟摆的最下方是一根锋利的钢针，每摆一点钢针就下降一点，直到切开犯人的腹部，曲中还原了紧张、挣扎、释然、惊惧等不同的情感…</p><p>再说回这首歌的类型，我之前觉得它有点类似于交响，现在觉得它甚至类似于歌剧(?)。可以类比于《波西米亚狂想曲》的六个不同风格的音乐段围绕主题展开（虽然我当年只记住了Mama哈哈哈），每段各有各的特点，又有逻辑串联，此曲大致也是这样略显个性的五段体部。</p><p>建议先看小说，再配合曲子食用。如果不喜欢太重口味或者太重的金属味，请略过吧。</p><div class="tabs" id="nw1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#nw1-1"><i class="fa-solid fa-music"></i>网易云通道</button></li><li class="tab"><button type="button" data-href="#nw1-2"><i class="fa-solid fa-feather"></i>小说选段</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="nw1-1"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="86" src="//music.163.com/outchain/player?type=2&id=21312104&auto=1&height=66"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="nw1-2"><p>（Sample）</p><p>我现在是仰面朝天，直挺挺得躺在一个低矮的木架子上，身上牢牢地捆着教服腰带一样的皮绳子。皮绳绕着我的四肢和身体缠了一圈又一圈，只有头部可以自由活动，左手勉强伸出够到吃的。食物就在附近地板上的陶制盘子里。我惊恐地发现，水罐子不见了。我说惊恐，是因为我快渴死了。很明显，这种焦渴是迫害我的人有意为之，因为盘子里的食物是肉，散发出刺鼻的味道。</p><p>我审视着地牢的天花板。它距我大概三四十英尺，构造与四壁很是相仿。其中一块嵌板上的一个奇异人影，深深吸引了我。那是一幅彩色的时间老人的画像。它与一般画法并无二致。只不过，他手里握的不是一把镰刀。不经意地扫了一眼后，我还 以为，那是一个我们在老式钟上见过的巨大钟摆。但这个钟摆外形上的奇特处，促使我多看了它几眼。当我直勾勾地仰望着它时（它的位置恰在我正上方），我觉得我看到它动了。片刻间，这个感觉就被证实了。它的摆动幅度不大，当然也很慢。我盯着它看了会儿，有几分害怕，更多的则是惊奇。</p><p>直到看厌了它单调的摆动，我的眼睛才转向天花板上的其他东西。</p><p>一阵轻微的响动吸引了我。我朝地上一看，几只硕大的老鼠正横穿过地板。它们是从我右边视线内的陷阱里钻出的。即便在我盯着看的时候，它们照样匆匆忙忙鱼贯而至，眼睛中流露出贪婪之色——是肉香的诱惑。我费了很大的劲儿才吓退它们。</p><p>大约过了半个小时，或者是一个小时——我的时间感已有些混乱，我的目光又转向上方。</p><p>一看之下，我不由大惊失色，困惑难安。钟摆的摆幅已经近乎一码。它是摆动速度当然也随之加快了。最使我惊慌失措的是，我显然意识到了钟摆在下降。我如今看到——我有多恐惧已不言自明——钟摆的下端居然是弯月形的钢刀，它闪闪发光，长约一英尺。两角朝上翘起，下边的刀刃分明像剃刀一样锋利。钟摆的样子也像剃刀，看来又大又重，从下往上渐渐变细，俨然一个坚实的宽边锥形物，上端悬在沉实的铜棒上，硕大的钟摆左右摆动时，在空气中划出嘶嘶的声响。</p><p>我再也不必怀疑了。这正是那些酷爱折磨人的僧侣为我安排的死法。真可谓独具匠心啊。</p><p>宗教法庭的那伙人已得知我发现了陷坑。恐怖的陷坑，正是为我这样胆敢与国教唱反调的人而设的。它是地狱的象征，是传闻中宗教法庭登峰造极的一种惩罚。偶然间摔的那一跤，使我躲过了葬身陷坑那一劫。可我明白，乘人不备设计袭击，使用酷刑折磨，是地牢里的主要杀人手段，无论哪一种，都堪称稀奇古怪。我没跌入陷坑，把我扔进去也不在毒计的计划范围内，但我又必死无疑，别无选择，于是，另一种比较温和的死法等着我了。比较温和！想到自己居然用了这么个字眼，不由苦笑起来。</p><p>我一下一下地数着钢刀急速摆动的次数，在漫长的时间里，经受着比死还 可怕的恐惧。</p><p>说这个又有何益！钟摆一寸一寸、一分一分地下降，每隔一会儿，才能感到它确实是在下坠。</p><p>片刻长于百年。钟摆在下降，下降。几天过去了——也许好多好多天都过去了，钟摆在我的头顶上晃荡了，它摆来摆去，扇出丝丝恶毒的小风，锋利刀刃的味道直冲鼻孔。我祈祷着，祈求上苍让它降得快一些。我变得极为疯狂，拼命挣扎着往那摆来摆去的可怕刀锋上凑。后来我突然平静了。我平躺在那里，冲着那寒光闪闪的杀人器物笑了，如同孩子对着罕见的玩具发笑。</p><p>我再次完全不省人事，只是时间很短，因为等我恢复知觉后，丝毫没觉得钟摆有所下降。</p><p>不过，也许时间很长，因为我晓得，见我昏迷过去，那些恶魔是可以随意止住钟摆的。这次醒来，我感到说不出的难受和虚弱，似乎好久没吃东西一样。即便当时有着滔天的痛苦，对食物的需要依然是人的天性。我苦苦挣扎着伸出左手，皮绳容许我伸出多远就伸出多远。我拿到了那块老鼠吃剩的一丁点肉。正当我揪下一点往嘴里塞时，脑子里闪过了一个念头，那念头尚未成形，但它含着喜悦，带给人希望。可希望到底与我何干？如我所说，那个念头尚未成形。人们有许多这样的念头，而且最终也不会成形。我觉得那个念头含着喜悦，带给人希望，但我同时也感觉到，那个念头还 没成形就消失了。我竭力想抓住它，使它完好地呈现出来，可一切都是徒然。长期以来受尽苦楚，正常的思维能力几乎消耗净尽。我成了一个蠢蛋，一个白痴。</p><p>钟摆的摆动方向刚好跟我平躺的身体成直角。看得出，那弯月样的刀锋设计好了要划过心脏，它将磨破我的袍子，一遍又一遍，磨过来磨过去。尽避钟摆的幅度大得惊人——大约在三十英尺甚至更多，尽避钟摆下降时发出的嘶嘶声力道很猛，这阵势足以把铁墙给劈开，但它要磨穿我的袍子，还 是要花上几分钟的。我打住了，没敢接着再想下去。思绪顽固地定格在这个念头上。似乎抓住这个念头停滞不前，就能阻止钢刀的降落。我迫使自己去想像刀刃划过袍子的声音，想像那样的摩擦声对神经造成的惊悚效果。我琢磨着这些无聊的细节，直至唇冷齿寒。</p><p>下降——钟摆缓慢平稳地下降着。我比较着它的摆动速度和下降速度，心中有种疯狂的快感升起。向右——向左——摆幅真大——伴着坠入地狱的灵魂的尖叫——像一只悄然潜行的老虎，慢慢接近我的心脏。不同的念头轮番占上风，我时而大笑，时而嚎叫。</p><p>下降——钟摆断然而残酷地继续下降！它就在离我的胸口不足三英寸的地方摆动。我剧烈地挣扎着，想挣脱左臂。但只有肘部以下部位可以活动，我可以把左手伸向旁边的盘子里，再伸进嘴巴，不过很费劲，够不到更远的地方。如果我可以挣断捆在肘部以上的皮绳子，我会抓住钟摆，死命阻止它的摆动。没准我还 能阻止一场雪崩！</p><p>下降——钟摆的下降依然继续——不可避免的下降！钟摆每摆动一次，我都会喘息一声，挣扎一下，都会痉挛性地收缩一阵。在毫无意义的绝望中，我又满怀希望，我的目光追随着钟摆，无论它是向外还 是向上摆；但当它向下摆过来时，却又吓得眼皮颤抖，赶紧闭上眼睛了事。尽避死亡是一种解脱，哦，这种解脱又是何其难以形容！钟摆再下降一点点，那锋利闪光的刀刃就会陡然切入我的胸膛，一想到这个，我的每一根神经都止不住地颤抖。正是因为有了希望，才会每一根神经都瑟瑟发抖，每一寸身体都收缩。希望——那战胜苦痛的希望啊，即便在宗教法庭的地牢里，它也会对死刑犯悄声耳语。</p><p>看得出，钟摆只消再摆动十一二次就能触到我的袍子了。看到这一后果时，我绝望的神志蓦地变得敏锐而镇定。多少小时以来——或许是多少天以来——我第一次开始思考了。我突然想到，捆绑我的皮绳子，或者说马肚带，是完整的一根。身上并没有别的绳索。剃刀般锋利的弯刀在绳子上一划，不管划在哪里都会将它割断。这样，我就可以用左手把绳子从身上解开了。但那样干太可怕了，刀刃都挨着身子了，稍一挣扎都会送命。再说了，那些折磨人的狗奴才能想不到我会这么干？他们能不严加防范？！而且，钟摆是否能恰好划过我胸部的皮绳？我惟恐这微弱的并且似乎也是最后的希望破灭，我尽量抬起头，细细察看绳子绕过胸部的样子，四肢和躯干横七竖八缠满了——惟独该死的弯刀将划过的地方没缠上。</p><p>脑袋还 没在原来的位置摆正，就有一个想法电光石火般闪过心头。我只能说，这正是先前提到的那尚未成形的脱身念头的另一半。先前，当我把食物送到焦渴的唇边时，只有一半想法在脑海中飘飘忽忽地漾起。现在，整个想法都出来了，虽然微弱、隐约、模糊，但却完整。想到能绝处逢生，我马上满怀激情地着手干起来，都有点神经质了。</p><p>几个小时以来，我躺的那个矮木架旁边，大批老鼠蜂拥而至，它们疯狂、猖獗而贪婪，血红的眼睛死死盯住我，似乎在专门等到我一动不动时扑上来吞吃我。“它们在陷坑里惯于吃什么？”我暗自思忖道。</p><p>尽避我拼命驱逐，它们到底还 是把盘子里的肉吃得仅省一点碎屑。我的手一直习惯性地挥舞着，想看住盘子里的食物，可是到后来，这种无意识的挥动再也不起任何作用了。可恶的群鼠在贪婪至极，尖利的牙齿常常咬着我的手指。肉真的所剩不多了。我把那点油乎乎香喷喷的碎末全都抹到皮绳上，凡是左手能触及的地方，我都涂上了。然后，我把手缩回来，屏住呼吸躺着，一动也不动。</p><p>看到这一变化——看到我一动不动了，那些贪婪的老鼠起初是又惊又怕，纷纷惶恐地后退，不少老鼠都逃回陷坑去了。但这样的现象只持续了一会儿。我没有白白估计错它们的贪婪。看我照样一动不动，一二只最大胆的跳上了木架，在绳索上嗅来嗅去。这像是个总攻的信号。成群结队的老鼠，急急忙忙、冒冒失失地涌出陷坑，粘在木架上，跳上我的身体，简直是泛滥成灾。钟摆“喀嚓喀嚓”的摆动丝毫没造成干扰，它们一边躲闪着不让钟摆撞上，一边忙着啃噬涂满肉末的皮绳子。它们密密麻麻地挤压在我身上，在我脖子上扭来扭去，冰冷在嘴巴嗅着我的嘴唇。我差点被它们压得窒息而死。一种无法言喻的厌恶升腾而起，黏乎乎的，使我的心底生出萧瑟寒意。不过片刻之后，我就感到，战斗即将终结。我明显察觉到了皮绳的松动。我知道，老鼠咬断的地方，不止一处。我以超人的意志继续一动不动地躺着。</p><p>我没估算错——因为我没白白受苦。我终于有了自由的感觉。皮绳断了，就那么一截一截地披挂在我身上；但是钟摆的利刃也压向了胸膛。它划破了长袍的斜纹哔叽布，划破了里面的亚麻布衣衫。它又摆动两个来回。尖锐的疼痛传遍了每一根神经。不过，脱身的时刻也到来了。随着我大手一挥，一阵騷乱，释放我的大群老鼠匆匆逃离。我稳稳地行动了——小心而缓慢地往边上一缩，我滑脱了皮绳子的束缚，避开了弯刀的利刃。至少在这一刻，我是自由了。</p><p>（点击右下角箭头回到顶部）</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="font-color-555577-13-the-crow-the-owl-and-the-dove-font"><font color="555577">13  The Crow, the Owl and the Dove</font></h2><p><font color="555577">                        —— Nightwish</font></p><p>一首北欧风格的曲子，同样来自Nightwish乐队。</p><div class="tabs" id="cp1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#cp1-1"><i class="fa-solid fa-music"></i>Instrumental</button></li><li class="tab"><button type="button" data-href="#cp1-2"><i class="fa-solid fa-music"></i>Orchestral</button></li><li class="tab"><button type="button" data-href="#cp1-3"><i class="fa-solid fa-feather"></i>Lyrics</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="cp1-1"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="86" src="//music.163.com/outchain/player?type=2&id=21312225&auto=1&height=66"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="cp1-2"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="86" src="//music.163.com/outchain/player?type=2&id=21312225&auto=1&height=66"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="cp1-3"><p>你在期待什么？</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="font-color-555577-14-rest-calm-font"><font color="555577">14  Rest Calm</font></h2><p><font color="555577">                        —— Nightwish</font></p><p>一首我觉得可以算是很好的交响的作品，很难想象这是出自一个摇滚乐队，有抑扬顿挫，有舒缓紧张，等到主旋律千呼万唤终于扬起的时候，还有钢琴solo的时候，还有一层层推向高潮的时候，那种漂荡起伏之感真的很抓耳。</p><p>不多说，听就完事了。</p><div class="tabs" id="cp1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#cp1-1"><i class="fa-solid fa-music"></i>Orchestral</button></li><li class="tab"><button type="button" data-href="#cp1-2"><i class="fa-solid fa-feather"></i>Lyrics</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="cp1-1"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="86" src="//music.163.com/outchain/player?type=2&id=479296196&auto=1&height=66"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="cp1-2"><p>你在期待什么？</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>休息一下，马上回来。</p><hr><h2 id="p-align-center-font-size-36-color-8f71bb-下半场-font-p"><p align="center"><font size="36" color="8f71bb"><strong>下半场</strong></font></p></h2><h2 id="font-color-ff3732-15-по-высокой-траве-font"><font color="ff3732">15  По высокой траве</font></h2><p><font color="ff3732">                        —— Любэ</font></p><p>柳拜是我最喜欢的毛子乐队了。</p><p>柳拜乐队创始于1989年1月14日，乐队的名字是主唱尼古拉·拉斯托尔古耶夫为组合想出的一个词，柳拜（Любэ）用乌克兰语解释就是“任何一个人，每一个人”的意思，尼古拉·拉斯托尔古耶夫希望，每一位听者可以按照自己的想象来解释这个名称。那时的他们，年轻热血，身怀理想，他们正意气风发，想要突破美国摇滚乐队的文化入侵，用自己的语言歌唱自己的国家和人民，殊不知自己伟大的革命的想要为之奋斗一生的祖国就在两年后就要覆灭。</p><p>他们的音乐里有革命的热情、有坚毅的友情，也有俄罗斯民族特有的柔情。那些俄罗斯文学作品中经常出现的意象——连天的炮火，受伤的士兵，哀伤的手风琴，参天的白桦树，皑皑的白雪云云，也都是他们歌唱的对象。七弦琴、手风琴、军鼓以及圆号，在作品中各司其职，尽情潇洒。在那个血色得圣诞节过去后，他们的歌声里多了一份对逝去的伟大国度的惋惜，阴沉的忧郁和激昂斗志在歌曲里滚动交替……</p><p>走过高高的草丛，讲的就是战士在故土上回忆过去的思绪，柔情和坚韧在这一曲中展现得淋漓尽致。12年的现场版，主唱尼古拉已飙不起高音，伴唱也多了几分沧桑，然而青年时的热情和理想似乎从没有一点衰退。</p><div class="tabs" id="cc1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#cc1-1"><i class="fa-brands fa-youtube"></i>YouTube</button></li><li class="tab"><button type="button" data-href="#cc1-2"><i class="fa-brands fa-bilibili"></i>bilibili</button></li><li class="tab"><button type="button" data-href="#cc1-3"><i class="fa-solid fa-music"></i>网易云通道</button></li><li class="tab"><button type="button" data-href="#cc1-4"><i class="fa-solid fa-feather"></i>Lyrics</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="cc1-1"><iframe id="ytplayer" type="text/html" src="https://www.youtube.com/embed/sSY0Yn7QOxo?autoplay=1&origin=http://example.com" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="cc1-2"><p>（同一个Live版，画质稍微低一点，但是有中文）</p><iframe id="ytplayer" type="text/html" src="https://xbeibeix.com/api/bilibili/biliplayer/?url=BV1vS4y167Hv" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="cc1-3"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="86" src="//music.163.com/outchain/player?type=2&id=4151520&auto=1&height=66"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="cc1-4"><p>作词 : Гладкевич Юрий Вахтангович<br>走过高高的草丛<br>作曲 : Матвиенко Игорь Игоревич<br>走过高高的草丛<br>По высокой траве<br>走过高高的草丛<br>Автор текста (слов): Гладкевич Ю.<br>词/尤里·格拉德凯维奇<br>Композитор (музыка): Матвиенко И.<br>曲/伊戈尔·马特维延科<br>Любэ, Офицеры группы “Альфа”</p><p>演唱/俄罗斯Любэ乐队及俄罗斯联邦安全局“阿尔法”反恐怖突击队军官根纳季·索科罗夫、阿列克谢·菲拉托夫</p><p>Сколько зим, сколько лет,<br>多少年没见面，<br>Сколько вод утекло,<br>时光似水流年，<br>Сколько жизни прошло без меня,<br>多少生命里已没有我，<br>Сколько жизни ушло от меня.<br>多少生命已远离了我。</p><p>Я вернулся домой, а виски сединой<br>故乡我已归来，两鬓却已斑白<br>Припорошило в дальних краях,<br>我们散布在海角天涯，<br>Да и грудь вся в сплошных орденах.<br>而胸膛别满了军功章。</p><p>По высокой, высокой траве<br>我走在高高的草丛中<br>Я пройду в полный рост,<br>痛快地，踏上路，<br>Полной грудью вздохну воздух этих полей,<br>我要深深呼吸这草地的空气，<br>Мной давно позабытый на вкус.<br>早已淡忘许久的滋味。<br>По высокой, высокой траве<br>我走在高高的草丛中<br>Я пройду в полный рост,<br>痛快地，踏上路，<br>Полной грудью вздохну воздух этих полей,<br>我要深深呼吸这草地的空气，<br>Мной давно позабытый на вкус.<br>早已淡忘许久的滋味。</p><p>Меж высоких стогов - золотая стерня,<br>高高的干草垛，和金黄的田地间，<br>Ну-ка, стану босою ногой,<br>好吧，我要赤着脚奔走，<br>Теплотой обласкает Земля.<br>温暖而又亲切的大地。</p><p>Через пару шагов поле вспомнит меня,<br>步履走过以后，森林会记起我，<br>С возвращением, скажет, домой,<br>回家路上，说着，故乡，<br>С возвращением домой, старина.<br>回家路上唱起壮士歌。</p><p>По высокой, высокой траве<br>我走在高高的草丛中<br>Я пройду в полный рост,<br>痛快地，踏上路，<br>Полной грудью вздохну воздух этих полей,<br>我要深深呼吸这草地的空气，<br>Мной давно позабытый на вкус.<br>早已淡忘许久的滋味。</p><p>Ни кола, ни двора, кто-то скажет в укор,<br>没有汽车院宅，有人怨天尤人，<br>Ничего не нажил, не скопил,<br>无所谓没积蓄没存款，<br>Только верой и правдой служил.<br>只有信念真理在心中。<br>Но богаче меня нет на свете с тех пор,<br>可我所得的财富不在这世间，<br>Как на землю родную ступил,<br>从踏上祖国的大地起，<br>Как прошёлся по ней босиком.<br>赤着脚走过她之后起。</p><p>По высокой, высокой траве<br>我走在高高的草丛中<br>Я пройду в полный рост,<br>痛快地，踏上路，<br>Полной грудью вздохну воздух этих полей,<br>我要深深呼吸这草地的空气，<br>Мной давно позабытый на вкус.<br>早已淡忘许久的滋味。</p><p>По высокой, высокой траве<br>我走在高高的草丛中<br>Я пройду в полный рост,<br>痛快地，踏上路，<br>Полной грудью вздохну воздух этих полей,<br>我要深深呼吸这草地的空气，<br>Мной давно позабытый на вкус.<br>早已淡忘许久的滋味。</p><p>По высокой, высокой траве<br>我走在高高的草丛中<br>Я пройду в полный рост,<br>痛快地，踏上路，<br>Полной грудью вздохну воздух этих полей,<br>我要深深呼吸这草地的空气，<br>Мной давно позабытый на вкус.<br>早已淡忘许久的滋味。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="font-color-ff3732-16-давай-наяривай-font"><font color="ff3732">16  Давай-наяривай</font></h2><p><font color="ff3732">                        —— Любэ</font></p><p>《来吧，弹唱吧……》来自专辑《Кто сказал, что мы плохо жили…?》（译名《谁说我们过得不好…？》），是苏联解体后柳拜乐队发布的第一张专辑，此曲一方面展现了祖国覆灭、山河破碎、理想覆灭的迷茫，另一方面又表现出灾难后的强迫自己积极和乐观，歌曲里充满了篝火、美酒、歌唱、舞蹈、歇斯底里。“谁说我们过得不好”，是对苏联上层蠢坏领导的斥责，也是对自己曾经生活的怀念和理想的坚持。也是从这一曲开始，柳拜乐队决定了自己的去向，并不是像西方靠拢，做一个疯疯癫癫的摇滚乐队，而是坚守自己的理想，继续歌颂这片土地的坚韧，光荣，伟大，浪漫。</p><div class="tabs" id="lb2"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#lb2-1"><i class="fa-solid fa-music"></i>网易云通道</button></li><li class="tab"><button type="button" data-href="#lb2-2"><i class="fa-brands fa-youtube"></i>YouTube</button></li><li class="tab"><button type="button" data-href="#lb2-3"><i class="fa-brands fa-bilibili"></i>bilibili</button></li><li class="tab"><button type="button" data-href="#lb2-4"><i class="fa-solid fa-feather"></i>Lyrics</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="lb2-1"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="86" src="//music.163.com/outchain/player?type=2&id=4151987&auto=1&height=66"></iframe><p>（小注：Youtube版本为歌曲发行时的原版MV，bilibili版本为柳拜乐队25周年演唱会的现场版。）</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="lb2-2"><iframe id="ytplayer" type="text/html" src="https://www.youtube.com/embed/wo9PHbxOiMc?autoplay=1&origin=http://example.com" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="lb2-3"><iframe id="ytplayer" type="text/html" src="https://xbeibeix.com/api/bilibili/biliplayer/?url=BV1aW411v7Wb" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="lb2-4"><p>作词 : Шаганов Александр Алексеевич<br>作曲 : Матвиенко Игорь Игоревич<br>（Music）<br>А ну давай, давай наяривай, а ну давай, давай наяривай,<br>啊，来呀，来呀，来呀，来吧；啊，来呀，来呀，来呀，来吧；<br>А ну давай, давай наяривай гитара семиструнная.<br>啊，来呀，来呀，来呀，来吧；弹起心爱的七弦琴吧。<br>А ну давай, давай наяривай, а ну давай, давай наяривай,<br>啊，来呀，来呀，来呀，来吧；啊，来呀，来呀，来呀，来吧；<br>А ну давай, давай наяривай гитара семиструнная.<br>啊，来呀，来呀，来呀，来吧；弹起心爱的七弦琴吧。<br>Распрощался я с юностью вешней,<br>就要告别那少年时的春晓，<br>Но осталось похмелье весны.<br>但我依旧醉在青春的梦里。<br>Я гуляю весёлый и грешный,<br>欢欣自由，无拘无束的踱步，<br>По бескрайним просторам страны.<br>走过一望无际，宽广辽阔的大地。<br>Я простился с любовною дрожью,<br>告别习惯了的恐惧和颤抖，<br>Но забавы остался запас.<br>留下的只有开心的回忆。<br>По великому, по бездорожью<br>走过困难重重的崎岖小路，<br>Я пою я играю для вас.<br>我为您表演、为您歌唱。<br>А ну, давай наяривай, гитара семиструнная,<br>啊，来呀，来呀，来吧；弹起心爱的七弦琴吧。<br>Чего сидеть, да горевать, ведь ночь такая лунная.<br>不要再惋惜悲伤，独自一人，悄悄躲在月光下。<br>А ну, давай давай наяривай, гитара семиструнная,<br>啊，来呀，来呀，来玩吧；弹起心爱的七弦琴吧。<br>Чего сидеть, да горевать, ведь ночь такая лунная.<br>不要再惋惜悲伤，独自一人，悄悄躲在月光下。<br>А ну, налей-лей, не жалей, похмелье штука тонкая,<br>斟满杯中美酒，不要吝惜，欢情痛饮，一醉方休，<br>А ну, давай-ка Николай, играй гитара звонкая.<br>哎呀，快来吧，尼古拉，弹起那动听的吉他。<br>А ну, налей-лей, не жалей, похмелье штука тонкая,<br>斟满杯中美酒，不要吝惜，欢情痛饮，一醉方休，<br>А ну, давай-давай-давай, играй гитара звонкая.<br>哎呀，快来吧，来吧，弹起那动听的吉他。<br>А ну давай, давай наяривай, а ну давай, давай наяривай,<br>啊，来呀，来呀，来呀，来吧；啊，来呀，来呀，来呀，来吧；<br>А ну давай, давай наяривай гитара семиструнная.<br>啊，来呀，来呀，来呀，来吧；弹起心爱的七弦琴吧。<br>А ну давай, давай наяривай, а ну давай, давай наяривай,<br>啊，来呀，来呀，来呀，来吧；啊，来呀，来呀，来呀，来吧；<br>А ну давай, давай наяривай гитара семиструнная.<br>啊，来呀，来呀，来呀，来吧；弹起心爱的七弦琴吧。<br>Про меня не такое расскажут,<br>不要再这样对我评头论足，<br>Не такое небось наплетут.<br>也不要滔滔不绝，口若悬河。<br>Дескать бражничал, дескать куражил,<br>你只是嗜酒如命，又骄傲自满,<br>И расхаживал барином тут.<br>整天无所事事，逛来逛去。<br>Дайте, дайте мне песен расейских,<br>让我来尽情放纵，高歌一首，<br>Я босой обойду полстраны.<br>赤脚走过那小块田地，<br>Распрощался я с юностью вешней,<br>就要告别那少年时的春晓，<br>Но осталось похмелье весны.<br>但我依旧醉在青春的梦里。<br>А ну, давай наяривай, гитара семиструнная,<br>啊，来呀，来呀，来呀，来吧；弹起心爱的七弦琴吧。<br>Чего сидеть, да горевать, ведь ночь такая лунная.<br>不要再惋惜悲伤，独自一人，悄悄躲在月光下。<br>А ну, давай давай наяривай, гитара семиструнная,<br>啊，来呀，来呀，来呀，来吧；弹起心爱的七弦琴吧。<br>Чего сидеть, да горевать, ведь ночь такая лунная.<br>不要再惋惜悲伤，独自一人，悄悄躲在月光下。<br>А ну, налей-лей, не жалей, похмелье штука тонкая,<br>斟满杯中美酒，不要吝惜，欢情痛饮，一醉方休，<br>А ну, давай-ка Николай, играй гитара звонкая.<br>哎呀，快来吧，尼古拉，弹起那动听的吉他。<br>А ну, налей-лей, не жалей, похмелье штука тонкая,<br>斟满杯中美酒，不要吝惜，欢情痛饮，一醉方休，<br>А ну, давай-давай-давай, играй гитара звонкая.<br>哎呀，快来吧，来吧，弹起那动听的吉他。<br>А ну, давай-давай-давай, играй гитара звонкая.<br>哎呀，快来吧，来吧，弹起那动听的吉他。<br>（Music）</p><p>А ну, давай наяривай, гитара семиструнная,<br>啊，来呀，来呀，来呀，来吧；弹起心爱的七弦琴吧。<br>Чего сидеть, да горевать, ведь ночь такая лунная.<br>不要再惋惜悲伤，独自一人，悄悄躲在月光下。<br>А ну, налей-лей, не жалей, похмелье штука тонкая—,<br>斟满杯中美酒，不要吝惜，欢情痛饮，一醉方休------<br>А ну, давай-давай-давай, играй гитара звонкая.<br>哎呀，快来吧，来吧，弹起那动听的吉他。<br>А ну, давай наяривай, гитара семиструнная,<br>啊，来呀，来呀，来呀，来吧；弹起心爱的七弦琴吧。<br>Чего сидеть, да горевать, ведь ночь такая лунная.<br>不要再惋惜悲伤，独自一人，悄悄躲在月光下。<br>А ну, налей-лей, не жалей, похмелье штука тонкая—,<br>斟满杯中美酒，不要吝惜，欢情痛饮，一醉方休------<br>А ну, давай-давай-давай, играй гитара звонкая.<br>哎呀，快来吧，来吧，弹起那动听的吉他。<br>А ну, давай-давай-давай…<br>哎呀，快来吧，来吧…<br>А ну давай, давай наяривай, а ну давай, давай наяривай,<br>啊，来呀，来呀，来呀，来吧；啊，来呀，来呀，来呀，来吧；<br>А ну давай, давай наяривай гитара семиструнная.<br>啊，来呀，来呀，来呀，来吧；弹起心爱的七弦琴吧。<br>А ну давай, давай наяривай, а ну давай, давай наяривай,<br>啊，来呀，来呀，来呀，来吧；啊，来呀，来呀，来呀，来吧；<br>А ну давай, давай наяривай гитара семиструнная.<br>啊，来呀，来呀，来呀，来吧；弹起心爱的七弦琴吧。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="font-color-ff3732-17-берёзы-font"><font color="ff3732">17  Берёзы</font></h2><p><font color="ff3732">                        —— Любэ</font></p><p>《白桦树》是柳拜乐队的一首比较安静的民谣，大体继承了俄罗斯传统民谣的风格，曲调重复但又有略微变化，歌词朴实又充满诗意，描述离别时的各种意象，白桦树、手风琴、落叶、风，还有一些不切实际的幻想。</p><div class="tabs" id="lb2"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#lb2-1"><i class="fa-brands fa-bilibili"></i>bilibili</button></li><li class="tab"><button type="button" data-href="#lb2-2"><i class="fa-solid fa-music"></i>网易云通道</button></li><li class="tab"><button type="button" data-href="#lb2-3"><i class="fa-solid fa-feather"></i>Lyrics</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="lb2-1"><iframe id="ytplayer" type="text/html" src="https://xbeibeix.com/api/bilibili/biliplayer/?url=BV1wS4y1F7b4" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>（这个版本的配乐真的很绝）<button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="lb2-2"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="86" src="//music.163.com/outchain/player?type=2&id=4151567&auto=1&height=66"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="lb2-3"><p>作词 : Андреев Михаил Васильевич<br>作曲 : Матвиенко Игорь Игоревич</p><p>作曲 : Игорь Матвиенко</p><p>作词 : Михаил Андреев<br>Отчего так в России берёзы шумят?<br>为何白桦在俄罗斯大地沙沙作响？<br>Отчего белоствольные всё понимают?<br>为何雪白的树身无所不晓？<br>У дорог прислонившись по ветру стоят<br>沿着风的方向立在小路旁<br>И листву так печально кидают.<br>叶子掉落满地忧伤。<br>Я пойду по дороге, простору я рад,<br>沿着道路走向宽广，我心情欢畅，<br>Может это лишь всё, что я в жизни узнаю.<br>这欢乐许是生活赋予我的唯一也是所有。<br>Отчего так печальные листья летят,<br>为何树叶忧郁地飘落，<br>Под рубахою душу ласкаят?<br>抚慰灵魂深处的心伤。<br>А на сердце опять горячо-горячо,<br>我的心一次又一次火热燃烧，<br>И опять, и опять без ответа.<br>却总是得不到回响<br>А листочек с берёзки упал на плечо,<br>白桦树叶掉落肩头，<br>Он как я, оторвался от веток.<br>像我一样, 离开了生长的地方。<br>Посидим на дорожку, родная, с тобой,<br>与心爱的你坐在小路旁，<br>Ты пойми, я вернусь, не печалься, не стоит.<br>要知道我会回来，这不值得悲伤。<br>И старуха махнёт на прощанье рукой,<br>老妈妈向我挥手道别，<br>И за мною калитку закроет.<br>篱笆门在我身后缓缓关上。<br>Отчего так в России берёзы шумят?<br>为何白桦在俄罗斯大地沙沙作响？<br>Отчего хорошо так гармошка играет?<br>为何手风琴演奏得如此美妙？<br>Пальцы ветром по кнопочкам враз пролетят,<br>风儿的指尖掠过之处, 树叶儿漫天飞舞,<br>А последняя, эх, западает…<br>而最后的一片啊, 也飘落地上…<br>А на сердце опять горячо-горячо,<br>我的心一次又一次火热燃烧，<br>И опять, и опять без ответа.<br>却总是得不到回响<br>А листочек с берёзки упал на плечо,<br>白桦树叶掉落肩头，<br>Он как я, оторвался от веток.<br>像我一样, 离开了生长的地方。<br>А на сердце опять горячо-горячо,<br>我的心一次又一次火热燃烧，<br>И опять, и опять без ответа.<br>却总是得不到回响<br>А листочек с берёзки упал,<br>白桦树叶掉落肩头，<br>Он как я, оторвался от веток.<br>像我一样, 离开了生长的地方。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="font-color-ff3732-18-сталинград-font"><font color="ff3732">18  Сталинград</font></h2><p><font color="ff3732">                        —— Любэ</font></p><p>《斯大林格勒》是柳拜乐队一首比较前卫的作品，将凄厉的美声作为引子引入摇滚歌曲，其后保持着一贯的逐次推向高潮的俄罗斯民谣风格，而编曲配乐仍然采用摇滚式，意象中的火海、云端以及战争叙事仍不失毛子风味。歌曲诞生于2015年，相对柳拜乐队26岁的“高龄”，还能诞生这样的作品实属是难能可贵的。</p><div class="tabs" id="lb2"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#lb2-1"><i class="fa-brands fa-bilibili"></i>bilibili</button></li><li class="tab"><button type="button" data-href="#lb2-2"><i class="fa-solid fa-music"></i>网易云通道</button></li><li class="tab"><button type="button" data-href="#lb2-3"><i class="fa-solid fa-feather"></i>Lyrics</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="lb2-1"><iframe id="ytplayer" type="text/html" src="https://xbeibeix.com/api/bilibili/biliplayer/?url=BV17t411i7xW" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="lb2-2"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="86" src="//music.163.com/outchain/player?type=2&id=31587280&auto=1&height=66"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="lb2-3"><p>作词 : Арсенев Константин Борисович<br>作曲 : Матвиенко Игорь Игоревич<br>На Мамаевом кургане<br>在马马耶夫的土岗上<br>Тишина стоит такая,<br>良久的沉默伫立着…<br>Тишина стоит такая<br>良久的沉默伫立着…<br>На Мамаевом кургане,<br>在马马耶夫的土岗上<br>Время, затаив дыханье,<br>掩盖着历史的沧桑气息<br>Время, затаив дыханье,<br>掩盖着历史的沧桑气息<br>Смотрит молча в облака.<br>默不作声地瞻望云端…<br>Сталинград стёрт и выжжен,<br>斯大林格勒,断壁残垣的焦土<br>Он живёт только в сердце<br>那座坚不可摧的&quot;钢铁&quot;城市<br>Тех, кого не сломать.<br>已经仅仅是我心存的幻象<br>Всё, что выше - сплошь огонь,<br>登高俯瞰——满城火海,<br>Только землю<br>不见大地<br>Под огнём - не отдать.<br>趟过火海——没有退路<br>Сталинград! Удержаться<br>斯大林格勒！矗立在火海之中<br>И огнём отхаркаться.<br>发出阵阵哀号<br>Сталинград! Хрипы раций,<br>斯大林格勒！从地下电台中<br>Под землёй закопаться,<br>传出沙哑的呼叫<br>Из земли в бой вставать.<br>还有地面上的奋起保卫(声)<br>Не пытайтесь лезть войной<br>不会再陷入战争的折磨<br>На Россию<br>——在俄罗斯的大地上<br>Никогда, никогда!<br>——永远不会，永远不会！<br>Сталинград!<br>斯大林格勒！<br>Из души изгоняя страх,<br>把惊厥恐慌从内心赶出，<br>Чтоб отвагою лишь одной<br>仅仅留下你的勇敢无畏<br>Напугать и сломать врага,<br>还有让一切敌人的闻风丧胆<br>Чтоб запомнили<br>留下血的教训<br>Сталинград!<br>斯大林格勒<br>И приходится каждый день,<br>在每到来的新的一天里<br>Покидая ряды людей,<br>留在这里的人民群众<br>Стать героями из легенд.<br>继续书写着着英雄的传奇<br>Сталинград!<br>斯大林格勒！<br>Сталинград!<br>斯大林格勒！</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>相比于中国人的含蓄，俄罗斯人明显更愿意提起战争，更愿意歌颂自己的英雄，中国如此多的革命歌曲，也没有见过一首歌颂淞沪会战或者百团大战的。而毛子却毫不忌讳，苏德战争的各处重要战役都是各大作曲家频频描绘的对象，肖斯塔科维奇的第七交响曲（列宁格勒交响曲）便是描绘最成功的作品之一。</p><h2 id="font-color-008384-19-седьмая-симфония-шостаковича-font"><font color="008384">19  Седьмая симфония шостаковича</font></h2><p><font color="008384">                        —— Шостакович</font></p><p>老肖的传世佳作好吗，充满了革命热情和道路理性的作品。<br>曲中，老肖自由潇洒地表现细腻和宽广，在雄伟壮阔中又充满着新生的活力，突然的节奏反差却不会忘记鼓点的底色，时而又有调性的游离却不会丢弃主部的旋律，将浪漫性和先锋性的交融展现得淋漓尽致。<br>第一乐章沉寂中单簧管与双簧管的一呼一应，一点点带动其他乐器奏响主题的那段为最绝，其与贝爷在他的第七交响曲第一乐章展开部的赋格有着异曲同工之妙。相比之下，贝爷的音乐更加饱满充实，而老肖的处理更加写意洒脱。<br>第四乐章的末尾，一次次推向新的高潮，作品在凯歌的辉煌中结束。老肖用他的作品证明，现代音乐的诞生其实是浪漫主义的延续，而现代主义也不是完全的虚无与抽象，而是写意的浪漫展现。<br>说来惭愧，老肖这样的作曲家也是很晚我才从下水道里捡起来的，可能那时候的我还不太懂现代主义，也许现在也不懂，但在进行中尽情去潇洒写意，也从来不忘记自己的主题，这样的音乐是我极度欣赏的——因为这，也像极了我向往的生活的样子。<br>即使在潇洒和热情褪去多时，那“邦~邦~邦邦邦”的主题还是会在我耳边响起，就像莫扎特的“顶丁，顶丁，顶丁顶丁钉叮”和贝多芬的“噔噔噔等，噔噔噔凳”一样被记住。即使在路上如何放浪形骸，总有一些东西该被留下、该被记住，难道你我的生活本不该如此吗？</p><div class="tabs" id="st1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#st1-1"><i class="fa-brands fa-bilibili"></i>bilibili</button></li><li class="tab"><button type="button" data-href="#st1-2"><i class="fa-brands fa-youtube"></i>YouTube</button></li><li class="tab"><button type="button" data-href="#st1-3"><i class="fa-solid fa-music"></i>网易云通道</button></li><li class="tab"><button type="button" data-href="#st1-4"><i class="fa-solid fa-feather"></i>Lyrics</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="st1-1"><iframe id="ytplayer" type="text/html" src="https://xbeibeix.com/api/bilibili/biliplayer/?url=BV1nJ411D74N" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="st1-2"><iframe id="ytplayer" type="text/html" src="https://www.youtube.com/embed/GB3zR_X25UU?autoplay=1&origin=http://example.com" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="st1-3"><p>（第一乐章）</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="86" src="//music.163.com/outchain/player?type=2&id=32711574&auto=1&height=66"></iframe><p>（第二乐章）</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="86" src="//music.163.com/outchain/player?type=2&id=32711577&auto=1&height=66"></iframe><p>（第三乐章）</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="86" src="//music.163.com/outchain/player?type=2&id=32711576&auto=1&height=66"></iframe><p>（第四乐章）</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="86" src="//music.163.com/outchain/player?type=2&id=32711575&auto=1&height=66"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="st1-4"><p><del>你在期待什么?</del></p><p>既然都翻到这里了，那我就夹带一点私货。<br>这首歌来自挪威的奥斯陆爱乐乐团（Oslo Philharmonic Orchestra），是我很喜欢的一个乐团，其前身是挪威作曲家格里格（就是写《山魔王的宫殿》那位，也是一首很带感的曲子）主持建立的奥斯陆音乐学会，后来逐渐发展终于在欧洲群星璀璨的诸多乐队中占有一席之地，在马里斯·扬松斯的带领下其又迎来了自己的荣耀时刻，我前面提到的贝七就数他们的版本为最佳。<br>但是根据英国《留声机》杂志的评选（目前流传最广的榜单），其未有在列TOP20，我觉得以奥斯陆爱乐乐团的能力，进可展现先锋，退可极尽浪漫，排进前十其实不成问题。榜单第一的阿姆斯特丹皇家大会堂管弦乐团当之无愧，毕竟从乐手水平到顶级指挥家马里斯·扬颂斯（对，就是之前带领奥爱崛起那位，他跑路了），都是无可挑剔；然后是传统列强柏林爱乐，当时的柏林爱乐处于西蒙拉特的黄金时代，也坐稳了第二把交椅，要是换成现在的基里尔·别特连科大聪明估计也得掉到后面去；维也纳爱乐乐团，不知道为什么现在它的消息好像特别少，表现也没有很突出，感觉还是靠之前施特劳斯、勃拉姆斯这些响当当的名号撑起的门面；后面还有一些我名字都没听说过的乐团，等以后闲下来了，我也许会好好捋一捋。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>当然，恕某不才，老肖已经是我能接受的现代主义的极限了，至于勋伯格这样疯癫的怪胎，以及我真的很想问一句“宁会拉小提琴吗”的贝尔格，目前还在我的接受范围之外。</p><h2 id="font-color-008384-20-гадриэл-font"><font color="008384">20  Гадриэл</font></h2><p><font color="008384">                        —— Шостакович</font></p><p>所以，不如来点优美的小提琴吧。<br>《牛虻》是老肖为苏联电影《牛虻》编配的乐曲，后者系爱尔兰女作家艾捷尔·丽莲·伏尼契创作的长篇小说，讲述了意大利革命党人历经种种磨难，终于成为坚定的共产主义者的故事，其展现了信仰、斗争、革命、牺牲的主题，也是《钢铁》中所提到的著作。<br>emmmmm…不过这都不重要，在这首安静的小品中，没有掺杂太多。</p><div class="tabs" id="st2"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#st2-1"><i class="fa-solid fa-music"></i>网易云通道</button></li><li class="tab"><button type="button" data-href="#st2-2"><i class="fa-brands fa-youtube"></i>YouTube</button></li><li class="tab"><button type="button" data-href="#st2-3"><i class="fa-solid fa-feather"></i>Lyrics</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="st2-1"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="86" src="//music.163.com/outchain/player?type=2&id=29786932&auto=1&height=66"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="st2-2"><iframe id="ytplayer" type="text/html" src="https://www.youtube.com/embed/Nqw0ThjtxyY?autoplay=1&origin=http://example.com" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="st2-3"><p>真的没有东西了</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="font-color-f54c42-21-all-fall-down-font"><font color="f54c42">21  All Fall Down</font></h2><p><font color="f45d32">                        —— OneRepublic</font></p><p>好的，聊完小提琴，我们把目光转向大提琴。<br>在我接触的乐队里，私以为OneRepublic的大提琴是最好的（虽然它没有在每首歌中出现），不论是仅仅作为前奏和尾声，还是贯穿全曲，抑或是Live上的临场发挥，只要那把黑色的大提琴一发出声音，共和乐队的灵魂就已经注入了灵魂。<br>从成名作《Apologize》，到前奏即动人的《Secrets》，再到抒情向的《Au Revoir》，凡大提琴所在，皆成性格，而我今天要推荐的，是这首低迷但怀有热情的作品：《All Fall Donw》。</p><div class="tabs" id="st2"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#st2-1"><i class="fa-solid fa-music"></i>网易云通道</button></li><li class="tab"><button type="button" data-href="#st2-2"><i class="fa-brands fa-youtube"></i>YouTube</button></li><li class="tab"><button type="button" data-href="#st2-3"><i class="fa-solid fa-feather"></i>Lyrics</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="st2-1"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="86" src="//music.163.com/outchain/player?type=2&id=4224630&auto=1&height=66"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="st2-2"><iframe id="ytplayer" type="text/html" src="https://www.youtube.com/embed/S6STmaNSP-Y?autoplay=1&origin=http://example.com" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="st2-3"><p>step out the door and it feels like rain<br>你刚踏出门，外面就在滴雨，<br>that’s the sound, that’s the sound<br>那些细雨声绵绵不断<br>on your windowpane<br>击打在你的窗户上。<br>take to the streets, but you can’t ignore<br>虽游荡在街头，但你却不得忽视<br>that’s the sound, that’s the sound<br>那些源源不断流言蜚语<br>you’re waiting for<br>你只有默默等待着<br>if ever your world starts crashing down<br>是否曾经你要放弃过<br>Whenever your world starts crashing down<br>每当你将决定罢休时<br>Whenever your world starts crashing down<br>每当你将面临崩溃时<br>that’s where you’ll find me yeah~~<br>那时你就会发现我</p><p>God love your soul and your aching bones<br>上帝怜悯你的灵魂和你那饱经风霜的身体<br>take a breath, take a step<br>深吸一大口气，迈出一大步<br>meet me down below<br>让我做你的依靠<br>everyone’s the same our fingers to our toes<br>每个人从手到脚都是一样<br>we just can’t get it right<br>我们只是得不到认可<br>but we’re on the road<br>但我们依旧在拼搏<br>if ever your world starts crashing down<br>是否曾经你要放弃过<br>Whenever your world starts crashing down<br>每当你将决定罢休时<br>Whenever your world starts crashing down<br>每当你将面临崩溃时<br>that’s where you’ll find me yeah~~<br>那时你就会发现我</p><p>lost till your’re found<br>迷失，直到找到自我<br>swim till you drown<br>潜行，直到溺死<br>know that we all fall down<br>知道我们都曾跌倒过<br>love till you hate<br>喜爱，直到讨厌<br>strong till you break<br>坚强，直到疲惫<br>know that we all fall down<br>知道我们都曾经跌倒了<br>if ever your world starts crashing down<br>是否曾经你要放弃过<br>Whenever your world starts crashing down<br>每当你将决定罢休时<br>if ever your world starts crashing down<br>每当你将面临崩溃时<br>that’s where you’ll find find me<br>那时你就会发现我</p><p>lost till your’re found<br>迷失，直到找到自我<br>swim till you drown<br>潜行，直到溺死<br>know that we all fall down<br>知道我们都曾跌倒过<br>love till you hate<br>喜爱，直到讨厌<br>strong till you break<br>坚强，直到疲惫<br>know that we all fall down<br>知道我们都曾跌倒过</p><p>all fall down<br>都曾跌倒过<br>all fall down<br>都曾失落过<br>all fall down~~<br>都曾伤心过~~<br>all fall down<br>都曾失败过<br>all fall down<br>都曾颓废过<br>all fall down~~<br>都曾迷茫过~~<br>lost till your’re found<br>迷失，直到找到自我<br>swim till you drown<br>潜行，直到溺死<br>know that we all fall down<br>知道我们都曾跌倒过<br>love till you hate<br>喜爱，直到讨厌<br>strong till you break<br>坚强，直到疲惫<br>know that we all fall down<br>知道我们都曾跌倒过~~</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="font-color-34bd6c-22-no-surprises-font"><font color="34bd6c">22  No Surprises</font></h2><p><font color="34bd6c">                        —— Radiohead</font></p><p>这首歌来自一个比较小众的乐队——Radiohead，粉丝们爱称它为捞比乐队，一方面因为他们主打的歌都是《Creep》之流比较丧的歌，另一方面就，即使在演唱会版本他们仍然都保持着自己的懒洋洋唱歌法，甚至还盖不过台下的呼声，还有人说是因为主唱的屌丝气质？不管怎么说，很有意思的乐队吧。<br>关于《No Surprises》，它也是完全继承了捞比乐队的丧的气质。一开始的钢片琴给人以温馨的圣诞节感觉，然后就注入了很丧的歌词和主唱的懒洋洋唱法。即使到后面高潮我也一点也不激动，诶，就是玩。</p><div class="tabs" id="st2"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#st2-1"><i class="fa-solid fa-music"></i>网易云通道</button></li><li class="tab"><button type="button" data-href="#st2-2"><i class="fa-brands fa-bilibili"></i>bilibili</button></li><li class="tab"><button type="button" data-href="#st2-3"><i class="fa-solid fa-feather"></i>Lyrics</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="st2-1"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="86" src="//music.163.com/outchain/player?type=2&id=22497479&auto=1&height=66"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="st2-2"><iframe id="ytplayer" type="text/html" src="https://xbeibeix.com/api/bilibili/biliplayer/?url=BV1gL411G73i" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="st2-3"><p>作词 : Thom Yorke/Jonny Greenwood/Ed O’Brien/Phil Selway/Colin Greenwood<br>作曲 : Thom Yorke/Jonny Greenwood/Ed O’Brien/Phil Selway/Colin Greenwood<br>A heart that’s full up like a landfill<br>心被世俗填满 臭如垃圾场<br>a job that slowly kills you<br>单调的工作 让你慢性死亡<br>bruises that won’t heal<br>你受伤到无药可救<br>You look so tired-unhappy<br>你看起来 疲惫而忧伤<br>bring down the government<br>我们一起 推翻政府吧<br>they don’t they don’t speak for us<br>他们不会 不会为我们说话<br>I’ll take a quiet life<br>我将获得 平静的生活<br>a handshake of carbon monoxide<br>让一氧化碳和我握手（慢慢杀死我）<br>no alarms and no surprises<br>没有警报 没有惊恐<br>no alarms and no surprises<br>没有警报 没有惊恐<br>no alarms and no surprises<br>没有警报 没有惊恐<br>Silent silence<br>平静 我很平静<br>This is my final fit<br>这是我最后一次抽搐<br>my final bellyache with<br>最后一次满腹牢骚<br>no alarms and no surprises<br>不要害怕 不要惊慌<br>no alarms and no surprises<br>不要害怕 不要惊慌<br>no alarms and no surprises please<br>不要害怕 不要惊慌 拜托了<br>Such a pretty house<br>如此漂亮的别墅<br>and such a pretty garden<br>如此美丽的花园<br>No alarms and no surprises<br>悄无声息 无需惊恐<br>no alarms and no surprises<br>悄无声息 无需惊恐<br>no alarms and no surprises please<br>悄无声息 无需惊恐 拜托了</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="font-color-233dbd-23-не-гляди-назад-font"><font color="233dbd">23  Не гляди назад</font></h2><p><font color="233dbd">                        —— Михаил Зив</font></p><p>一首简单的俄式民谣，忧伤的旋律，唯美的歌词，毛子的作品总是对爱情有独特的潇洒和柔情，从《猎人笔记》第十八篇中，“你选择向命运妥协，而我愿牺牲我的一切追逐我们的爱情”的悲剧故事，到《山楂树》中陷入三角恋的女孩的纠结，太喜欢这样带着淡淡忧伤又有浅浅坚强的唯美了。<br>再说回这首歌，不仅旋律继承了俄式小调的婉转忧伤，单是歌词也足够成为一首不错的小诗，没有什么故事背景，只是抒发我分别时的故作坚强：“就依我那么一次。”</p><div class="tabs" id="st2"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#st2-1"><i class="fa-solid fa-music"></i>网易云通道</button></li><li class="tab"><button type="button" data-href="#st2-2"><i class="fa-solid fa-feather"></i>Lyrics</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="st2-1"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="86" src="//music.163.com/outchain/player?type=2&id=5221430&auto=1&height=66"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="st2-2"><p>Не гляди назад, не гляди -<br>可别回头看呀回头看<br>Просто имена переставь.<br>随意的改变他们的名字<br>Спят в твоих глазах, спят дожди,<br>沉睡在你的视线中，在那雨声中<br>Ты не для меня их оставь.<br>你是因为我而离开<br>Перевесь подальше ключи,<br>钥匙挂在更远的地方<br>Адрес поменяй, поменяй!<br>我的地址已经改变啊改变<br>А теперь подольше молчи -<br>但现在请你别出声<br>Это для меня.<br>就依我这么一次<br>Мне-то все равно, все равно,<br>我并不无所谓呀并不无所谓<br>Я уговорю сам себя,<br>我会安慰我自己<br>Будто все за нас решено,<br>仿佛我们所有的决定<br>Будто все ворует судьба.<br>还有那肮脏的命运<br>Только ты не веришь в судьбу,<br>只有你不相信那命运<br>Значит, просто, выбрось ключи.<br>这意味着什么，很简单，扔掉这钥匙<br>Я к тебе в окошко войду…<br>我会进入心灵的窗户<br>А теперь молчи.<br>现在，请安静<br>Перевесь подальше ключи,<br>钥匙挂在更远的地方<br>Адрес поменяй, поменяй!<br>我的地址已经改变啊改变<br>А теперь подольше молчи -<br>但现在请你别出声<br>Это для меня.<br>就依我这么一次</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="font-color-233dbd-24-вечер-бродит-font"><font color="233dbd">24  Вечер бродит</font></h2><p><font color="233dbd">                        —— Ада Якушева</font></p><p>另一首同样来自小蓝碟专辑的作品，也是苏联时代俄罗斯民谣的采风。如画的旋律，如诗的歌词，愿与君共赏。</p><div class="tabs" id="st2"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#st2-1"><i class="fa-solid fa-music"></i>网易云通道</button></li><li class="tab"><button type="button" data-href="#st2-2"><i class="fa-solid fa-feather"></i>Lyrics</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="st2-1"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="86" src="//music.163.com/outchain/player?type=2&id=5221433&auto=1&height=66"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="st2-2"><p>Вечер бродит по лесным дорожкам.<br>傍晚漫步在森林的幽深小道<br>Ты ведь, вроде, любишь вечера.<br>夜晚与深爱的你共游<br>Подожди тогда еще немножко,<br>我希望时间能更慢一点<br>Посидим с товарищами у костра.<br>我们与同志们围在篝火旁<br>Подожди тогда еще немножко,<br>我希望时间能更慢一点<br>Посидим с товарищами у костра.<br>我们与同志们围在篝火旁<br>Вслед за песней позовут ребята<br>我们轻吟浅唱<br>В неизвестные еще края,<br>在我们未知的世界漫游<br>И тогда над крыльями заката<br>在夕阳下我们的脸辉映着亮芒<br>Вспыхнет яркой звездочкой мечта моя.<br>夜幕中闪闪发亮的星星承载着我们的梦想<br>И тогда над крыльями заката<br>在夕阳下我们的脸辉映着亮芒<br>Вспыхнет яркой звездочкой мечта моя.<br>夜幕中闪闪发亮的星星承载着我们的梦想<br>Вижу целый мир в глазах тревожных<br>这是在纷攘不安的世界中只有我们知道的世外桃源<br>В этот час на берегу крутом…<br>它就在这个陡峭的河岸上<br>Не смотри ты так неосторожно -<br>看你粗心的可爱模样<br>Я могу подумать что-нибудь не то.<br>真让我动心<br>Не смотри ты так неосторожно -<br>看你粗心的可爱模样<br>Я могу подумать что-нибудь не то.<br>真让我动心<br>Вечер бродит по лесным дорожкам.<br>傍晚漫步在森林的幽深小道<br>Ты ведь, вроде, любишь вечера.<br>夜晚与深爱的你共游<br>Подожди тогда еще немножко,<br>我希望时间能更慢一点<br>Посидим с товарищами у костра.<br>我们与同志们围在篝火旁<br>Подожди тогда еще немножко,<br>我希望时间能更慢一点<br>Посидим с товарищами у костра.<br>我们与同志们围在篝火旁</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="font-color-ff3732-25-конь-font"><font color="ff3732">25  Конь</font></h2><p><font color="ff3732">                        —— Николай Расторгуев / Игорь Матвиенко / Lube / Детский хор радио и телевидения России / Государственный академический русский хор имени А.В. Свешникова</font></p><p>《马儿》一曲来自俄罗斯民间的歌谣，由柳拜乐队改编为合唱曲。旋律恢弘壮丽而又忧伤婉转，典型的俄式小调风格，也同样采用俄罗斯民谣常用的推高式进行，当结尾的高潮响起，给人激情澎湃之感。来吧，为我们的土地高歌，就在高歌中结束我们的音乐会吧。</p><div class="tabs" id="st2"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#st2-1"><i class="fa-brands fa-youtube"></i>YouTube</button></li><li class="tab"><button type="button" data-href="#st2-2"><i class="fa-brands fa-bilibili"></i>bilibili</button></li><li class="tab"><button type="button" data-href="#st2-3"><i class="fa-solid fa-music"></i>网易云通道</button></li><li class="tab"><button type="button" data-href="#st2-4"><i class="fa-solid fa-feather"></i>Lyrics</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="st2-1"><iframe id="ytplayer" type="text/html" src="https://www.youtube.com/embed/QmRMF_6vb0g?autoplay=1&origin=http://example.com" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="st2-2"><iframe id="ytplayer" type="text/html" src="https://xbeibeix.com/api/bilibili/biliplayer/?url=BV1F341127FG" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="st2-3"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="86" src="//music.163.com/outchain/player?type=2&id=1440791983&auto=1&height=66"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="st2-4"><p>作词 : Александр Шаганов<br>作曲 : Игорь Матвиенко<br>Выйду ночью в поле с конём<br>随马儿从田野走过<br>Ночкой тёмной тихо пойдём<br>走在寂静的黑夜中<br>Мы пойдём с конём по полю вдвоём<br>我们随马儿从田野走过<br>Мы пойдём с конём по полю вдвоём<br>我们随马儿从田野走过<br>Мы пойдём с конём по полю вдвоём<br>我们随马儿从田野走过<br>Мы пойдём с конём по полю вдвоём<br>我们随马儿从田野走过<br>Ночью в поле звёзд благодать<br>星光如上天的恩惠<br>В поле никого не видать<br>田野之上一望无际<br>Только мы с конём по полю идём<br>唯有我们一同走过田野<br>Только мы с конём по полю идём<br>唯有我们一同走过田野<br>Только мы с конём по полю идём<br>唯有我们一同走过田野<br>Только мы с конём по полю идём<br>唯有我们一同走过田野<br>Сяду я верхом на коня (да на коня)<br>我翻身骑在马背上<br>Ты неси по полю меня<br>请你带我走过田野<br>По бескрайнему полю моему<br>带我走过这无边的田野<br>По бескрайнему полю моему<br>带我走过这无边的田野<br>Дай-ка я разок посмотрю<br>请你带我去看看那<br>Где рождает поле зарю (рождает поле)<br>田野上初生的黎明<br>Ай брусничный цвет, алый да рассвет<br>那如火焰般鲜红的黎明<br>Али есть то место али его нет<br>即便一无所有我也愿前往<br>Ай брусничный цвет, алый да рассвет<br>那如火焰般鲜红的黎明<br>Али есть то место али его нет<br>即便一无所有我也愿前往<br>Полюшко моё родники<br>远方田野上的小溪<br>Дальних деревень огоньки<br>远方村庄里的灯光<br>Золотая рожь да кудрявый лён<br>金色麦穗和弯曲亚麻<br>Я влюблён в тебя Россия влюблён<br>我爱你，俄罗斯，你在我心中<br>Золотая рожь да кудрявый лён<br>金色麦穗和弯曲亚麻<br>Я влюблён в тебя Россия влюблён<br>我爱你，俄罗斯，你在我心中<br>Будет добрым год хлебород<br>愿新的一年好收成<br>Было всяко, всяко пройдёт<br>过去已然成为过去<br>Пой злотая рожь пой кудрявый лён<br>为麦穗高歌，为亚麻高歌<br>Пой о том как я в Россию влюблён<br>为我心中的俄罗斯高歌<br>Пой злотая рожь пой кудрявый лён<br>为麦穗高歌，为亚麻高歌<br>Мы идём с конём по полю вдвоём<br>我们随马儿从田野走过</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><br><hr><br><p align="center"><font size="36" color="8f71bb">加演</font></p><p>没有加演的音乐会怎么能叫音乐会呢（手动doge）</p><p><font size="5" color="f1af09"><strong>Шостакович Вальс 2</strong></font><br><font color="f1af09">                        —— Шостакович</font></p><p>加曲第一首，送给肖斯塔科维奇，我的老肖入坑曲。曾经的肖斯塔科维奇是被我和勋伯格一样扔进下水道的作曲家，听音乐不为了享受优美的旋律，那还能为了什么呢？正是这首曲子让我找到了他的浪漫与热情，让我感受到他独有的魅力。</p><div class="tabs" id="jq1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#jq1-1"><i class="fa-brands fa-bilibili"></i>bilibili</button></li><li class="tab"><button type="button" data-href="#jq1-2"><i class="fa-brands fa-youtube"></i>YouTube</button></li><li class="tab"><button type="button" data-href="#jq1-3"><i class="fa-solid fa-music"></i>网易云通道</button></li><li class="tab"><button type="button" data-href="#jq1-4"><i class="fa-solid fa-feather"></i>Lyrics</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="jq1-1"><iframe id="ytplayer" type="text/html" src="https://xbeibeix.com/api/bilibili/biliplayer/?url=BV1ix41197xe" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="jq1-2"><iframe id="ytplayer" type="text/html" src="https://www.youtube.com/embed/xA5op7h99iY?autoplay=1&origin=http://example.com" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="jq1-3"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="86" src="//music.163.com/outchain/player?type=2&id=1807783028&auto=1&height=66"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="jq1-4"><p>你在期待什么</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p><font size="5" color="f1af09"><strong>Fix You</strong></font><br><font color="f1af09">                        —— Coldplay/Brooklyn Duo</font></p><p>一对来自油管的夫妇up和他们的朋友们，不得不说我真的太爱<strong>大提琴+钢琴</strong>了，他们的作品都值得一看。</p><div class="tabs" id="jq2"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#jq2-1"><i class="fa-brands fa-youtube"></i>YouTube</button></li><li class="tab"><button type="button" data-href="#jq2-2"><i class="fa-brands fa-bilibili"></i>bilibili</button></li><li class="tab"><button type="button" data-href="#jq2-3"><i class="fa-solid fa-feather"></i>Lyrics</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="jq2-1"><iframe id="ytplayer" type="text/html" src="https://www.youtube.com/embed/XAb6MgJAvBg?autoplay=1&origin=http://example.com" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="jq2-2"><iframe id="ytplayer" type="text/html" src="https://xbeibeix.com/api/bilibili/biliplayer/?url=BV1V44y1t7uv" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="jq2-3"><p><a href="https://www.youtube.com/c/BrooklynDuo/videos?view=0&amp;sort=p&amp;shelf_id=0">https://www.youtube.com/c/BrooklynDuo/videos?view=0&amp;sort=p&amp;shelf_id=0</a><br>快去看看</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p><font size="5" color="f1af09"><strong>奇迹再现</strong></font><br><font color="f1af09">                        —— JsonHuangMusic</font></p><p>最后，一首怀旧曲送给大家！</p><div class="tabs" id="jq2"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#jq2-1"><i class="fa-brands fa-bilibili"></i>bilibili</button></li><li class="tab"><button type="button" data-href="#jq2-2"><i class="fa-solid fa-feather"></i>Lyrics</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="jq2-1"><iframe id="ytplayer" type="text/html" src="https://xbeibeix.com/api/bilibili/biliplayer/?url=BV1ih411H7iz" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="jq2-2"><p>请认准左边唯一通道</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>看到这里一定不容易吧，咱们明年见！</p><br>__________________<p>By <a href="https://signalista.github.io">Signalista</a></p><br>]]></content>
      
      
      <categories>
          
          <category> 艺术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 音乐 </tag>
            
            <tag> 杂谈 </tag>
            
            <tag> 年终音乐会 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【转载】Python学习笔记</title>
      <link href="/2022/04/27/Py01/"/>
      <url>/2022/04/27/Py01/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1><font color="Purple">1 入门基础</font></h1><h2 id="font-color-118899-1-1-标识符-font"><font color="#118899">1.1 标识符</font></h2><p>标识符是编程时使用的名字，用于给变量、函数、语句块等命名，Python 中标识符由字母、数字、下划线组成，不能以数字开头，区分大小写。</p><p>以下划线开头的标识符有特殊含义，单下划线开头的标识符，如：</p><ul><li><code>_xxx</code> ，表示不能直接访问的类属性，需通过类提供的接口进行访问，不能用 <code>from xxx import *</code> 导入；</li><li>双下划线开头的标识符，如：<code>__xx</code>，表示私有成员；</li><li>双下划线开头和结尾的标识符，如：<code>__xx__</code>，表示 Python 中内置标识，如：<code>__init__()</code> 表示类的构造函数。</li></ul><h2 id="font-color-118899-1-2-关键字-font"><font color="#118899">1.2 关键字</font></h2><table><thead><tr><th></th><th></th><th>关键字表</th><th></th><th></th><th></th></tr></thead><tbody><tr><td><strong>and</strong></td><td><strong>exec</strong></td><td><strong>not</strong></td><td><strong>assert</strong></td><td><strong>finally</strong></td><td><strong>or</strong></td></tr><tr><td><strong>break</strong></td><td><strong>for</strong></td><td><strong>pass</strong></td><td><strong>class</strong></td><td><strong>from</strong></td><td><strong>print</strong></td></tr><tr><td><strong>continue</strong></td><td><strong>global</strong></td><td><strong>raise</strong></td><td><strong>def</strong></td><td><strong>if</strong></td><td><strong>return</strong></td></tr><tr><td><strong>del</strong></td><td><strong>import</strong></td><td><strong>try</strong></td><td><strong>elif</strong></td><td><strong>in</strong></td><td><strong>while</strong></td></tr><tr><td><strong>else</strong></td><td><strong>is</strong></td><td><strong>with</strong></td><td><strong>except</strong></td><td><strong>lambda</strong></td><td><strong>yield</strong></td></tr></tbody></table><p>上面表中是 Python 中的关键字（保留字），我们在自定义标识符时不能使用关键字。</p><h2 id="font-color-118899-1-3-数据类型-font"><font color="#118899">1.3 数据类型</font></h2><ul><li><p><strong>整数</strong>：可以为任意大小、包含负数</p></li><li><p><strong>浮点数</strong>：就是小数</p></li><li><p><strong>字符串</strong>：以单引号 <code>'</code>、双引号<code>&quot;</code>、三引号 <code>'''</code> 或 <code>&quot;&quot;&quot;</code>括起来的文本</p></li></ul><p>引号的开始与结束须类型相同，三引号可以由多行组成。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">id</span> = <span class="string">&#x27;001&#x27;</span></span><br><span class="line"></span><br><span class="line">name = <span class="string">&quot;张飞&quot;</span></span><br><span class="line"></span><br><span class="line">skill = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">咆哮</span></span><br><span class="line"><span class="string">替身&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p><strong>布尔</strong>：只有 <code>True</code>、<code>False</code> 两种值</p></li><li><p><strong>空值</strong>：用 <code>None</code> 表示</p></li><li><p><strong>变量</strong>：是可变的</p></li><li><p><strong>常量</strong>：不可变</p></li></ul><h2 id="font-color-118899-1-4-输入输出-font"><font color="#118899">1.4 输入输出</font></h2><p>Python 输出使用 print()，内容加在括号中即可。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Hello Python&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Python 提供了一个 input()，可以让用户输入字符串，并存放到一个变量里。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="built_in">input</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Hi&#x27;</span>,name)</span><br></pre></td></tr></table></figure><h2 id="font-color-118899-1-5-运算符-font"><font color="#118899">1.5 运算符</font></h2><p>常用运算符</p><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>+</td><td>相加</td><td>a + b</td></tr><tr><td>-</td><td>相减</td><td>a - b</td></tr><tr><td>*</td><td>相乘</td><td>a * b</td></tr><tr><td>/</td><td>相除</td><td>a / b</td></tr><tr><td>%</td><td>取模</td><td>a % b</td></tr><tr><td>**</td><td>幂</td><td>a**b 表示 a 的 b 次幂</td></tr><tr><td>//</td><td>取整除</td><td>9 // 4 结果为 2</td></tr><tr><td>==</td><td>是否相等</td><td>a == b</td></tr><tr><td>!=</td><td>是否不等于</td><td>a != b</td></tr><tr><td>&gt;</td><td>是否大于</td><td>a &gt; b</td></tr><tr><td>&gt;=</td><td>是否大于等于</td><td>a &gt;= b</td></tr><tr><td>&lt;=</td><td>是否小于等于</td><td>a &lt;= b</td></tr><tr><td>=</td><td>简单的赋值运算符</td><td>a = b + c</td></tr><tr><td>+=</td><td>加法赋值运算符</td><td>a += b 等效于 a = a + b</td></tr><tr><td>-=</td><td>减法赋值运算符</td><td>a -= b 等效于 a = a - b</td></tr><tr><td>*=</td><td>乘法赋值运算符</td><td>a *= b 等效于 a = a * b</td></tr><tr><td>/=</td><td>除法赋值运算符</td><td>a /= b 等效于 a = a / b</td></tr><tr><td>%=</td><td>取模赋值运算符</td><td>a %= b 等效于 a = a % b</td></tr><tr><td>**=</td><td>幂赋值运算符</td><td>a **= b 等效于 a = a ** b</td></tr><tr><td>//=</td><td>取整除赋值运算符</td><td>a //= b 等效于 a = a // b</td></tr><tr><td>&amp;</td><td>与</td><td>a &amp; b</td></tr><tr><td>丨</td><td>或</td><td>a 丨 b</td></tr><tr><td>^</td><td>异或</td><td>a ^ b</td></tr><tr><td>~</td><td>取反</td><td>~a</td></tr><tr><td>&lt;&lt;</td><td>左移动</td><td>a &lt;&lt; 3</td></tr><tr><td>&gt;&gt;</td><td>右移动</td><td>a &gt;&gt; 3</td></tr><tr><td>and</td><td>布尔类型与</td><td>a and b</td></tr><tr><td>or</td><td>布尔类型或</td><td>a or b</td></tr><tr><td>not</td><td>布尔类型非</td><td>not a</td></tr><tr><td>is</td><td>判断两个标识符是否引用同一个对象</td><td>a is b</td></tr><tr><td>is not</td><td>判断两个标识符是否引用不同对象</td><td>a is not b</td></tr></tbody></table><p>运算符优先级</p><table><thead><tr><th>运算符</th><th>描述（由上至下对应优先级由高到低）</th></tr></thead><tbody><tr><td>**</td><td>幂运算</td></tr><tr><td>~ + -</td><td>取反、正号、负号</td></tr><tr><td>* / % //</td><td>乘、除、取模、取整除</td></tr><tr><td>+ -</td><td>加法、减法</td></tr><tr><td>&gt;&gt; &lt;&lt;</td><td>右移、左移</td></tr><tr><td>&amp;</td><td>与</td></tr><tr><td>^ 丨</td><td>异或、或</td></tr><tr><td>&lt;= &lt; &gt; &gt;=</td><td>比较运算符</td></tr><tr><td>== !=</td><td>是否等于、是否不等于</td></tr><tr><td>= %= /= //= -= += *= **=</td><td>赋值运算符</td></tr><tr><td>is is not</td><td>身份运算符</td></tr><tr><td>in not in</td><td>成员运算符</td></tr><tr><td>not and or</td><td>逻辑运算符</td></tr></tbody></table><h2 id="font-color-118899-1-6-缩进-font"><font color="#118899">1.6 缩进</font></h2><p>Python 不使用 <code>&#123;&#125;</code> 来控制类、函数、逻辑判断等，而是使用缩进，缩进的空格可变。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h2 id="font-color-118899-1-7-多行-font"><font color="#118899">1.7 多行</font></h2><p>Python 中一般以新行作为语句的结束标识，可以使用 <code>\</code> 将一行语句分为多行显示。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">128</span></span><br><span class="line">b = <span class="number">1024</span></span><br><span class="line">c = <span class="number">512</span></span><br><span class="line">d = a + \</span><br><span class="line">    b - \</span><br><span class="line">    c</span><br></pre></td></tr></table></figure><p>如果包含在 <code>[]</code>、<code>&#123;&#125;</code>、<code>()</code> 括号中，则不需要使用 <code>\</code>。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr = &#123;</span><br><span class="line">    a,</span><br><span class="line">    b,</span><br><span class="line">    c</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="font-color-118899-1-8-注释-font"><font color="#118899">1.8 注释</font></h2><p>Python 中单行注释使用 <code>#</code>，多行注释使用三个单引号（<code>'''</code>）或三个双引号（<code>&quot;&quot;&quot;</code>）。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 我是单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">我是多行注释</span></span><br><span class="line"><span class="string">我是多行注释</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><br>___________<h1><font color="Purple">2 基本语句</font></h1><h2 id="font-color-118899-2-1-条件语句-font"><font color="#118899">2.1 条件语句</font></h2><p>在进行逻辑判断时，我们需要用到条件语句，Python 提供了 <code>if</code>、<code>elif</code>、<code>else</code> 来进行逻辑判断。格式如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 判断条件<span class="number">1</span>:</span><br><span class="line">    执行语句<span class="number">1.</span>..</span><br><span class="line"><span class="keyword">elif</span> 判断条件<span class="number">2</span>:</span><br><span class="line">    执行语句<span class="number">2.</span>..</span><br><span class="line"><span class="keyword">elif</span> 判断条件<span class="number">3</span>:</span><br><span class="line">    执行语句<span class="number">3.</span>..</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    执行语句<span class="number">4.</span>..</span><br></pre></td></tr></table></figure><h2 id="font-color-118899-2-2-循环语句-font"><font color="#118899">2.2 循环语句</font></h2><p>当需要多次重复执行时，我们要用到循环语句，Python 提供了 for 循环和 while 循环。</p><h3 id="font-color-f05b72-2-2-1-for循环-font"><font color="#f05b72">2.2.1 for循环</font></h3><p>for 循环可以遍历任何序列，比如：字符串。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;Python&#x27;</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">    <span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">P</span><br><span class="line">y</span><br><span class="line">t</span><br><span class="line">h</span><br><span class="line">o</span><br><span class="line">n</span><br></pre></td></tr></table></figure><p>如果你对for循环很感兴趣，可以尝试一下下面这个有意思的小程序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\r倒计时%d&quot;</span>%(<span class="number">10</span>-i),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="font-color-f05b72-2-2-2-while循环-font"><font color="#f05b72">2.2.2 while循环</font></h3><p>while 循环，满足条件时进行循环，不满足条件时退出循环。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">m = <span class="number">10</span></span><br><span class="line"><span class="keyword">while</span> m &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">sum</span> = <span class="built_in">sum</span> + m</span><br><span class="line">    m = m - <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">55</span></span><br></pre></td></tr></table></figure><h3 id="font-color-f05b72-2-2-3-break-font"><font color="#f05b72">2.2.3 break</font></h3><p>break 用在 for 循环和 while 循环语句中，用来终止整个循环。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;Python&#x27;</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">if</span> s == <span class="string">&#x27;o&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">P</span><br><span class="line">y</span><br><span class="line">t</span><br><span class="line">h</span><br></pre></td></tr></table></figure><h3 id="font-color-f05b72-2-2-4-continue-font"><font color="#f05b72">2.2.4 continue</font></h3><p>continue 用在 for 循环和 while 循环语句中，用来终止本次循环。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;Python&#x27;</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">if</span> s == <span class="string">&#x27;o&#x27;</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">P</span><br><span class="line">y</span><br><span class="line">t</span><br><span class="line">h</span><br><span class="line">n</span><br></pre></td></tr></table></figure><h2 id="font-color-118899-2-3-空语句-font"><font color="#118899">2.3 空语句</font></h2><p>pass 是空语句，它不做任何事情，一般用做占位语句，作用是保持程序结构的完整性。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><br>___________<h1><font color="Purple">3 数据类型</font></h1><h2 id="font-color-118899-3-1-数值-font"><font color="#118899">3.1 数值</font></h2><h3 id="font-color-f05b72-3-1-1-数值类型-font"><font color="#f05b72">3.1.1 数值类型</font></h3><p>Python有三种数值类型，分别是：整型（int）、浮点型（float）、复数（complex），在低版本Python2中，还包含长整型（long）。</p><ul><li><strong>整型</strong>：包括正整数、负整数。如：1024、-1024。整型有四种进制表示，分别为：二进制、八进制、十进制、十六进制，说明如下表所示：</li></ul><table><thead><tr><th style="text-align:left">种类</th><th style="text-align:left">描述</th><th style="text-align:left">引导符</th></tr></thead><tbody><tr><td style="text-align:left">二进制</td><td style="text-align:left">由 0 和 1 组成</td><td style="text-align:left">0b 或 0B</td></tr><tr><td style="text-align:left">八进制</td><td style="text-align:left">由 0 到 7 组成</td><td style="text-align:left">0o 或 0O</td></tr><tr><td style="text-align:left">十进制</td><td style="text-align:left">默认情况</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">十六进制</td><td style="text-align:left">由 0 到 9、a 到 f、A 到 F 组成，不区分大小写</td><td style="text-align:left">0x 或 0X</td></tr></tbody></table><ul><li><p><strong>浮点型</strong>：由整数部分和小数部分组成。</p></li><li><p><strong>复数</strong>：由实数部分和虚数部分组成。</p></li><li><p><strong>分数</strong>：需要载入Fraction模块，如：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fractions <span class="keyword">import</span> Fraction  </span><br><span class="line">tt = Fraction(<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(tt/<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(tt*<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span>**(tt))</span><br></pre></td></tr></table></figure><p>结果输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>/<span class="number">12</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1.2599210498948732</span></span><br></pre></td></tr></table></figure><h3 id="font-color-f05b72-3-1-2-基本运算-font"><font color="#f05b72">3.1.2 基本运算</font></h3><p>我的基本运算见下表，整型和浮点型均支持下表中运算。</p><table><thead><tr><th style="text-align:left">运算</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">x + y</td><td style="text-align:left">x 和 y 的和</td></tr><tr><td style="text-align:left">x - y</td><td style="text-align:left">x 和 y 的差</td></tr><tr><td style="text-align:left">x * y</td><td style="text-align:left">x 和 y 的乘积</td></tr><tr><td style="text-align:left">x / y</td><td style="text-align:left">x 和 y 的商</td></tr><tr><td style="text-align:left">x // y</td><td style="text-align:left">x 除以 y，取整除</td></tr><tr><td style="text-align:left">x % y</td><td style="text-align:left">x 除以 y，取模</td></tr><tr><td style="text-align:left">-x</td><td style="text-align:left">x 取反</td></tr><tr><td style="text-align:left">+x</td><td style="text-align:left">x 不变</td></tr><tr><td style="text-align:left">abs(x)</td><td style="text-align:left">x 的绝对值</td></tr><tr><td style="text-align:left">int(x)</td><td style="text-align:left">将 x 转换为整数</td></tr><tr><td style="text-align:left">float(x)</td><td style="text-align:left">将 x 转换为浮点数</td></tr><tr><td style="text-align:left">complex(x, y)</td><td style="text-align:left">一个带有实部 x 和虚部 y 的复数，y 默认为 0。</td></tr><tr><td style="text-align:left">divmod(x, y)</td><td style="text-align:left">(x // y, x % y)</td></tr><tr><td style="text-align:left">pow(x, y)</td><td style="text-align:left">x 的 y 次幂</td></tr><tr><td style="text-align:left">x ** y</td><td style="text-align:left">x 的 y 次幂</td></tr></tbody></table><h3 id="font-color-f05b72-3-1-3-数学函数-font"><font color="#f05b72">3.1.3 数学函数</font></h3><p>除了上面的基本运算外，我还可以借助数学模块 <code>math</code> 实现更多的运算。首先要先引入数学模块 <code>math</code>。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br></pre></td></tr></table></figure><p>引入之后就可以使用了，以 <code>math</code> 模块中求平方根函数 <code>sqrt(x)</code>  为例。使用方式如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">math.sqrt(<span class="number">1024</span>)</span><br></pre></td></tr></table></figure><p><code>math</code> 模块中除了求平方根函数，还有很多可以使用的函数。如下表所示：</p><table><thead><tr><th style="text-align:left">函数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">abs(x)</td><td style="text-align:left">返回 x 的绝对值</td></tr><tr><td style="text-align:left">ceil(x)</td><td style="text-align:left">返回 x 的上入整数，如：math.ceil(1.1) 返回 2</td></tr><tr><td style="text-align:left">floor(x)</td><td style="text-align:left">返回 x 的下舍整数，如：math.floor(1.1) 返回 1</td></tr><tr><td style="text-align:left">exp(x)</td><td style="text-align:left">返回 e 的 x 次幂</td></tr><tr><td style="text-align:left">log(x)</td><td style="text-align:left">返回以 e 为底 x 的对数</td></tr><tr><td style="text-align:left">log10(x)</td><td style="text-align:left">返回以 10 为底 x 的对数</td></tr><tr><td style="text-align:left">pow(x, y)</td><td style="text-align:left">返回 x 的 y 次幂</td></tr><tr><td style="text-align:left">sqrt(x)</td><td style="text-align:left">返回 x 的平方根</td></tr><tr><td style="text-align:left">factorial(x)</td><td style="text-align:left">返回 x 的阶乘</td></tr></tbody></table><h3 id="font-color-f05b72-3-1-4-随机函数-font"><font color="#f05b72">3.1.4 随机函数</font></h3><p>在安全领域有时会用到随机数，<code>random</code> 模块对随机数的生成提供了支持。首先还是要引入 <code>random</code> 模块。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br></pre></td></tr></table></figure><p>下面简单介绍两个函数：<strong>random(x)函数</strong>随机生成一个 0 到 1 范围内的实数。使用如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.random()</span><br></pre></td></tr></table></figure><p><strong>uniform(x, y)函数</strong>随机生成一个 x 到 y 范围内的实数。使用如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.uniform(<span class="number">1</span>,<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h2 id="font-color-118899-3-2-字符串-font"><font color="#118899">3.2 字符串</font></h2><p>字符串是 Python 的一种数据类型，它可以通过单引号 ‘、双引号 &quot;、三引号 ‘’’ 或 “”&quot; 来定义，本节我们将展开介绍。</p><h3 id="font-color-f05b72-3-2-1-访问操作-font"><font color="#f05b72">3.2.1 访问操作</font></h3><p>访问单个字符可以将字符串视为数组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27;Python&#x27;</span></span><br><span class="line"><span class="comment"># 访问第一个字符 P</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>访问范围内字符用<code>:</code>来连接首位指针</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27;Python&#x27;</span></span><br><span class="line"><span class="comment"># 访问 yt</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line"><span class="comment"># 访问 Pyt</span></span><br><span class="line"><span class="built_in">print</span>(s[:<span class="number">3</span>])</span><br><span class="line"><span class="comment"># 访问 hon</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">3</span>:])</span><br></pre></td></tr></table></figure><h3 id="font-color-f05b72-3-2-2-查询编码-font"><font color="#f05b72">3.2.2 查询编码</font></h3><p>Python 使用了 <code>ord()</code> 函数返回单个字符的ASCII码，<code>chr()</code> 函数把编码转成相应字符。如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27;A&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">ord</span>(s))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">65</span>))</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">65</span></span><br><span class="line">A</span><br></pre></td></tr></table></figure><h3 id="font-color-f05b72-3-2-3-转义符-font"><font color="#f05b72">3.2.3 转义符</font></h3><p>之前我们说过可以通过反斜杠 <code>\</code> 将一行语句分多行显示，其实就是 <code>\</code> 来转义字符，一些常见的转义字符如下表所示：</p><table><thead><tr><th style="text-align:left">转义字符</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>\</code></td><td style="text-align:left">在行尾使用时，用作续行符</td></tr><tr><td style="text-align:left">\b</td><td style="text-align:left">退格（Backspace）</td></tr><tr><td style="text-align:left">\000</td><td style="text-align:left">空</td></tr><tr><td style="text-align:left">\n</td><td style="text-align:left">换行</td></tr><tr><td style="text-align:left">\v</td><td style="text-align:left">纵向制表符</td></tr><tr><td style="text-align:left">\t</td><td style="text-align:left">横向制表符</td></tr><tr><td style="text-align:left">\r</td><td style="text-align:left">回车</td></tr></tbody></table><h3 id="font-color-f05b72-3-2-4-运算符-font"><font color="#f05b72">3.2.4 运算符</font></h3><p>之前我们已经介绍了大部分运算符，下面再来详细看一下字符串运算符。如下表所示：</p><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">+</td><td style="text-align:left">连接符</td></tr><tr><td style="text-align:left">*</td><td style="text-align:left">重复输出</td></tr><tr><td style="text-align:left">[]</td><td style="text-align:left">通过索引获取字符串中字符</td></tr><tr><td style="text-align:left">[ : ]</td><td style="text-align:left">获取字符串中的一部分</td></tr><tr><td style="text-align:left">in</td><td style="text-align:left">字符串中是否包含指定字符</td></tr><tr><td style="text-align:left">not in</td><td style="text-align:left">字符串中是否不包含指定字符</td></tr><tr><td style="text-align:left">r/R</td><td style="text-align:left">字符串原样输出</td></tr></tbody></table><p>使用示例如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">&#x27;Hello&#x27;</span></span><br><span class="line">s2 = <span class="string">&#x27;Python&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;s1 + s2 --&gt;&#x27;</span>, s1 + s2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;s1 * 2 --&gt;&#x27;</span>, s1 * <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;s1[0] --&gt;&#x27;</span>, s1[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;s1[0:2] --&gt;&#x27;</span>,s1[<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&quot;H&quot; in s1 --&gt;&#x27;</span>,<span class="string">&#x27;H&#x27;</span> <span class="keyword">in</span> s1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&quot;H&quot; not in s1 --&gt;&#x27;</span>,<span class="string">&#x27;H&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> s1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\\r --&gt;&#x27;</span>, <span class="string">R&#x27;\r&#x27;</span>)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s1 + s2 --&gt; HelloPython</span><br><span class="line">s1 * <span class="number">2</span> --&gt; HelloHello</span><br><span class="line">s1[<span class="number">0</span>] --&gt; H</span><br><span class="line">s1[<span class="number">0</span>:<span class="number">2</span>] --&gt; He</span><br><span class="line"><span class="string">&quot;H&quot;</span> <span class="keyword">in</span> s1 --&gt; <span class="literal">True</span></span><br><span class="line"><span class="string">&quot;H&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> s1 --&gt; <span class="literal">False</span></span><br><span class="line">\r --&gt; \r</span><br></pre></td></tr></table></figure><h3 id="font-color-f05b72-3-2-5-格式化输出-font"><font color="#f05b72">3.2.5 格式化输出</font></h3><p>当我们需要输出的内容中含有变量时，比如：<code>Hello xxx</code>，<code>xxx</code> 为变量，此时便需要一种格式化字符串的方式，Python 使用 <code>%</code> 格式化字符串，常用占位符如下表所示：</p><table><thead><tr><th style="text-align:left">占位符</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">%s</td><td style="text-align:left">格式化字符串</td></tr><tr><td style="text-align:left">%d</td><td style="text-align:left">格式化整数</td></tr><tr><td style="text-align:left">%f</td><td style="text-align:left">格式化浮点数</td></tr></tbody></table><p>以字符串为例，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Hello %s&#x27;</span> % <span class="string">&#x27;Python&#x27;</span>)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello Python</span><br></pre></td></tr></table></figure><p>我们也可以使用字符串的 <code>format()</code> 方法进行格式化，先看下示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;0&#125; &#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;Python&#x27;</span>))</span><br></pre></td></tr></table></figure><p>这种方式是用传入的参数依次替换字符串内的占位符{0}、{1} …</p><br>___________<h1><font color="Purple">4 向量</font></h1><h2 id="font-color-118899-4-1序列-font"><font color="#118899">4.1序列</font></h2><p>Python中的<code>序列</code>是一块可存放多个值的<code>连续内存空间</code>，类似于C中的数组，其所有值按一定顺序排列，每个值所在位置都有一个编号，称其为<code>索引</code>，我们可以通过索引访问其对应值。我们上一节说的字符串就是一种典型的序列结构。</p><h3 id="font-color-f05b72-4-1-1-索引-font"><font color="#f05b72">4.1.1 索引</font></h3><p>序列索引支持非负数和负数，索引为非负数，从 <code>0</code> 开始，<strong>由左向右</strong>计数如：<br><img src="https://mmbiz.qpic.cn/mmbiz_png/PvP6qjUpvIquLcIWPZshURjXktARqdAIibEHSd1L2R4o9EycibkibWPjOywNzQoKn8Fuy1kOF6a9cpwiauicbFrFBmQ/640?wx_fmt=png" alt="图片"></p><p>索引为负数<strong>由右向左</strong>计数，从 <code>-1</code> 开始，如：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/PvP6qjUpvIquLcIWPZshURjXktARqdAIoWqWCY2wibA9TAcFemuic2zcMKJPmR7bEm19FFpVP3alyTNsOV36YxrQ/640?wx_fmt=png" alt="图片"></p><p>下面通过一个示例作进一步了解，以字符串为例，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">str</span> = <span class="string">&#x27;贝蒂小熊，乱世不败&#x27;</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(<span class="string">&#x27;str[3] str[-6] =&#x27;</span>, <span class="built_in">str</span>[<span class="number">3</span>], <span class="built_in">str</span>[-<span class="number">6</span>])</span><br><span class="line"><span class="built_in">str</span>[<span class="number">3</span>] <span class="built_in">str</span>[-<span class="number">6</span>] = 熊 熊</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(<span class="string">&#x27;str[5] str[-4] =&#x27;</span>, <span class="built_in">str</span>[<span class="number">5</span>], <span class="built_in">str</span>[-<span class="number">4</span>])</span><br><span class="line"><span class="built_in">str</span>[<span class="number">5</span>] <span class="built_in">str</span>[-<span class="number">4</span>] = 乱 乱</span><br></pre></td></tr></table></figure><p>从结果来看，我们使用非负数索引与负数索引得到的结果一致。</p><h3 id="font-color-f05b72-4-1-2-切片-font"><font color="#f05b72">4.1.2 切片</font></h3><p>切片操作可以访问一定范围内的元素，语法如下所示：<code>sname[start : end : step]</code></p><ul><li>sname：表示序列的名称；</li><li>start：开始索引位置**（包括该位置）**，默认为 0；</li><li>end：表示切片的结束索引位置**（不包括该位置）**，默认为序列的长度；</li><li>step：步长。</li></ul><p>以字符串为例，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">str</span> = <span class="string">&#x27;贝蒂小熊，乱世不败&#x27;</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(<span class="built_in">str</span>[:<span class="number">4</span>])</span><br><span class="line">贝蒂小熊</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">5</span>:])</span><br><span class="line">乱世不败</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(<span class="built_in">str</span>[::<span class="number">2</span>])</span><br><span class="line">贝小，世败</span><br></pre></td></tr></table></figure><h3 id="font-color-f05b72-4-1-3-相加-font"><font color="#f05b72">4.1.3 相加</font></h3><p>Python支持类型相同的序列使用 <code>+</code> 作相加操作，该操作不会去除重复的元素。以字符串为例，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;str1 = <span class="string">&#x27;贝蒂小熊&#x27;</span></span><br><span class="line">&gt;&gt;&gt;str2 = <span class="string">&#x27;乱世不败&#x27;</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(str1 + str2)</span><br><span class="line">贝蒂小熊乱世不败</span><br></pre></td></tr></table></figure><h3 id="font-color-f05b72-4-1-4-相乘-font"><font color="#f05b72">4.1.4 相乘</font></h3><p>Python中，使用数字 n 乘以一个序列会生成新的序列，内容为原来序列被重复 n 次的结果。以字符串为例，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">str</span> = <span class="string">&#x27;贝蒂小熊n&#x27;</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(<span class="number">2</span> * <span class="built_in">str</span>)</span><br><span class="line">贝蒂小熊贝蒂小熊</span><br></pre></td></tr></table></figure><h3 id="font-color-f05b72-4-1-5查询-font"><font color="#f05b72">4.1.5查询</font></h3><p>Python使用 <code>in</code> 关键字检查某元素是否为序列的成员，语法如下：<code>val in seq</code></p><ul><li>val：要检查的元素；</li><li>seq：指定的序列。</li></ul><p>通过一个例子作进一步了解，以字符串为例，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">str</span> = <span class="string">&#x27;贝蒂小熊，乱世不败&#x27;</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(<span class="string">&#x27;熊&#x27;</span> <span class="keyword">in</span> <span class="built_in">str</span>,<span class="string">&#x27;乱&#x27;</span> <span class="keyword">in</span> <span class="built_in">str</span>)</span><br><span class="line"><span class="literal">True</span> <span class="literal">True</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(<span class="string">&#x27;熊乱&#x27;</span> <span class="keyword">in</span> <span class="built_in">str</span>) </span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="font-color-f05b72-4-1-6-内置函数-font"><font color="#f05b72">4.1.6 内置函数</font></h3><table><thead><tr><th style="text-align:left">函数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">len()</td><td style="text-align:left">计算序列的长度</td></tr><tr><td style="text-align:left">max()</td><td style="text-align:left">找出序列中的最大元素</td></tr><tr><td style="text-align:left">min()</td><td style="text-align:left">找出序列中的最小元素</td></tr><tr><td style="text-align:left">list()</td><td style="text-align:left">将序列转换为列表</td></tr><tr><td style="text-align:left">str()</td><td style="text-align:left">将序列转换为字符串</td></tr><tr><td style="text-align:left">sum()</td><td style="text-align:left">计算元素的和</td></tr><tr><td style="text-align:left">sorted()</td><td style="text-align:left">对元素进行排序</td></tr><tr><td style="text-align:left">enumerate()</td><td style="text-align:left">将序列组合为一个索引序列，多用在 for 循环中</td></tr></tbody></table><p>简单举几个例子，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;c = [<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">2</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(<span class="string">&#x27;len --&gt;&#x27;</span>, <span class="built_in">len</span>(c))</span><br><span class="line"><span class="built_in">len</span> --&gt; <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(<span class="string">&#x27;max --&gt;&#x27;</span>, <span class="built_in">max</span>(c))</span><br><span class="line"><span class="built_in">max</span> --&gt; <span class="number">7</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(<span class="string">&#x27;list --&gt;&#x27;</span>, <span class="built_in">list</span>(c))</span><br><span class="line"><span class="built_in">list</span> --&gt; [<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">2</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(<span class="string">&#x27;sorted --&gt;&#x27;</span>, <span class="built_in">sorted</span>(c))</span><br><span class="line"><span class="built_in">sorted</span> --&gt; [<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br></pre></td></tr></table></figure><h2 id="font-color-118899-4-2-列表-font"><font color="#118899">4.2 列表</font></h2><p>Python中没有数组，而是加入了功能更强大的列表（list），列表可以存储任何类型的数据，同一个列表中的数据类型还可以不同；列表是序列结构，可以进行序列结构的基本操作：索引、切片、加、乘、检查成员。</p><h3 id="font-color-f05b72-4-2-1-创建-font"><font color="#f05b72">4.2.1 创建</font></h3><p>列表中所有元素都放在一个中括号 <code>[]</code> 中，相邻元素之间用逗号 <code>,</code> 分隔，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;l = [<span class="number">1024</span>, <span class="number">0.618</span>, <span class="string">&#x27;贝蒂小熊&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="font-color-f05b72-4-2-2-访问-font"><font color="#f05b72">4.2.2 访问</font></h3><p>通过索引访问列表中的值，还可以使用 <code>:</code> 截取范围内的元素，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;l = [<span class="number">1024</span>, <span class="number">0.618</span>, <span class="string">&#x27;贝蒂小熊&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(l[<span class="number">0</span>])</span><br><span class="line"><span class="number">1024</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(l[<span class="number">1</span>:])</span><br><span class="line">[<span class="number">0.618</span>, <span class="string">&#x27;贝蒂小熊&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="font-color-f05b72-4-2-3-更新-font"><font color="#f05b72">4.2.3 更新</font></h3><p><strong>修改</strong>列表的已有元素可以用直接赋值的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;l = [<span class="number">1024</span>, <span class="number">0.618</span>, <span class="string">&#x27;贝蒂小熊&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;l[<span class="number">2</span>] = <span class="string">&#x27;北地枭雄&#x27;</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(l)</span><br><span class="line">[<span class="number">1024</span>, <span class="number">0.618</span>, <span class="string">&#x27;北地枭雄&#x27;</span>]</span><br></pre></td></tr></table></figure><p><strong>添加</strong>新元素使用 <code>append()</code>函数，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;l = [<span class="number">1024</span>, <span class="number">0.618</span>, <span class="string">&#x27;贝蒂小熊&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;l.append(<span class="string">&#x27;乱世不败&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(l)</span><br><span class="line">[<span class="number">1024</span>, <span class="number">0.618</span>, <span class="string">&#x27;贝蒂小熊&#x27;</span>, <span class="string">&#x27;乱世不败&#x27;</span>]</span><br></pre></td></tr></table></figure><p><strong>删除</strong>列表中元素使用 <code>del</code>函数，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;l = [<span class="number">1024</span>, <span class="number">0.618</span>, <span class="string">&#x27;贝蒂小熊&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="keyword">del</span> l[<span class="number">1</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(l)</span><br><span class="line">[<span class="number">1024</span>, <span class="string">&#x27;贝蒂小熊&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="font-color-f05b72-4-2-4-其他函数-font"><font color="#f05b72">4.2.4 其他函数</font></h3><p><code>count()</code>统计列表中某个元素出现的次数，使用如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;l = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(l.count(<span class="string">&#x27;d&#x27;</span>))</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p><code>index()</code>查找某个元素在列表中首次出现的位置（即索引），使用如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;l = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(l.index(<span class="string">&#x27;d&#x27;</span>))</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><p><code>remove()</code>移除列表中某个值的<strong>首次</strong>匹配项，使用如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;l = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;l.remove(<span class="string">&#x27;d&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(l)</span><br><span class="line">[<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br></pre></td></tr></table></figure><p><code>sort()</code>对列表中元素进行排序，使用如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;l = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;l.sort()</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;f&#x27;</span>]</span><br></pre></td></tr></table></figure><p><code>copy()</code>复制列表，使用如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;l = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;lc = l.copy()</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(lc)</span><br><span class="line">[<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br></pre></td></tr></table></figure><h2 id="font-color-118899-4-3-元组-font"><font color="#118899">4.3 元组</font></h2><p>元组（tuple）与列表类似，但元组是不可变的，可简单将其看作是不可变的列表，元组常用于保存不可修改的内容。</p><h3 id="font-color-f05b72-4-3-1-创建-font"><font color="#f05b72">4.3.1 创建</font></h3><p>元组中所有元素都放在一个小括号 <code>()</code> 中，相邻元素之间用逗号 <code>,</code> 分隔，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;t = (<span class="number">1024</span>, <span class="number">0.5</span>, <span class="string">&#x27;Python&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="font-color-f05b72-4-3-2-访问-font"><font color="#f05b72">4.3.2 访问</font></h3><p>与访问列表中元素类似，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;t = (<span class="number">1024</span>, <span class="number">0.5</span>, <span class="string">&#x27;Python&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(<span class="string">&#x27;t[0] --&gt;&#x27;</span>, t[<span class="number">0</span>])</span><br><span class="line">t[<span class="number">0</span>] --&gt; <span class="number">1024</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(<span class="string">&#x27;t[1:] --&gt;&#x27;</span>, t[<span class="number">1</span>:])</span><br><span class="line">t[<span class="number">1</span>:] --&gt; (<span class="number">0.5</span>, <span class="string">&#x27;Python&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="font-color-f05b72-4-3-3-更新-font"><font color="#f05b72">4.3.3 更新</font></h3><p>元组中元素不能被修改，我们要用重新赋值的方式操作，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;t = (<span class="number">1024</span>, <span class="number">0.5</span>, <span class="string">&#x27;Python&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt;t = (<span class="number">1024</span>, <span class="number">0.5</span>, <span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;Hello&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(<span class="string">&#x27;t --&gt;&#x27;</span>, t)</span><br><span class="line">t --&gt; (<span class="number">1024</span>, <span class="number">0.5</span>, <span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;Hello&#x27;</span>)</span><br></pre></td></tr></table></figure><p>元组中的元素不能被删除，我们只能删除整个元组，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;t = (<span class="number">1024</span>, <span class="number">0.5</span>, <span class="string">&#x27;Python&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt;<span class="keyword">del</span> t</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(<span class="string">&#x27;t --&gt;&#x27;</span>, t)</span><br><span class="line">NameError: name <span class="string">&#x27;t&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure><p>由于元组实例被删除，所以输出了异常信息。</p><h3 id="font-color-f05b72-4-3-4-其他函数-font"><font color="#f05b72">4.3.4 其他函数</font></h3><p><code>len()</code>计算元组中元素个数，使用如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;t = (<span class="number">1024</span>, <span class="number">0.5</span>, <span class="string">&#x27;Python&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(<span class="string">&#x27;len(t) --&gt;&#x27;</span>, <span class="built_in">len</span>(t))</span><br><span class="line"><span class="built_in">len</span>(t) --&gt; <span class="number">3</span></span><br></pre></td></tr></table></figure><p><code>ma\()</code>和<code>min()</code>返回元组中元素最大、最小值，使用如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;t = (<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;d&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(<span class="string">&#x27;max(t) --&gt;&#x27;</span>, <span class="built_in">max</span>(t))</span><br><span class="line"><span class="built_in">max</span>(t) --&gt; f</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(<span class="string">&#x27;min(t) --&gt;&#x27;</span>, <span class="built_in">min</span>(t))</span><br><span class="line"><span class="built_in">min</span>(t) --&gt; a</span><br></pre></td></tr></table></figure><p><code>tuple()</code>将列表转换为元组，使用如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;l = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;t = <span class="built_in">tuple</span>(l)</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(<span class="string">&#x27;t --&gt;&#x27;</span>, t)</span><br><span class="line">t --&gt; (<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;d&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="font-color-118899-4-4-字典-font"><font color="#118899">4.4 字典</font></h2><p>Dict是Python的一种数据结构，它的内容都是以键-值（key-value）的方式存在的。Dict拥有良好的查询速度，Dict中的值可以是任意Python对象，多次对一个key赋value，后面的value会把前面的value覆盖。</p><h3 id="font-color-f05b72-4-4-1-使用-font"><font color="#f05b72">4.4.1 使用</font></h3><p>字典的内容在花括号 <code>&#123;&#125;</code> 内，键-值（key-value）之间用冒号 <code>:</code> 分隔，键值对之间用逗号 <code>,</code> 分隔，比如创建字典 d，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式一</span></span><br><span class="line">&gt;&gt;&gt;l = [(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;小明&#x27;</span>), (<span class="string">&#x27;age&#x27;</span>, <span class="number">18</span>)]</span><br><span class="line">&gt;&gt;&gt;d = <span class="built_in">dict</span>(l)</span><br><span class="line"><span class="comment"># 方式二</span></span><br><span class="line">&gt;&gt;&gt;d = <span class="built_in">dict</span>(name=<span class="string">&#x27;小明&#x27;</span>, age=<span class="string">&#x27;18&#x27;</span>)</span><br><span class="line"><span class="comment"># 空字典</span></span><br><span class="line">&gt;&gt;&gt;d = <span class="built_in">dict</span>()</span><br><span class="line">&gt;&gt;&gt;d = &#123;&#125;</span><br></pre></td></tr></table></figure><p>字典中的值通过 key 进行访问，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = <span class="built_in">dict</span>(name=<span class="string">&#x27;小明&#x27;</span>, age=<span class="string">&#x27;18&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line"><span class="string">&#x27;小明&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 get 方法</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;小明&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="font-color-f05b72-4-4-2-更新-font"><font color="#f05b72">4.4.2 更新</font></h3><p>修改操作，以修改 age 为例，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = <span class="built_in">dict</span>(name=<span class="string">&#x27;小明&#x27;</span>, age=<span class="string">&#x27;18&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">&#x27;age&#x27;</span>] = <span class="string">&#x27;20&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">&#x27;age&#x27;</span>]</span><br><span class="line"><span class="string">&#x27;20&#x27;</span></span><br></pre></td></tr></table></figure><p>清空集合，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = <span class="built_in">dict</span>(name=<span class="string">&#x27;小明&#x27;</span>, age=<span class="string">&#x27;18&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.clear()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="font-color-f05b72-4-4-3-其他函数-font"><font color="#f05b72">4.4.3 其他函数</font></h3><p>获取字典的长度，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = <span class="built_in">dict</span>(name=<span class="string">&#x27;小明&#x27;</span>, age=<span class="string">&#x27;18&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(d)</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="font-color-118899-4-5-集合-font"><font color="#118899">4.5 集合</font></h2><p>集合（set）与字典相同均存储 key，但也只存储 key，因 key 不可重复，所以 set 的中的值不可重复，也是无序的。</p><h3 id="font-color-f05b72-4-5-1-使用-font"><font color="#f05b72">4.5.1 使用</font></h3><p>集合使用花括号 <code>&#123;&#125;</code> 或者 <code>set()</code> 函数创建，如果创建空集合只能使用 <code>set()</code> 函数，以创建集合 s 为例，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;s = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;</span><br><span class="line"><span class="comment"># 使用 set 函数</span></span><br><span class="line">&gt;&gt;&gt;s = <span class="built_in">set</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>])</span><br><span class="line"><span class="comment"># 空集合</span></span><br><span class="line">&gt;&gt;&gt;s = <span class="built_in">set</span>()</span><br></pre></td></tr></table></figure><p>集合中重复的元素会被自动过滤掉，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;b&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="font-color-f05b72-4-5-2-更新-font"><font color="#f05b72">4.5.2 更新</font></h3><p>添加元素可以使用 <code>add</code> 或 <code>update</code> 方法，如果元素已经存在，则不进行操作，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.add(<span class="string">&#x27;d&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;b&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.update(<span class="string">&#x27;e&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;</span><br><span class="line"><span class="comment"># 添加已经存在的元素 a</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.add(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>删除元素使用 <code>remove</code> 方法，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.remove(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>清空集合使用 <code>clear</code> 方法，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.clear()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line"><span class="built_in">set</span>()</span><br></pre></td></tr></table></figure><h3 id="font-color-f05b72-4-5-3-其他函数-font"><font color="#f05b72">4.5.3 其他函数</font></h3><p>获取集合的长度，同样使用 <code>len</code> 方法，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(s)</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><hr><h1><font color="Purple">5 函数</font></h1><p>函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。</p><p>函数能提高应用的模块性，和代码的重复利用率。你已经知道Python提供了许多内建函数，比如print()。但你也可以自己创建函数，这被叫做用户自定义函数。</p><h2 id="font-color-118899-5-1-自定义函数-font"><font color="#118899">5.1 自定义函数</font></h2><h3 id="font-color-f05b72-5-1-1-函数定义-font"><font color="#f05b72">5.1.1 函数定义</font></h3><p>你可以定义一个由自己想要功能的函数，以下是简单的规则：</p><ul><li>函数代码块以 def 关键词开头，后接函数标识符名称和圆括号()。</li><li>任何传入参数和自变量必须放在圆括号中间。圆括号之间可以用于定义参数。</li><li>函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。</li><li>函数内容以冒号起始，并且缩进。</li><li>return [表达式] 结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回 None。</li><li>注意缩进格式</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">functionname</span>(<span class="params"> parameters </span>):</span><br><span class="line">   <span class="string">&quot;函数_文档字符串&quot;</span></span><br><span class="line">   function_suite</span><br><span class="line">   <span class="keyword">return</span> [expression]</span><br></pre></td></tr></table></figure><p>如：以下为一个简单的Python函数，它将一个字符串作为传入参数，再打印到标准显示设备上。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">printme</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line"><span class="meta">... </span>  <span class="string">&quot;打印传入的字符串到标准显示设备上&quot;</span></span><br><span class="line"><span class="meta">... </span>  <span class="built_in">print</span>(<span class="built_in">str</span>)</span><br><span class="line"><span class="meta">... </span>  <span class="keyword">return</span></span><br></pre></td></tr></table></figure><h3 id="font-color-f05b72-5-1-2-函数调用-font"><font color="#f05b72">5.1.2 函数调用</font></h3><p>定义一个函数只给了函数一个名称，指定了函数里包含的参数，和代码块结构。</p><p>这个函数的基本结构完成以后，你可以通过另一个函数调用执行，也可以直接从Python提示符执行。</p><p>如下实例调用了printme（）函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>printme(<span class="string">&quot;博博博博博博博哥&quot;</span>)</span><br><span class="line"><span class="meta">... </span>printme(<span class="string">&quot;超超超超超超超人&quot;</span>)</span><br><span class="line">博博博博博博博哥</span><br><span class="line">超超超超超超超人</span><br></pre></td></tr></table></figure><h3 id="font-color-f05b72-5-1-3-返回值-font"><font color="#f05b72">5.1.3 返回值</font></h3><p>return语句[表达式]退出函数，选择性地向调用方返回一个表达式。不带参数值的return语句返回None。如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">sum</span>(<span class="params"> arg1, arg2 </span>):</span><br><span class="line"><span class="meta">... </span>    total = arg1 + arg2</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span> <span class="string">&quot;函数内 : &quot;</span>, total</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> total </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>total = <span class="built_in">sum</span>( <span class="number">10</span>, <span class="number">20</span> )</span><br><span class="line"><span class="number">30</span></span><br></pre></td></tr></table></figure><h2 id="font-color-118899-5-2-参数-font"><font color="#118899">5.2 参数</font></h2><p>以下是调用函数时可使用的正式参数类型：</p><div class="note primary modern"><p><i class="fas fa-magnifying-glass-plus"></i>     必备参数<br><i class="fas fa-magnifying-glass-plus"></i>     关键字参数<br><i class="fas fa-magnifying-glass-plus"></i>     默认参数<br><i class="fas fa-magnifying-glass-plus"></i>     不定长参数</p></div><h3 id="font-color-f05b72-5-1-1-必备参数-font"><font color="#f05b72">5.1.1 必备参数</font></h3><p>必备参数须以正确的顺序传入函数。调用时的数量必须和声明时的一样。</p><p>如调用printme()函数，你必须传入一个参数，不然会出现语法错误：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>printme()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;...&quot;</span>, line <span class="number">90</span>, <span class="keyword">in</span> runcode</span><br><span class="line">    <span class="built_in">exec</span>(code, self.<span class="built_in">locals</span>)</span><br><span class="line">  File <span class="string">&quot;&lt;input&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: printme() missing <span class="number">1</span> required positional argument: <span class="string">&#x27;str&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="font-color-f05b72-5-1-2-关键字参数-font"><font color="#f05b72">5.1.2 关键字参数</font></h3><p>关键字参数和函数调用关系紧密，函数调用使用关键字参数来确定传入的参数值。</p><p>使用关键字参数允许函数调用时参数的顺序与声明时不一致，因为Python解释器能够用参数名匹配参数值。</p><p>以下实例在函数 printme() 调用时使用参数名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>printme(<span class="built_in">str</span> = <span class="string">&quot;琅琊少年诸葛恪&quot;</span>)</span><br><span class="line">琅琊少年诸葛恪</span><br></pre></td></tr></table></figure><p>关键字参数具有顺序不重要性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">whatsup</span>(<span class="params">name, value</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">&quot;拿来吧你！&quot;</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(name, end=<span class="string">&quot;  &quot;</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(value)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>whatsup(value=<span class="string">&quot;♠8&quot;</span>, name=<span class="string">&quot;八卦阵&quot;</span>)</span><br><span class="line">拿来吧你！</span><br><span class="line">八卦阵  ♠<span class="number">8</span></span><br></pre></td></tr></table></figure><h3 id="font-color-f05b72-5-1-3-默认参数-font"><font color="#f05b72">5.1.3 默认参数</font></h3><p>调用函数时，默认参数的值如果没有传入，则被认为是默认值。如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">whatsup</span>(<span class="params">name=<span class="string">&quot;八卦阵&quot;</span>, value=<span class="string">&quot;♠8&quot;</span></span>):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">&quot;拿来吧你！&quot;</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(name, end=<span class="string">&quot;  &quot;</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(value)</span><br><span class="line">    </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>whatsup(value=<span class="string">&quot;♣8&quot;</span>)</span><br><span class="line">拿来吧你！</span><br><span class="line">八卦阵  ♣<span class="number">8</span></span><br></pre></td></tr></table></figure><h3 id="font-color-f05b72-5-1-4-不定长参数-font"><font color="#f05b72">5.1.4 不定长参数</font></h3><p>你可能需要一个函数能处理比当初声明时更多的参数。这些参数叫做不定长参数，和上述2种参数不同，声明时不会命名。基本语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">functionname</span>(<span class="params">[formal_args,] *var_args_tuple </span>):</span><br><span class="line">   <span class="string">&quot;函数_文档字符串&quot;</span></span><br><span class="line">   function_suite</span><br><span class="line">   <span class="keyword">return</span> [expression]</span><br></pre></td></tr></table></figure><p>加了星号（*）的变量名会存放所有未命名的变量参数。如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">printlist</span>(<span class="params">name,*<span class="built_in">vars</span></span>):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">&quot;name:%s\nvar:&quot;</span>%name,end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> var <span class="keyword">in</span> <span class="built_in">vars</span>:</span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span>(var, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">printlist(<span class="string">&#x27;闪电&#x27;</span>,<span class="string">&#x27;♠2&#x27;</span>,<span class="string">&#x27;♠3&#x27;</span>,<span class="string">&#x27;♠4&#x27;</span>,<span class="string">&#x27;♠5&#x27;</span>,<span class="string">&#x27;♠6&#x27;</span>,<span class="string">&#x27;♠7&#x27;</span>,<span class="string">&#x27;♠8&#x27;</span>,<span class="string">&#x27;♠9&#x27;</span>)</span><br><span class="line">name:闪电</span><br><span class="line">var: ♠<span class="number">2</span> ♠<span class="number">3</span> ♠<span class="number">4</span> ♠<span class="number">5</span> ♠<span class="number">6</span> ♠<span class="number">7</span> ♠<span class="number">8</span> ♠<span class="number">9</span></span><br></pre></td></tr></table></figure><h2 id="font-color-118899-5-3-参数类型-font"><font color="#118899">5.3 参数类型</font></h2><p>在 python 中，类型属于对象，变量是没有类型的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="string">&quot;哈哈哈&quot;</span></span><br></pre></td></tr></table></figure><p>以上代码中，[1,2,3]是List类型，&quot;哈哈哈&quot;是String类型，而变量a没有类型，它仅仅是一个对象的引用（一个指针），可以是List类型对象，也可以指向String类型对象。</p><h3 id="font-color-f05b72-5-3-1-可更改-不可更改对象-font"><font color="#f05b72">5.3.1 可更改/不可更改对象</font></h3><p>在 python 中，strings，tuples和numbers是不可更改的对象，而list，dict等则是可以修改的对象。</p><p>**不可变类型：**变量赋值 a=5 后再赋值 a=10，这里实际是新生成一个 int 值对象 10，再让 a 指向它，而 5 被丢弃，不是改变a的值，相当于新生成了a。</p><p>**可变类型：**变量赋值 la=[1,2,3,4] 后再赋值 la[2]=5 则是将 list la 的第三个元素值更改，本身la没有动，只是其内部的一部分值被修改了。</p><h3 id="font-color-f05b72-5-3-2-参数传递-font"><font color="#f05b72">5.3.2 参数传递</font></h3><p>**不可变类型：**类似 c++ 的值传递，如 整数、字符串、元组。如fun(a)，传递的只是a的值，没有影响a对象本身。比如在 fun(a)内部修改 a 的值，只是修改另一个复制的对象，不会影响 a 本身。如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">ChangeInt</span>(<span class="params">a</span>):</span><br><span class="line"><span class="meta">... </span>    a = <span class="number">10</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b =<span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ChangeInt(b)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p>实例中有int对象2，指向它的变量是b，在传递给ChangeInt()函数时，按传值的方式复制了变量b，a和b都指向了同一个Int对象，在a=10时，则新生成一个int值对象10，并让a指向它。</p><p>就是说这段代码你白写了。</p><p>**可变类型：**类似 c++ 的引用传递，如 列表，字典。如fun(la)，则是将 la 真正的传过去，修改后fun外部的la也会受影响</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">ChangeList</span>(<span class="params">lis</span>):</span><br><span class="line"><span class="meta">... </span>   lis.append(<span class="string">&quot;芜湖起飞&quot;</span>)</span><br><span class="line"><span class="meta">... </span>   <span class="built_in">print</span>(<span class="string">&quot;函数内取值: &quot;</span>, lis)</span><br><span class="line"><span class="meta">... </span>   <span class="keyword">return</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ChangeList(li)</span><br><span class="line">函数内取值:  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">&#x27;芜湖起飞&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;函数外取值: &quot;</span>, mylist)</span><br><span class="line">函数外取值: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">&#x27;芜湖起飞&#x27;</span>]</span><br></pre></td></tr></table></figure><p>python 中一切都是对象，严格意义我们不能说值传递还是引用传递，我们应该说传不可变对象和传可变对象。</p><h2 id="font-color-118899-5-4-匿名函数-font"><font color="#118899">5.4 匿名函数</font></h2><h3 id="font-color-f05b72-5-4-1-lambda-font"><font color="#f05b72">5.4.1 lambda</font></h3><div class="note primary modern"><p><i class="fas fa-circle-info"></i>   lambda只是一个表达式，函数体比def简单很多。<br><i class="fas fa-circle-info"></i>   lambda的主体是一个表达式，而不是一个代码块。仅仅能在lambda表达式中封装有限的逻辑进去。<br><i class="fas fa-circle-info"></i>   lambda函数拥有自己的命名空间，且不能访问自有参数列表之外或全局命名空间里的参数。<br><i class="fas fa-circle-info"></i>   虽然lambda函数看起来只能写一行，却不等同于C或C++的内联函数，后者的目的是调用小函数时不占用栈内存从而增加运行效率。<br><i class="fas fa-circle-info"></i>   用匿名函数有个好处，因为函数没有名字，不必担心函数名冲突。此外，匿名函数也是一个函数对象，也可以把匿名函数赋值给一个变量，再利用变量来调用该函数。<br><i class="fas fa-circle-info"></i>   有些函数在代码中只用一次，而且函数体比较简单，使用匿名函数可以减少代码量，看起来比较“优雅”。</p></div><h3 id="font-color-f05b72-5-4-2-语法-font"><font color="#f05b72">5.4.2 语法</font></h3><p>lambda函数的语法只包含一个语句，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> [arg1 [,arg2,.....argn]]:expression</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 普通函数</span></span><br><span class="line"><span class="meta">... </span><span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">x, y</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> x ** y</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>calc(<span class="number">2</span>,<span class="number">5</span>)</span><br><span class="line"><span class="number">32</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 换成匿名函数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>calc = <span class="keyword">lambda</span> x, y: x ** y</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(calc(<span class="number">2</span>, <span class="number">5</span>))</span><br><span class="line"><span class="number">32</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 普通函数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">x,y</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> x &gt; y:</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> x * y</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> x / y   </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>calc(<span class="number">2</span>,<span class="number">5</span>)</span><br><span class="line"><span class="number">0.4</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 换成匿名函数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>calc = <span class="keyword">lambda</span> x,y:x * y <span class="keyword">if</span> x &gt; y <span class="keyword">else</span> x / y</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(calc(<span class="number">2</span>,<span class="number">5</span>))</span><br><span class="line"><span class="number">0.4</span></span><br></pre></td></tr></table></figure><p>然而更常见的用法是将匿名函数与其他函数配合使用。</p><h3 id="font-color-f05b72-5-4-3-和map函数-font"><font color="#f05b72">5.4.3 和map函数</font></h3><p><code>map()</code>函数接收两个参数，一个是作用函数，一个是Iterable，map()将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回遍历序列，对序列中每个元素进行函数操作，最终获取新的序列。</p><p>例：求列表[1,2,3,4,5,6,7,8,9]返回一个n*n的列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment">#一般解决方案</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> ind,val <span class="keyword">in</span> <span class="built_in">enumerate</span>(li):</span><br><span class="line"><span class="meta">... </span>    li[ind] = val * val</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(li)</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#lambda解决方案</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x:x*x,li)))</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</span><br></pre></td></tr></table></figure><h3 id="font-color-f05b72-5-4-4-和reduce函数-font"><font color="#f05b72">5.4.4 和reduce函数</font></h3><p><code>reduce</code>把一个函数作用在一个序列[x1, x2, x3, …]上，这个函数必须接收两个参数，reduce把结果继续和序列的下一个元素做累积计算，其效果就是：</p><p>reduce(func,[1,2,3]) 等同于 func(func(1,2),3)。</p><p>例：计算序列[1,2,3,4,5,6,7,8,9]的积。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(reduce(<span class="keyword">lambda</span> x,y:x * y,li))</span><br><span class="line"><span class="number">362880</span></span><br></pre></td></tr></table></figure><h3 id="font-color-f05b72-5-4-5-和filter函数-font"><font color="#f05b72">5.4.5 和filter函数</font></h3><p><code>filter()</code>也接收一个函数和一个序列。和map()不同的是，filter()把传入的函数依次作用于每个元素，然后根据返回值是True还是False决定保留还是丢弃该元素。</p><p>对于序列中的元素进行筛选，最终获取符合条件的序列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 在一个list中，删掉偶数，只保留奇数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">15</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> x:x % <span class="number">2</span>==<span class="number">1</span>,li)))</span><br><span class="line">[<span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">15</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 筛选出1——200内的回数（左右对称）</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">200</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> x:<span class="built_in">int</span>(<span class="built_in">str</span>(x))==<span class="built_in">int</span>(<span class="built_in">str</span>(x)[::-<span class="number">1</span>]),li)))</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>, <span class="number">77</span>, <span class="number">88</span>, <span class="number">99</span>, <span class="number">101</span>, <span class="number">111</span>, <span class="number">121</span>, <span class="number">131</span>, <span class="number">141</span>, <span class="number">151</span>, <span class="number">161</span>, <span class="number">171</span>, <span class="number">181</span>, <span class="number">191</span>]</span><br></pre></td></tr></table></figure><h3 id="font-color-f05b72-5-4-6-和sorted函数-font"><font color="#f05b72">5.4.6 和sorted函数</font></h3><p>sorted(iterable, key, reverse)函数接收一个key函数来实现对<strong>可迭代对象</strong>进行自定义的排序</p><p>iterable：主要有列表，字符串，元祖，集合和字典</p><p>key：接受一个函数，根据此函数返回的结果，进行排序</p><p>reverse：排序方向，默认为从小到大，reverse=True为从大到小</p><p>与sort()函数不同的是，sort()函数的返回值是在原序列基础上的排列，而sorted()返回一个新的序列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 假设我们用一组tuple表示学生名字和成绩：</span></span><br><span class="line"><span class="meta">... </span>L = [(<span class="string">&#x27;Bob&#x27;</span>, <span class="number">75</span>), (<span class="string">&#x27;Adam&#x27;</span>, <span class="number">92</span>), (<span class="string">&#x27;Bart&#x27;</span>, <span class="number">66</span>), (<span class="string">&#x27;Lisa&#x27;</span>, <span class="number">88</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 请用sorted()对上述列表分别按名字排序</span></span><br><span class="line"><span class="meta">... </span><span class="built_in">print</span>(<span class="built_in">sorted</span>(L, key = <span class="keyword">lambda</span> x : x[<span class="number">0</span>]))</span><br><span class="line">[(<span class="string">&#x27;Adam&#x27;</span>, <span class="number">92</span>), (<span class="string">&#x27;Bart&#x27;</span>, <span class="number">66</span>), (<span class="string">&#x27;Bob&#x27;</span>, <span class="number">75</span>), (<span class="string">&#x27;Lisa&#x27;</span>, <span class="number">88</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 再按成绩从高到低排序</span></span><br><span class="line"><span class="meta">... </span><span class="built_in">print</span>(<span class="built_in">sorted</span>(L, key = <span class="keyword">lambda</span> x : x[<span class="number">1</span>], reverse=<span class="literal">True</span>))</span><br><span class="line">[(<span class="string">&#x27;Adam&#x27;</span>, <span class="number">92</span>), (<span class="string">&#x27;Lisa&#x27;</span>, <span class="number">88</span>), (<span class="string">&#x27;Bob&#x27;</span>, <span class="number">75</span>), (<span class="string">&#x27;Bart&#x27;</span>, <span class="number">66</span>)]</span><br></pre></td></tr></table></figure><hr><h1><font color="Purple">6 模块与包</font></h1><h2 id="font-color-118899-6-1-模块-font"><font color="#118899">6.1 模块</font></h2><h3 id="font-color-f05b72-6-1-1-简介-font"><font color="#f05b72">6.1.1 简介</font></h3><p>模块化是将程序分解为一个个的模块module，通过组合模块来搭建出一个完整的程序，便于团队开发，方便维护和代码复用。</p><p>在python中一个脚本(.py)文件就是一个模块，创建模块实际上就是创建一个.py文件，可以被其他模块导入并使用。注：</p><div class="note primary modern"><p><i class="fas fa-circle-info"></i>   自定义模块的时候要注意命名的规范，使用小写，不要使用大写，不要使用中文，不要使用特殊字符等。<br><i class="fas fa-circle-info"></i>   不要与内置模块冲突如sys等。<br><i class="fas fa-circle-info"></i>   在同一个包中的模块名不允许重复，在不同包中的允许重复。</p></div>  <ul><li>先创建一个package（包），再建一个文件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">`<span class="comment"># 在模块中定义变量</span></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在模块中定义函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">adding</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">subbing</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="keyword">return</span> x-y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在模块中定义类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">calculator</span>: <span class="comment"># 定义一个加法计算器</span></span><br><span class="line"><span class="meta">    @classmethod  </span><span class="comment"># 导入计算器模块</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sum</span>(<span class="params">cls,*nums</span>):</span><br><span class="line">        res = <span class="number">0</span> </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">            res += i</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">__name__ 属性是模块的内置属性，每个模块中都有该属性，当该</span></span><br><span class="line"><span class="string">.py文件是主执行文件，直接被执行时，其值为 __main__ ，当该</span></span><br><span class="line"><span class="string">.py文件是被调用，导入执行文件时，其值为模块名</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># print(__name__）# 如果这么直接这么测试，被导入文件执行时，导入文件也会打印该内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#程序入口，类似于java中的main()方法，只在当直接调用该文件时才会执行，用来执行测试</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span> :</span><br><span class="line">    <span class="built_in">print</span>(calculator.<span class="built_in">sum</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)) <span class="comment"># 只有在当前界面执行才会打印该内容，其他文件中不会执行。` </span></span><br></pre></td></tr></table></figure><h3 id="font-color-f05b72-6-1-2-使用模块-font"><font color="#f05b72">6.1.2 使用模块</font></h3><p>确保和定义模块处于同一个package，然后建立新的文件。<br>导入模块的2种方式：</p><p>方式一：import 包名.模块名 [as 别名] （别名可要可不要）<br>方式二： from 包名 import 模块名<br>from 包名.模块名 import 变量|函数|类<br>注：导入模块的代码可以放在任意位置，但一般都放在程序的开头。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式一，不定义别名</span></span><br><span class="line"><span class="keyword">import</span> 模块.定义模块 <span class="comment">#导入模块</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;*&#x27;</span> * <span class="number">50</span>)</span><br><span class="line"><span class="comment"># 方式一 定义别名</span></span><br><span class="line"><span class="keyword">import</span> 模块.定义模块 <span class="keyword">as</span> m <span class="comment"># 别名为m</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二 普通方式</span></span><br><span class="line"><span class="keyword">from</span> 模块 <span class="keyword">import</span> 定义模块  <span class="comment"># 导入模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#方式二 导入模块并传参</span></span><br><span class="line"><span class="keyword">from</span> 模块.定义模块 <span class="keyword">import</span> a,b,<span class="built_in">max</span>,<span class="built_in">min</span>,calculato</span><br><span class="line"><span class="comment"># 导入模块，多个变量\函数\类之间用逗号隔开</span></span><br></pre></td></tr></table></figure><h2 id="font-color-118899-6-2-包-font"><font color="#118899">6.2 包</font></h2><h3 id="font-color-f05b72-6-2-1-基础-font"><font color="#f05b72">6.2.1 基础</font></h3><p>为了方便归类整理和避免模块名冲突，Python又引入了按目录来组织模块的方法，称为包（Package）。</p><p>举个例子，一个zhaoyun.py的文件就是一个名字叫zhaoyun的模块，一个machao.py的文件就是一个名字叫machao的模块。</p><p>现在，假设我们的zhaoyun和machao这两个模块名字与其他模块冲突了，于是我们可以通过包来组织模块，避免冲突。方法是选择一个顶层包名，比如shu，按照如下目录存放：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mycompany</span><br><span class="line">├─ __init__.py</span><br><span class="line">├─ machao.py</span><br><span class="line">└─ zhaoyun.py</span><br></pre></td></tr></table></figure><p>引入了包以后，只要顶层的包名不与别人冲突，那所有模块都不会与别人冲突。现在，zhaoyun.py模块的名字就变成了shu.zhaoyun，类似的，machao.py的模块名变成了shu.machao。</p><p>每一个包目录下面都会有一个__init__.py的文件，这个文件是必须存在的，否则，Python就把这个目录当成普通目录，而不是一个包。<strong>init</strong>.py可以是空文件，也可以有Python代码，因为__init__.py本身就是一个模块，而它的模块名就是shu。</p><p>类似的，可以有多级目录，组成多级层次的包结构。比如如下的目录结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sanguosha</span><br><span class="line"> ├─ shu</span><br><span class="line"> │  ├─ __init__.py</span><br><span class="line"> │  ├─ zhaoyun.py</span><br><span class="line"> │  └─ machao.py</span><br><span class="line"> ├─ qun</span><br><span class="line"> │  ├─ __init__.py</span><br><span class="line"> │  ├─ zhaoyun.py</span><br><span class="line"> │  └─ machao.py</span><br><span class="line"> ├─ __init__.py</span><br><span class="line"> ├─ wei.py</span><br><span class="line"> └─ wu.py</span><br></pre></td></tr></table></figure><h3 id="font-color-f05b72-6-2-2-标准库-font"><font color="#f05b72">6.2.2 标准库</font></h3><p>Python提供了一个强大的标准库，内置了许多非常有用的模块，可以直接使用，不用单独安装。</p><p>完整的库及介绍可以见官网:`https://docs.python.org/zh-cn/3/library/index.html</p><p>如果嫌官方太麻烦，可以看：<a href="https://www.cnblogs.com/jiangchunsheng/p/9275881.html%EF%BC%8Chttps://www.cnblogs.com/aipiaoborensheng/p/7813087.html">https://www.cnblogs.com/jiangchunsheng/p/9275881.html，https://www.cnblogs.com/aipiaoborensheng/p/7813087.html</a><code>，</code><a href="https://blog.51cto.com/12402007/2164567%60">https://blog.51cto.com/12402007/2164567`</a></p><p>这里说明一下标准库或第三方库的使用方法：</p><p>格式: import库名（文件顶端导入库）<br>引用：库名.功能 即可<br>如:</p><ul><li>sys：获取python解析的信息</li><li>os：对操作系统进行访问，主要是对目录或文件操作</li><li>math：数学运算</li><li>random：生成随机数</li><li>datetime:处理日期和时间，提供了多个类（dimedelta是处理时间类）</li><li>time：处理时间，关于时间加减 可以参考：<a href="https://blog.csdn.net/xieganyu3460/article/details/82229039">https://blog.csdn.net/xieganyu3460/article/details/82229039</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment">#时间库的两种导入方法。用法不一样</span></span><br><span class="line"><span class="comment">#import datetime</span></span><br><span class="line"><span class="comment">#print(datetime.datetime.now()) #import方法导入使用方法</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime,timedelta <span class="comment">#为了简便，建议使用这种方式导入时间库</span></span><br><span class="line"><span class="comment">#print(datetime.now()) #from导入使用方法</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sys.version) <span class="comment">#python版本</span></span><br><span class="line"><span class="built_in">print</span>(sys.platform) <span class="comment"># 系统平台</span></span><br><span class="line"><span class="built_in">print</span>(sys.argv) <span class="comment">#命令行参数</span></span><br><span class="line"><span class="built_in">print</span>(sys.path) <span class="comment">#模块搜索路径，包含了python解析器查找模块的搜索路径</span></span><br><span class="line"><span class="built_in">print</span>(sys.modules) <span class="comment">#显示当前程序中引入的所有模块</span></span><br><span class="line"><span class="built_in">print</span>(sys.getdefaultencoding()) <span class="comment">#默认字符集</span></span><br><span class="line"><span class="comment">#sys.exit(&#x27;程序退出（自定义提示内容）&#x27;) #退出解析器</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;——————————————————————————————————————————————&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(os.name) <span class="comment">#操作系统的类型</span></span><br><span class="line"><span class="built_in">print</span>(os.environ) <span class="comment">#系统的环境变量</span></span><br><span class="line"><span class="built_in">print</span>(os.getcwd()) <span class="comment">#当前的目录</span></span><br><span class="line"><span class="built_in">print</span>(os.listdir(<span class="string">&#x27;d:/&#x27;</span>)) <span class="comment">#列出指定目录的内容</span></span><br><span class="line"><span class="built_in">print</span>(os.path.exists(<span class="string">&#x27;d:/newfile&#x27;</span>)) <span class="comment">#判断路径是否存在</span></span><br><span class="line"><span class="comment">#os.system(&#x27;ping baidu.com&#x27;) #执行系统命令</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;——————————————————————————————————————————————&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(math.pi) <span class="comment">#获取圆周率</span></span><br><span class="line"><span class="built_in">print</span>(math.ceil(<span class="number">3.4</span>)) <span class="comment">#向上取整（结果4）</span></span><br><span class="line"><span class="built_in">print</span>(math.floor(<span class="number">3.4</span>)) <span class="comment">#向下取整（结果3）</span></span><br><span class="line"><span class="built_in">print</span>(math.<span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">3</span>)) <span class="comment">#开平方，如这就是2的3次方</span></span><br><span class="line"><span class="built_in">print</span>(math.trunc(<span class="number">2.777</span>)) <span class="comment">#去尾取整 （结果为2）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">round</span>(<span class="number">2.777</span>)) <span class="comment">#结尾取整(结果为3）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">round</span>(<span class="number">3.1415925</span>,<span class="number">3</span>)) <span class="comment">#四舍五入，保留3位小数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;——————————————————————————————————————————————&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(random.random()) <span class="comment"># 默认返回[0,1]之间的随机浮点数</span></span><br><span class="line"><span class="built_in">print</span>(random.randint(<span class="number">1</span>,<span class="number">101</span>)) <span class="comment">#返回1-101 之间的随机整数</span></span><br><span class="line"><span class="built_in">print</span>(random.sample([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">16</span>,<span class="number">66</span>,<span class="number">7</span>],<span class="number">2</span>)) <span class="comment">#在数组中随机返回2个数值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#print(datetime.datetime.now()) #import方法导入使用方法</span></span><br><span class="line"><span class="built_in">print</span>(datetime.now())  <span class="comment">#默认显示当前时间 年月日，时分秒毫秒</span></span><br><span class="line"><span class="built_in">print</span>(datetime.strftime(datetime.now(),<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)) <span class="comment">#将datetime转换为指定格式的str，不支持中文。</span></span><br><span class="line"><span class="comment">#如果要支持中文，可以使用占位符的方式实现。</span></span><br><span class="line"><span class="built_in">print</span>(datetime.strftime(datetime.now(),<span class="string">&#x27;%Y&#123;0&#125;-%m&#123;1&#125;-%d&#123;2&#125; %H:%M:%S&#x27;</span>).<span class="built_in">format</span>(<span class="string">&#x27;年&#x27;</span>,<span class="string">&#x27;月&#x27;</span>,<span class="string">&#x27;日&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(datetime.strptime(<span class="string">&#x27;2020-04-11&#x27;</span>,<span class="string">&#x27;%Y-%m-%d&#x27;</span>)) <span class="comment"># 将str转换为datetime格式</span></span><br><span class="line"><span class="comment">#时间加减，需要另外一个库，格式是这样的： from datetime import datetime,timedelta</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;明天：&#x27;</span>,datetime.now()+timedelta(days=<span class="number">1</span>)) <span class="comment">#timedelta表示两个时间之间的时间差，可以用来进行日间的加减操作</span></span><br><span class="line"><span class="comment">#timedelta(weeks=0, days=0, hours=0, minutes=0,  seconds=0, milliseconds=0, microseconds=0, ) </span></span><br><span class="line"><span class="comment">#     依次为 &quot;周&quot; &quot;天&quot;, &quot;时&quot;,&quot;分&quot;,&quot;秒&quot;,&quot;毫秒&quot;,&quot;微秒&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;——————————————————————————————————————————————&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(time.time()) <span class="comment">#返回当前的时间戳</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(time.time())) <span class="comment">#秒级时间戳</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(time.time() * <span class="number">1000</span>)) <span class="comment">#毫秒级时间戳</span></span><br><span class="line">time.sleep(<span class="number">5</span>) <span class="comment">#休眠5秒` </span></span><br></pre></td></tr></table></figure><h3 id="font-color-f05b72-6-2-3-第三方包-font"><font color="#f05b72">6.2.3 第三方包</font></h3><p>PYthon社区提供了大量的第三方包，使用方式与标准库类似。<br>安装第三方包：</p><p>1、使用包管理工具：pip（随python一起安装的）<br>语法：pip install 模块名<br>使用方法参考:<code>https://jingyan.baidu.com/article/466506583fec5af549e5f825.html</code><br>2、使用pycharm 来安装:<br>方法：file-settings(设置)-Project:python-Project Interpreter<br>注意要选择当前版本：<br><img src="https://img-blog.csdnimg.cn/20200904181927533.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N1aWNob25neGlu,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>安装新模块：<br><img src="https://img-blog.csdnimg.cn/20200904181931993.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N1aWNob25neGlu,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>搜索模块名并安装:<br><img src="https://img-blog.csdnimg.cn/20200904181949365.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N1aWNob25neGlu,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>成功安装界面：<br><img src="https://img-blog.csdnimg.cn/20200904181958833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N1aWNob25neGlu,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>pycharm安装报错处理方法：<br>报错信息：<br><img src="https://img-blog.csdnimg.cn/20200904182007134.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N1aWNob25neGlu,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>问题说明:是因为pychram 安装脚本有问题。<br>处理方法：退出pycharm，右键pycharm-属性-打开安装位置 <img src="https://img-blog.csdnimg.cn/20200904182041961.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N1aWNob25neGlu,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>打开以后默认在bin目录，返回上一级-打开plugins-python-helpers目录-编辑packaging_tool.py文件<br>如果找不到这个目录：在安装目录首页搜索：packaging<br><img src="https://img-blog.csdnimg.cn/20200904182051380.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N1aWNob25neGlu,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>定位到packaging_tool.py文件后<br><img src="https://img-blog.csdnimg.cn/20200904182058322.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N1aWNob25neGlu,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>右键打开方式-写字板打开-找到 do_install<br><img src="https://img-blog.csdnimg.cn/20200904182104979.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N1aWNob25neGlu,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>我的上面是正常的，把你的这2个内容全部删了，替换为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">`def do_install(pkgs):</span><br><span class="line">    run_pip([&#x27;install&#x27;] + pkgs)</span><br><span class="line"></span><br><span class="line">def do_uninstall(pkgs):</span><br><span class="line">    run_pip([&#x27;uninstall&#x27;, &#x27;-y&#x27;] + pkgs)` </span><br></pre></td></tr></table></figure><p>替换完以后重写打开pycharm并重新安装模块即可。</p><p>如果替换为上面的不行则用下面的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">`def do_install(pkgs):</span><br><span class="line">    try:</span><br><span class="line">        # import pip</span><br><span class="line">        try:</span><br><span class="line">            from pip._internal import if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">        except Exception:</span><br><span class="line">            from pip import if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    except ImportError:</span><br><span class="line">        error_no_pip()</span><br><span class="line">    return main([&#x27;install&#x27;]+pkgs)</span><br><span class="line"></span><br><span class="line">def do_uninstall(pkgs):</span><br><span class="line">    try:</span><br><span class="line">        #import pip</span><br><span class="line">        try:</span><br><span class="line">            from pip._internal import main</span><br><span class="line">        except Exception:</span><br><span class="line">            from pip import main</span><br><span class="line">        except ImportError:</span><br><span class="line">            error_no_pip()</span><br><span class="line">        return main([&#x27;uninstall&#x27;,&#x27;-y&#x27;] + pkgs)` </span><br></pre></td></tr></table></figure><p>注意格式:如果放进去格式乱了，用其他文件打开，notepad或者pycharm打开把<br><img src="https://img-blog.csdnimg.cn/20200904182151306.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N1aWNob25neGlu,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>默认是在python官网下载的模块（如果模块较大，可能会比较慢)，可以更改下载源<br><img src="https://img-blog.csdnimg.cn/20200904182201259.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N1aWNob25neGlu,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>比如<code>https://pypi.python.org/simple</code>改成<code>https://pypi.douban.com/simple</code></p><h3 id="font-color-f05b72-6-2-4-pyecharts的使用-font"><font color="#f05b72">6.2.4 pyecharts的使用</font></h3><p>百度搜索：<code>echarts</code>，点击实例，你可以发现一个很骚气的东西<br><img src="https://img-blog.csdnimg.cn/20200904182224176.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N1aWNob25neGlu,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>随便点开一个，发现，卧槽，还有代码，如果把这作为背景，这也太帅了把，当然，我臆想的而已，我现在还不知道这能不能作为网页之类的背景呢！！！！<br><img src="https://img-blog.csdnimg.cn/20200904182234980.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N1aWNob25neGlu,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>pyecharts是一个用于Echarts图表的类库，便于在Python中根据数据生成可视化的图标，Echarts是百度开源的一个数据可视化JS库，主要用来进行数据可视化。</p><p>各种图标使用方式见官方（太炫酷了把）：<code>http://pyecharts.org/#/zh-cn/basic_charts?id=funnel%ef%bc%9a%e6%bc%8f%e6%96%97%e5%9b%be</code></p><p>使用前得先安装pyecharts模块：<br><img src="https://img-blog.csdnimg.cn/20200904182311490.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N1aWNob25neGlu,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>使用前需要注意一个坑！！！ 包名和文件名 不能有中文，否则 就会报错！！！<br>包和类全部无中文！！！<br>运行无报错以后，在同包下面会生成一个 html结尾的文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">`from pyecharts.charts import Bar</span><br><span class="line"></span><br><span class="line">bar = Bar()</span><br><span class="line">bar.add_xaxis([&quot;衬衫&quot;, &quot;羊毛衫&quot;, &quot;雪纺衫&quot;, &quot;裤子&quot;, &quot;高跟鞋&quot;, &quot;袜子&quot;])</span><br><span class="line">bar.add_yaxis(&quot;地表最强yy商铺&quot;, [5, 20, 36, 10, 75, 90])</span><br><span class="line"># render 会生成本地 HTML 文件，默认会在当前目录生成 render.html 文件</span><br><span class="line"># 也可以传入路径参数，如 bar.render(&quot;mycharts.html&quot;)</span><br><span class="line">bar.render(&quot;mycharts.html&quot;)</span><br><span class="line">bar.render()` </span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200904182336550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N1aWNob25neGlu,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>现在运行 自动生成的.html结尾的文件！<br>就会打开一个网页，里面就是表格信息了！！！！<br><img src="https://img-blog.csdnimg.cn/20200904182349771.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N1aWNob25neGlu,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>但是，我第二次弄的时候导包突然报错了！！！<br>葛优瘫坐在椅子上 深思 …<br>葛优瘫坐在椅子上 深思 …<br>突然想到，我包名是pyecharts , 模块是pyecharts。。我from导入的时候会不会系统默认给我导入我创建的这个包了啊？？？<br>我把我这个包名改了试试，报错。唉 果然不是这个问题啊！<br><img src="https://img-blog.csdnimg.cn/20200904182406689.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N1aWNob25neGlu,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>难道是 文件名有错？ demo01和其他包里的重复了？ 我又把 文件名后面都加了个test，然后还是不行啊，我以为没生效，重启了软件，还是不行啊。哎 看来真出问题了。<br><img src="https://img-blog.csdnimg.cn/20200904182607536.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N1aWNob25neGlu,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>都不行怎么办? 凉拌啊 凉了啊！！！ 哎<br>要不重新导入模块试试，试试把 反正也就这样了！！！<br>咦？ 可以了，我仔细看了一下，卧槽！！！！ 就是我之前想的那样，导入的模块系统默认导入同名的包了！！ 然后我改了包名，这名字也改了，没注意看啊！！ 坑爹啊 坑爹啊！！！ 细心点 细心点啊！！！<br><img src="https://img-blog.csdnimg.cn/20200904182613713.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N1aWNob25neGlu,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>上诉能正常执行以后，参加:<code>http://gallery.pyecharts.org/#/Map3D/map3d_china_base</code><br>这是官方给的 所有代码！！！</p><p>随便来几个官网中的代码测试:<br>demo1: 生成3D柱形图<br>执行方式，执行该代码就会自动生成一个html的文件，再打开自动生成的html即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">`import random</span><br><span class="line"></span><br><span class="line">from pyecharts import options as opts</span><br><span class="line">from pyecharts.charts import Bar3D</span><br><span class="line"></span><br><span class="line">x_data = y_data = list(range(10))</span><br><span class="line"></span><br><span class="line">def generate_data():</span><br><span class="line">    data = []</span><br><span class="line">    for j in range(10):</span><br><span class="line">        for k in range(10):</span><br><span class="line">            value = random.randint(0, 9)</span><br><span class="line">            data.append([j, k, value * 2 + 4])</span><br><span class="line">    return data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bar3d = Bar3D()</span><br><span class="line">for _ in range(10):</span><br><span class="line">    bar3d.add(</span><br><span class="line">        &quot;&quot;,</span><br><span class="line">        generate_data(),</span><br><span class="line">        shading=&quot;lambert&quot;,</span><br><span class="line">        xaxis3d_opts=opts.Axis3DOpts(data=x_data, type_=&quot;value&quot;),</span><br><span class="line">        yaxis3d_opts=opts.Axis3DOpts(data=y_data, type_=&quot;value&quot;),</span><br><span class="line">        zaxis3d_opts=opts.Axis3DOpts(type_=&quot;value&quot;),</span><br><span class="line">    )</span><br><span class="line">bar3d.set_global_opts(title_opts=opts.TitleOpts(&quot;Bar3D-堆叠柱状图示例&quot;))</span><br><span class="line">bar3d.set_series_opts(**&#123;&quot;stack&quot;: &quot;stack&quot;&#125;)</span><br><span class="line">bar3d.render(&quot;bar3d_stack.html&quot;)` </span><br></pre></td></tr></table></figure><p>效果图：<br><img src="https://img-blog.csdnimg.cn/20200904182734790.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N1aWNob25neGlu,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>demo2：三维地图</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">`from pyecharts import options as opts</span><br><span class="line">from pyecharts.charts import Map</span><br><span class="line">from pyecharts.faker import Faker</span><br><span class="line"></span><br><span class="line">c = (</span><br><span class="line">    Map()</span><br><span class="line">    .add(&quot;中国&quot;, [list(z) for z in zip(Faker.provinces, Faker.values())], &quot;china&quot;)</span><br><span class="line">    .set_global_opts(</span><br><span class="line">        title_opts=opts.TitleOpts(title=&quot;测试而已，数据没有意义(ccx著)&quot;),</span><br><span class="line">        visualmap_opts=opts.VisualMapOpts(max_=500, is_piecewise=True),</span><br><span class="line">    )</span><br><span class="line">    .render(&quot;map_visualmap_piecewise.html&quot;)</span><br><span class="line">)` </span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://img-blog.csdnimg.cn/20200904182749262.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N1aWNob25neGlu,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><hr>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Py </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简析BUCK/BOOST电路</title>
      <link href="/2022/04/23/BUBOO/"/>
      <url>/2022/04/23/BUBOO/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>DC/DC电源是开关电源的一类，其主要可以分为两种：</p><p>隔离型——指输出GND和的输入GND无关的电源，也称为悬浮电源。</p><p>非隔离型——指输出与输入共地的电源。</p><p>我们要讲的BUCK和BOOST电路就属于后者。</p><h2 id="font-color-purple-boost电路-font"><font color="Purple">BOOST电路</font></h2><p>BOOST是升压模式DC/DC电路，其主要由电容、电感、功率MOS管、PWM模块、二极管、输出电阻构成，其能够实现将直流电压升压输出的功能，如图所示的电路就是将10Vdc电压变换为17.7V。</p><img src="/2022/04/23/BUBOO/boost0.png"><p>原理分析：</p><p>首先，对于如图所示的电路，其主路上仅含有电感和负载，而开关与负载并联。当开关闭合时，负载短路，电流经过电感回到电源负极，电感充电；当开关断开时，电感放电，与电源电压叠加，从而提高负载两端电压。</p><img src="/2022/04/23/BUBOO/boost1.bmp"><p>然而如图所示的电路只能实现电感放电时段的电压放大，而在电感充电时间由于负载短接其电压保持为0。因此，我们为电路加上电容和二极管，前者起到稳压作用，而后者使得开关闭合时负载上端不会短接于地。</p><img src="/2022/04/23/BUBOO/boost2.bmp"><p>由于储能元件衰减放电，在一个开关周期内，输出电压会逐渐减小，因此我们需要足够高频率的开关以保持输出电压稳定，一般采用PWM（或PFM）与场效应管配合的方法实现高频开关。</p><p>理论公式：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>V</mi><mrow><mi>o</mi><mi>u</mi><mi>t</mi></mrow></msub><mo>=</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>−</mo><mi>D</mi></mrow></mfrac><msub><mi>V</mi><mrow><mi>i</mi><mi>n</mi></mrow></msub></mrow><annotation encoding="application/x-tex">V_{out}=\frac {1}{1-D}V_{in}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">u</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2484389999999999em;vertical-align:-0.403331em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><h2 id="font-color-purple-buck电路-font"><font color="Purple">BUCK电路</font></h2><p>与之对应的，BUCK电路用作DC/DC降压模块。</p><img src="/2022/04/23/BUBOO/buck0.png"><p>当开关闭合时，电源通过电感给负载供电，并将电能储存在电感L和输出电容C，由于电感L的自感，在开关闭合时，电流增大的比较缓慢，在其升高到既定电压时断开开关，由于电感L的自感作用，电路中的电流不变。此时电感作电源，电流流过负载，经过二极管返回，从而形成一个回路。通过控制PWM的占空比就可以控制输出的电压。</p><img src="/2022/04/23/BUBOO/buck1.bmp"><p>我们同样采用PWM和MOSFET实现高频开关。</p><p>理论公式：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>V</mi><mrow><mi>o</mi><mi>u</mi><mi>t</mi></mrow></msub><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>D</mi><mo stretchy="false">)</mo><msub><mi>V</mi><mrow><mi>i</mi><mi>n</mi></mrow></msub></mrow><annotation encoding="application/x-tex">V_{out}=(1-D)V_{in}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">u</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><h2 id="font-color-purple-buck-boost电路-font"><font color="Purple">BUCK-BOOST电路</font></h2><p>以上两种电路都只能实现升压或降压中的一种，于是我们很自然地联想到有没有一种电路能够自如实现升压和降压呢，于是BUCK-BOOST电路就诞生了。</p><img src="/2022/04/23/BUBOO/bub.bmp"><p>其同样是通过电感储能来实现升压和降压，值得注意的是，其输出电压一定为反向电压。</p><p>理论公式：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><msub><mi>V</mi><mrow><mi>o</mi><mi>u</mi><mi>t</mi></mrow></msub><mo>=</mo><mfrac><mi>D</mi><mrow><mn>1</mn><mo>−</mo><mi>D</mi></mrow></mfrac><msub><mi>V</mi><mrow><mi>i</mi><mi>n</mi></mrow></msub></mrow><annotation encoding="application/x-tex">-V_{out}=\frac {D}{1-D}V_{in}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord">−</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">u</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.275662em;vertical-align:-0.403331em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p>注：由于储能元件的能量变化是非线性的，以上理论公式的估算结果均与实际值相差较大，实际电压仍需测量或精密计算获得。</p><br>__________________<p>By <a href="https://signalista.github.io">Signalista</a></p><br>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模电 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四种基本整流电路</title>
      <link href="/2022/04/23/rectifier/"/>
      <url>/2022/04/23/rectifier/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>整流电路是最常见的一种AC/DC转换电路，属于开关电源的一种，话不多说，闲来无事，简单整理一下4种整流电路。</p><h2 id="font-color-118899-半波整流电路-font"><font color="#118899">半波整流电路</font></h2><p>如图所示，半波整流电路中，变压器(同名)将电源和负载隔离，次级侧二极管只能正向导通。</p><img src="/2022/04/23/rectifier/b11.bmp"><p>0～π期间电压源处于正半周，这时变压器次级上正下负，二极管D1正向导通，电源电压加到负载R1上，负载R1中有电流通过；π～2π期间电源电压进入负半周，变压器次级上负下正，二极管D1反向截止。如此重复，从而滤去负半周电压，达到整流效果，因为其只取一半电压，故成为半波整流。</p><h2 id="font-color-118899-全波整流电路-font"><font color="#118899">全波整流电路</font></h2><p>因为半波整流只能得到一半的DC电压，其整流效率较低，于是通常人们更倾向于选用可以同时利用正向电压和反向电压的全波整流。</p><img src="/2022/04/23/rectifier/b22.bmp"><p>如果上一电路还不能很好地体现隔离电压源和负载端的作用，这个电路就能够很好凸显了，它能够自适应地改变“地”的位置以使负载电压永远为上正下负。全波整流的效果是将反向电压翻折到正向。</p><h2 id="font-color-118899-桥式整流电路-font"><font color="#118899">桥式整流电路</font></h2><p>全波整流需要特制的变压器，制作成本较高且麻烦，于是桥式整流电路就诞生了，它利用四个二极管组成的整流桥对反向电压进行翻转。</p><img src="/2022/04/23/rectifier/b33.bmp"><p>在电源正半周时，电流由电压源正极经过D1、R1、D4回到电压源负极；在电源负半周时，电流由负极经过 D2、R1、D3回到正极。从而保证R1两端的电压始终是上正下负，其波形与全波整流时一致。</p><h2 id="font-color-118899-倍压整流电路-font"><font color="#118899">倍压整流电路</font></h2><p>以上方法均只能使输出电压低于输入电压有效值，若要求输出电压大于交流电压有效值，可以利用倍压整流电路。</p><img src="/2022/04/23/rectifier/b44.bmp"><p>如图，在电源的正半周，D1导通，D2截止，C1充电，充电后C1两端电压接近电源电压峰值，方向为左端正右端负；在电源的负半周，D1截止，D2导通，C2充电，充电后C2两端电压接近C1两端电压与电源电压峰值之和，方向为下正上负。由于负载R1与C1并联，当R1足够大时，R1两端的电压即为接近2倍的电压源峰值。</p><p>当然，我们也可以重复这种结构，得到更大倍数的电压，然而其稳定性也会随之减小，波动幅度增大。如下图为三倍压电路：</p><img src="/2022/04/23/rectifier/b55.bmp"><p>也可也改进为多级n倍放大形式：</p><img src="/2022/04/23/rectifier/b66.bmp"><br><p>That’s all.</p><hr><p>by <a href="https://signalista.github.io/">Signalista</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模电 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在MC中实现逻辑电路【2】逻辑门</title>
      <link href="/2022/04/21/mc02/"/>
      <url>/2022/04/21/mc02/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>列位客官，上回咱讲到哪儿啊？咱讲到</p><p><strong>高低电平 红石粉传导电信号  连续脉冲 电平器作比边沿器</strong></p><p>咱今儿个，继续来讲红石电路。</p><hr><h1><font color="Purple">基本逻辑门</font></h1><p>逻辑门（Logic Gates)是在集成电路(Integrated Circuit)上的基本组件。简单的逻辑门可由晶体管组成。这些晶体管的组合可以使代表两种信号的高低电平在通过它们之后产生高电平或者低电平的信号。高、低电平可以分别代表逻辑上的“真”与“假”或二进制当中的1和0，从而实现逻辑运算。</p><h2 id="font-color-118899-或门-font"><font color="#118899">或门</font></h2><img src="/2022/04/21/mc02/huomen.png"><p>在MC中，由于红石信号由高向低传播，而较高的电平信号会覆盖较低的信号的特性，我们可以很直观地得出线或关系，即直接将两个信号连接得到或逻辑，同时，在电路中加上控制信号流向的红石中继器，我们便能够得到或门电路。</p><p>或门有两个输入端和一个输出端，在输入端信号至少有一个高电平时输出信号即为高电平。</p><table><thead><tr><th style="text-align:center">输入1</th><th style="text-align:center">输入2</th><th style="text-align:center">输出</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr></tbody></table><h2 id="font-color-118899-非门-font"><font color="#118899">非门</font></h2><img src="/2022/04/21/mc02/feimen.png"><p>在非门中，我们需要用到红石火把的一个重要特性——充能状态下不产生信号。单独的红石火把可以用作连续信号源，然而我们在对红石火把输入高电平时，其不产生信号，从而实现对信号的逻辑翻转，利用这一特性可以制作非门。</p><p>非门将低电平信号变为高电平，将高电平信号变为低电平。</p><table><thead><tr><th style="text-align:center">输入</th><th style="text-align:center">输出</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0</td></tr></tbody></table><h2 id="font-color-118899-与门-font"><font color="#118899">与门</font></h2><img src="/2022/04/21/mc02/yumen.png"><p>由电路逻辑，AB=非(非A+非B），我们可以利用三火把结构，通过或门和非门来搭建与门。</p><p>与门仅有在两个输入信号均为高电平时输出高电平，其余情况均输出低电平。</p><table><thead><tr><th style="text-align:center">输入1</th><th style="text-align:center">输入2</th><th style="text-align:center">输出</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr></tbody></table><h1><font color="Purple">非基本逻辑门</font></h1><h2 id="font-color-118899-同或门与异或门-font"><font color="#118899">同或门与异或门</font></h2><p>除了与、或、非门外，异或门也是一种常见的逻辑门器件。</p><p>当输入信号相异（即一高一低）时输出高电平信号的为异或门，即Z=(A⊕B)。</p><table><thead><tr><th style="text-align:center">输入1</th><th style="text-align:center">输入2</th><th style="text-align:center">输出</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数电 </tag>
            
            <tag> MC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>智慧树与便秘因子</title>
      <link href="/2022/04/13/Sapindus/"/>
      <url>/2022/04/13/Sapindus/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><h2 id="1">1</h2><p>犹记得当年在Z市读书的时候，每天最期待的除了晚自习后的吵吵嚷嚷的寝室，就是大课间跑操完之后的那段时间，我和几个小伙伴就会在河边走一走，逛一逛，互相开开玩笑。</p><p>啊对了，其实那段时间理论上是有安排的，有时候好像是跳长绳，还有的时候是引体向上，不过这都不重要，故事，就发生在河边的那条小路上。</p><p>好像是有一次闲来无事吧，走在路上随便踢着地上的果子。那果子长得有点像干掉的荔枝，大小又似龙眼，屁股上有一块栗子般的印记，好吧我承认都不怎么像，反正就是看起来感觉哪里见过。</p><p>弯弯的小河边，弯弯的路，弯弯路上小果子，弯弯的跑着。</p><p>——“嘿，xy兄，你有没有发现一个事情。”</p><p>——“嗯？什么事情？”</p><p>——“你仔细看这个果子的轨迹。”</p><p>我又踢了几次那样的小果子，我似乎也发现了什么不对劲的地方。</p><p>——“诶，奇怪。”</p><p>——“对啊很奇怪。”</p><p>——“为什么这个果子永远沿着路走呢？”</p><p>此话一出，我和小伙伴们面面相觑，互相查看了别人的表情，都是一丝惊讶的微笑。</p><p>——“好奇怪哦，那如果我直接往河里踢呢？”</p><p>于是他抬起腿，给了它一脚，那果子却突然转变方向，朝着路上走了。</p><p>——“我的天呐！”</p><p>再一次，他冲上前去，又给了他一脚。这一次，那果子一头撞在了河边的石柱上，弹回来，然后又沿着路跑远了。</p><p>——“它真的会沿着路走诶！”</p><p>——“它真的好聪明！”</p><p>当然，不信邪的他直接把果子拾了起来，扔到了河里。我们都趴到栏杆上看着那果子，它没有沉下去，反而似乎在游泳，一边吐着白色的泡泡，一边漂向了对岸。</p><p>——“它真的好聪明诶！”我们再次惊叹。</p><p>真的好不可思议，一个果子，怎么会操控自己的方向，让自己不会掉到河里去呢，然后又是怎么游到对岸的呢。这件事给我幼小的心灵里留下了巨大的问号，以至于我们命名它为“智慧果”。</p><p>啊对了，那之后的一次数学考试，我们都考得不怎么样。</p><p>——“也许是我们冒犯到了智慧果吧。”</p><p>再后来，我们试图去找这果子是从哪里来的————白色的树皮，挺拔的树干，叶子耷拉着，上面挂着一颗颗的小果子————后来我们把它叫做“智慧树”。</p><p>我们学校最大的一颗“智慧树”在小路旁的一个休息区里，那里的石砖有大大小小的凹凼，“智慧果”就很容易滚到那里面，所以总是一撮一撮的摆放着，好似供奉什么神灵的祭坛。我们也曾在考前来拜过几次，有没有效果我不大清楚，但至少我们再不敢对“智慧果”不敬了。</p><hr><h2 id="2">2</h2><p>走过那河畔的小径，就是回教室的路了，路旁是低矮的灌木，深绿的密丛托举着淡黄色的嫩叶，一看到就有夏天的感觉。</p><p>便秘因子就是一种长在它身上的蚜虫(?)，也可能是虫瘿吧，反正它不常有，事情也发生得很有戏剧性，以至于我现在似乎觉得有点记忆错乱。</p><p>那一天不知怎的，wzdd突发奇想对那叶子上懒懒晒太阳的蚜虫下手了，他就轻轻地捏了一下，里面爆出了汁水，一开始没有人在意这件事情，直到他一连便秘了几天。</p><p>紧接着，更奇怪的事情发生了，一个看到他便秘的伙伴也开始出现了一样的症状，有的时候他们一下课就跑出去，能旷半节课回来。</p><p>——“一定是便秘因子的关系。”他说道。</p><p>——“一定是便秘因子。”另一个伙伴也说。</p><p>我从来没听说过这个名字，但是不得不说每次提到这个名字我们都会捧腹大笑。然后是一些我不知道是真还是假的东西，传说身边看到过有人因为“便秘因子”而便秘的人都会继续便秘，而“便秘因子”的影响周期一般是3天，3天之后突然就会恢复正常。</p><p>这听起来像是什么魔幻现实小说里面的故事，但我们当时似乎都信以为真，还添油加醋地创造了很多理论。</p><p>——“首先，我觉得这是一种病毒。”</p><p>——“我也觉得。”</p><p>——“嗯嗯。”</p><p>——“可奇怪的是它通过视觉传播。”</p><p>——“有什么奇怪的啦，科学书上讲过，世界上最广泛的三种东西物质、能量和信息，你看有的病毒是物质，你得吃进去什么不好的东西，那么有的病毒就能是信息……”</p><p>——“等等，其实病毒就是信息，病毒都是通过一串RNA或DNA来传播的。”</p><p>——“有道理哦。”</p><p>——“这么说，是因为我们看到了有人便秘，其携带的信息就从眼睛进入让我们得病？”</p><p>——“我的天呐，这一定是21世纪最伟大的发现之一。”</p><p>接着就又是一阵捧腹大笑。</p><p>后来还有什么长刺儿病毒和痔疮病毒什么的，它们也有自己的工作机理，凝聚着我们的异想天开，虽然现在我都不大记得了。</p><p>那时的我们总是能找到一套让自己能够信服的理由来解释一切事物。我们也总是愿意相信，相信世界就应该是这样，相信一切都有它自己的道理，相信我们自己，也相信世界上有那么多值得相信的东西。</p><hr><h2 id="3">3</h2><p>今天，我在启真湖畔走着，忽然踢到了地上的果子，它跑得很快，那种熟悉的酒红色的有些颗粒感的表面，还有它似乎在向我招手的灵性。</p><p>百度识图告诉我，它的名字叫无患子，也不叫什么智慧树。现在想起来，当年它能沿着路跑，也只是因为地砖的纹路罢了，当年它在水里吐泡泡前进，也只是因为它的肚子里有肥皂(无患子也就是肥皂树)，而那虽未的“便秘因子”也可能只是食堂出了什么问题罢了，也不会有什么“视觉传染”。</p><p>而正当我提起脚步打算离开的时候，一种远古力量拉住了我的脚跟。我俯下身来，捡起来“智慧果”，将它的表面拍拭干净，轻轻地放在路边。对自己说：</p><p>——“你永远可以相信。”</p><img src="/2022/04/13/Sapindus/%E6%99%BA%E6%85%A7%E6%9E%9C.jpg" class title="图_智慧果"><hr><p>by <a href="https://signalista.github.io/">Signalista</a></p><br>]]></content>
      
      
      <categories>
          
          <category> 手记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 朝花夕拾 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在MC中实现逻辑电路【1】电路基础</title>
      <link href="/2022/04/11/mc01/"/>
      <url>/2022/04/11/mc01/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="font-color-purple-关于红石电路你需要知道的-font"><font color="Purple">关于红石电路你需要知道的…</font></h2><p>众所周知，在MC中，红石电路是用来产生、传输、处理信号的系统，其基本原理其实是依据现实中的数字电路，从而在游戏中建立输入响应系统或达到自动化建设的效果。</p><div class="timeline pink"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><p>e.g.</p></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><p><font color="#ee8f11">红石大炮</font></p></div></div><div class="timeline-item-content"><img src="/2022/04/11/mc01/red1.jpg" height="280" width="500"></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><p><font color="#ee8f11">自动化农场</font></p></div></div><div class="timeline-item-content"><img src="/2022/04/11/mc01/red2.jpg" height="280" width="500"></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><p><font color="#ee8f11">红石音乐</font></p></div></div><div class="timeline-item-content"><img src="/2022/04/11/mc01/red3.png" height="280" width="500"></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><p>甚至<font color="#ee8f11">红石计算器</font></p></div></div><div class="timeline-item-content"><img src="/2022/04/11/mc01/red4.bmp" height="280" width="500"></div></div></div><h2 id="font-color-purple-关于红石电路你需要准备的-font"><font color="Purple">关于红石电路你需要准备的…</font></h2><div class="note blue flat"><p><i class="fas fa-circle-info" style="font-size:28;color:#3984d9"></i>  发生器：产生红石信号的部件<br><br><i class="fas fa-circle-info" style="font-size:28;color:#3984d9"></i>  传输线：传导电平信号的部件<br><br><i class="fas fa-circle-info" style="font-size:28; color:#3984d9"></i>  执行器：依据输入信号作出反应的部件<br><br><i class="fas fa-circle-info" style="font-size:28;color:#3984d9"></i>  处理器：对信号进行加工的部件</p></div><p>在本节我们将对前三者进行介绍</p><h3 id="font-size-4-color-green-发生器-font"><font size="4" color="Green">发生器</font></h3><p>按照发出信号的类型我们可以将MC中的信号发生器大致分为<strong>连续信号发生器</strong>和<strong>脉冲信号发生器</strong>两种</p><img src="/2022/04/11/mc01/xinhao.bmp"><p><strong>连续信号发生器</strong>是指在开启状态下能够产生连续的高电平（点亮）信号的装置，常见的连续信号发生器有红石火把、红石方块，以及开启状态的拉杆、压力板、绊线钩激活铁轨等等，其中压力板也可以作为一种模电材料，此处暂且不表。</p><img src="/2022/04/11/mc01/continuous.png"><p><strong>脉冲信号发生器</strong>是指在外界激励下，产生短暂高电平信号的装置，其在一定时间（一般是10rt或15rt）后会自动关闭。常见的脉冲信号发生器有按钮、观察者，以及正在打开的陷阱箱等等。</p><img src="/2022/04/11/mc01/pulse.png"><h3 id="font-size-4-color-green-传输线-font"><font size="4" color="Green">传输线</font></h3><p>在红石电路中，红石粉是最基本的传输线，在相邻两格放置的红石粉会自动排列成导线的形状。</p><p>理论上红石信号在红石粉电路中的传导是一瞬间发生的事情，我们可以认为它不占用任何时间。而通过红石中继器的信号会发生延迟。</p><img src="/2022/04/11/mc01/relay.png"><p>红石中继器有四种工作方式，其延迟分别为1rt，2rt，3rt和4rt，因为其没有不延迟的选项，因此在需要瞬时启动的电路中，我们需要尽量减少中继器的使用。</p><p>这时候估计有同学要问了：“啊，为什么我们一定要用中继器呢，我们不用不就可以了吗？”</p><p>答案当然是不可以，因为在MC的设定中，信号是会衰减的，满状态的信号会在16格外衰减为0，从而转变为低电平信号。因此，在信号衰减到一定程度时我们必须使用中继器来将其信号重新变为高电平信号。</p><img src="/2022/04/11/mc01/damping.png"><p>这个设定起初并不是为了模拟真正的信号延迟，而是为了减少cpu负担，设想一下，如果你在MC中建立了一个巨大的cpu，并且要求它的每个部件同时启动，势必会给你自己的cpu造成巨大的负担。</p><p>为了适配当时的计算机环境，Mojang选择了0.1s作为标准延迟，如果放在电子设备蓬勃发展的现在，我想他们肯定不会搞一个这么长的延迟。然而随着算力的增加和MC的无数次版本更新，Mojang始终没有更改标准延迟的长度，这也逐渐成为了MC数字电路的一大特色。</p><p>还有一个值得一提的点是，中继器有正负极的限制，即信号仅能从一个方向向另一个方向传输，而不能反之，这是与红石粉导线有所不同的。</p><h3 id="font-size-4-color-green-执行器-font"><font size="4" color="Green">执行器</font></h3><p>与发生器类似的，执行器也可也分为<strong>电平执行器</strong>和<strong>边沿执行器</strong>，前者指在通入连续信号时连续工作的执行器，后者指边沿触发的执行器。</p><p>MC中的<strong>电平执行器</strong>均为高电平触发，常见的有铁门、活塞、红石灯等。</p><img src="/2022/04/11/mc01/actuator.png"><p>MC中的<strong>边沿执行器</strong>均为上升沿触发，常见的有投掷器、发射器、音乐盒、铃铛等。</p><img src="/2022/04/11/mc01/flop.png"><p>当然还有TNT……</p><img src="/2022/04/11/mc01/TNT.png"><p>电平执行器一般由连续信号驱动，边沿执行器一般由脉冲信号驱动。值得注意的是，连续信号由0跃变到1时也具有一个上升信号沿，也能够使边沿执行器响应一次。</p><p>若想将其作为低电平执行器或下降沿执行器，可以在电路到达执行器前加<strong>非门</strong>以改变其驱动方式。</p><p>（未完待续）</p><br><hr><p>by <a href="https://signalista.github.io/">Signalista</a></p>]]></content>
      
      
      <categories>
          
          <category> 游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数电 </tag>
            
            <tag> MC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FirstBlog</title>
      <link href="/2022/04/08/FirstBlog/"/>
      <url>/2022/04/08/FirstBlog/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="font-color-purple-part-1-font"><font color="Purple">Part 1</font></h3><p><font color="Green">第一篇博客，就来写写为什么要做这个网站吧。</font></p><p>最大的原因呢，就是想能有一块自己可以随心所欲写一些想法的地方，在puq或者qq空间动不动发长文一来也没有人看，二来可能会引起别人的反感，而发在知乎、微博或者98又怕被不知道哪里来的小鬼一顿乱冲，所以以后如果我要写一些什么长一点的东西，大概就都会放在这里啦。感兴趣的就点进来，不想进来的人也不必受到打扰。</p><p>还有一些别的小原因，比如说想给大家分享一点经验或者操作，或是一些我欣赏的音乐、电影以及有意思的网站，我也会发布在这里。还有一点作用，就是督促我自己去做一些想做的事吧，毕竟写着写着就挖了这么多坑了<del>不是</del>……</p><h3 id="font-color-purple-part-2-font"><font color="Purple">Part 2</font></h3><p><font color="Blue">关于我的名字<code>Signalista</code>，emmmm…其实只是我脑子里突然蹦出来的词。</font></p><p>可能当时正在上信号课啥也听不懂就开始水吧……可能就像java的发明者突然想起他在哪里喝过一种很好喝的咖啡，就随手抓来命名，也许这就是理工男的浪漫吧。</p><p>如果硬要我解释一下这个名字是什么意思，我觉得他首先有一点戏谑的含义。首先<code>Signal</code>是个英语单词，而<code>ista</code>是西班牙语的职业后缀，<del>是不是在暗讽我没有把西语好好学下去呢，</del>，在西语中<code>ista</code>是一个普通的职业后缀，如<code>Fondista</code>, <code>Periodista</code>, <code>Electricista</code>(对的就是我电工)，而英语中与之相类似的后缀通常表示某一方面的专家，如<code>Scientist</code>, <code>Psychologist</code>等等，而我的信号水平哈哈哈哈哈哈哈，也许是再说我是信号课的划水专家吧。</p><p>虽然这个名字是我瞎想的，但我还是给它赋予了一些有意思的含义，特别是我在想我该怎么翻译这个名字的时候，所以信号+职业会是什么呢？是应该模仿“追风筝的人”翻译成“看信号的人”，还是中二的比肩诸葛观星，觉得自己是看会看天象的“预言家”？最后我尝试了一下谷歌翻译，它给出的结果是“信号师”，我还是挺喜欢这个翻译的，翻译得和没翻译一样，留下了很多自由发挥的空间。</p><h3 id="font-color-purple-part-3-font"><font color="Purple">Part 3</font></h3><p><font color="Orange">最后来鸣谢一下对这个网站的诞生有重要影响的人。</font></p><p>首先最想感谢的是<font color="Blue">W先生</font>，好的其实我就是W先生，暂略。</p><p><font color="Blue">X先生</font>是一个对我影响很大的人，虽然在相当长的一段时间里我都认为他只是一个无趣的卷王，直到后来一次偶然的机会我才真正认识他，看到了他内心深处的理想和品格，自被他打动以后，我才从一个不学无术的纨绔子弟开始变得想要追求一些美好的东西。</p><p><font color="Blue">Y先生</font>是我想要感谢的第二个人，其实在开始建设自己的一些早期阶段，我真的好想变成卷王，但大部分时间里我只是傻呆呆的在位置上做着一些毫无意义的重复。Y先生则是一个很潇洒的人，我见过他放弃听课研究自己的代码，见过他自己写备忘录小程序，也见过他十一点多突然来到实验室兴奋地带着一块新买的板子。so我也好像成为一个这样潇洒的人啊。</p><p><font color="Blue">Z先生</font>是我要感谢的第三个人，<a href="https://baokker.github.io/">他的博客</a>给了我很大的灵感，可以说是我在这一方面的引路人吧，对了，他已经把自己的小窝建立得相当完善啦，我来替他欢迎光临。</p><p><font color="Grey">(以上WXYZ仅作为代号，与个人姓名无具体联系）</font></p><br>___________<p>by <a href="https://signalista.github.io/">Signalista</a></p><br>]]></content>
      
      
      <categories>
          
          <category> 手记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 随想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World!</title>
      <link href="/2022/04/07/hello-world/"/>
      <url>/2022/04/07/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>按照代代相传的惯例，第0篇博客当然是要写一下这个网站是如何建立的。作为一个硬件工程师，第一次做这么前端的东西消耗了我太多的脑力，好在有各位前辈给予的帮助，一并感谢github提供的开源项目和免费域名。</p><p>受人以渔，授人以鱼，代代相传的经验贴还是得完成。</p><h2 id="参考资料">参考资料</h2><div class="note info simple"><p>灵感来源：<a href="https://baokker.github.io/">Baokker’s Blog</a></p><p>总体参考：<a href="https://letian.website/githubpageshexodajianjingtaiboke/">Letian学长的Blog教程</a></p><p>流程借鉴：<a href="https://zhuanlan.zhihu.com/p/26625249">吴润的知乎分享</a></p></div><h2 id="分步流程">分步流程</h2><p>我大致采用 <mark class="hl-label purple">GithubPages</mark> +<mark class="hl-label orange">Git</mark> +<mark class="hl-label pink">Hexo</mark> +<mark class="hl-label blue">Markdown</mark>  来完成博客的建立和运行</p><h3 id="font-color-purple-githubpages-font"><font color="Purple">GithubPages</font></h3><p>GithubPages的主要功能是提供静态博客的远程服务器</p><p>进入<a href="https://github.com/">Github</a>选择<code>Sign in</code>登录或<code>Sign up</code>注册账号，并以<code>Username.github.io</code>的形式建立储存库</p><p>按照<a href="https://pages.github.com/">GithubPages</a>教程构建自己的项目站点</p><h3 id="font-color-orange-git-font"><font color="Orange">Git</font></h3><p>安装<a href="https://git-scm.com/downloads">Git</a>并配置环境变量<del>（这该死的环境变量）</del></p><p>根据本地<code>SSH key</code>配置到<code>Github</code>端  <a href="https://www.cnblogs.com/mingyue5826/p/11141324.html">教程</a></p><h3 id="font-color-pink-hexo-font"><font color="Pink">Hexo</font></h3><p>安装<a href="https://nodejs.org/en/">Nodejs</a>并根据<a href="https://www.cnblogs.com/zhouyu2017/p/6485265.html">教程</a>配置环境变量</p><p><code>Win+R</code>调出<code>cmd</code>并输入<code>npm -v</code>以查看版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\&gt; npm -v</span><br><span class="line">8.6.0</span><br></pre></td></tr></table></figure><p>出现版本号即代表安装成功，就可以进行下一步操作了。</p><p>在cmd中输入以下载Hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\&gt; npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>同样的我们检查版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\&gt; hexo -v</span><br></pre></td></tr></table></figure><p>出现版本号则代表安装成功</p><p>Hexo提供了海量的模板和快速建立博客的通道</p><p>后续操作可以参见<a href="https://hexo.io/docs/">Hexo官方文件</a></p><h3 id="font-color-blue-markdown-font"><font color="Blue">Markdown</font></h3><p>进入<a href="https://markdownpad.com/">官网</a>点击上方菜单栏的<code>Download</code>进行下载</p><p>安装的时候除了改一下位置别的一路<code>next</code>就可以了</p><p>安装辅助<a href="http://markdownpad.com/download/awesomium_v1.6.6_sdk_win.exe">Awesomium</a>以渲染，之后就能在Markdown中预览啦</p><p>根据Markdown语法的<a href="https://markdown.com.cn/basic-syntax/">官方教程</a>就可以撰写自己的文章啦</p><p>相信对于熟悉<code>Typora</code>的朋友来说这不需要学太久，以及注意一下Hexo主题的介绍文档，也许里面有更好用的功能</p><br>__________________<p>By <a href="https://signalista.github.io">Signalista</a></p><br><br>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
